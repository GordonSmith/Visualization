# Covid-Globe

Latest data regarding Corona Virus cases, provided by the [World Health Organization](https://www.who.int/). Available in API form via [https://github.com/NovelCOVID/API](https://github.com/NovelCOVID/API).

Plotted using [globe.gl](globe.gl).

```
viewof valMode = radio({
  title: 'Color by',
  options: [
    { label: 'Cases', value: 'cases' },
    { label: 'Cases Today', value: 'todayCases' },
    { label: 'Deaths', value: 'deaths' },
    { label: 'Deaths Today', value: 'todayDeaths' },
    { label: 'Recovered', value: 'recovered' },
    { label: 'Critical', value: 'critical' }
  ],
  value: 'cases'
});

viewof popRel = checkbox({
  options: [
    { value: "true", label: "Relative to population" }
  ],
  value: "true"
});
```

```
viewof globe = {
  const domEl = document.createElement('div');
  covidGlobe(domEl);
  covidGlobe.pointOfView({ lat: 32, altitude: 1.8 }, 2000); // tilt globe slightly north
  
  yield domEl;
}
```

```
colorScale = d3.scaleSequentialPow(d3.interpolateYlOrRd).exponent(1/4);
{
    //  GLobe Configuration  ---
    colorScale.domain([0, Math.max(...covidFeatureData.map(getFeatureVal))]);

    covidGlobe
        .polygonsData(covidFeatureData)
        .polygonAltitude(0.06)
        .polygonCapColor(feat => colorScale(getFeatureVal(feat)))
        .polygonSideColor(() => 'rgba(0, 100, 0, 0.15)')
        .polygonStrokeColor(() => '#111')
        .polygonLabel(({ covidData, properties }) => { 
            const capIt = str => str.charAt(0).toUpperCase() + str.slice(1);
            const relToPop = v => `${d3.format('.2')(v / properties.POP_EST * 100)}%`;
            const popRatio = v => d3.format('.3~s')(properties.POP_EST / v);
            const relToCases = v => `${d3.format('.2')(v / covidData.cases * 100)}%`;

            const formatVal = prop => `<b>${covidData[prop]}</b> ${prop === 'cases' ? `(1 in every ${popRatio(covidData[prop])} pop)` : covidData[prop] ? `(${relToCases(covidData[prop])} of cases)` : ''}${covidData[prop] && covidData.hasOwnProperty(`today${capIt(prop)}`) ? ` | new today: ${covidData[`today${capIt(prop)}`]}` : ''}`;

            return`
<b>${covidData ? covidData.country : properties.NAME} (${properties.ISO_A2}):</b> <br />
${(!covidData
? [['Cases', 0]]       
: [
    ['Cases', formatVal('cases')],
    ['Deaths', formatVal('deaths')],
    ['Recovered', formatVal('recovered')],
    ['Critical', formatVal('critical')],
    ['Population', d3.format(".3s")(properties.POP_EST)]
    ]
).map(([label, val]) => `${label}: <i>${val}</i>`)
    .join('<br />')
}
        ` })
        .onPolygonHover(hoverD => covidGlobe
            .polygonAltitude(d => d === hoverD ? 0.12 : 0.06)
            .polygonCapColor(d => d === hoverD ? 'steelblue' : colorScale(getFeatureVal(d)))
        )
        .polygonsTransitionDuration(300)
    ;
}
```

```
covidGlobe = Globe()
  .width(640)
  .height(640)
  .globeImageUrl('https://cdn.jsdelivr.net/npm/three-globe/example/img/earth-night.jpg')
  ;

```

```
//  Style ---
html`<style>
.scene-tooltip {
  padding: 8px;
  border-radius: 4px;
  background-color: rgba(0, 0, 0, 0.7);
}
.scene-tooltip:empty {
  display: none;
}
</style>`;
```

## Raw Data 
```
viewof rawData = table();
viewof rawData.json(covidData);

//  Data  ---
countries110m = fetch("https://cdn.jsdelivr.net/npm/globe.gl@latest/example/datasets/ne_110m_admin_0_countries.geojson")
    .then(r => r.json())
    ;

covidData = fetch('https://cors-anywhere.herokuapp.com/corona.lmao.ninja/countries', { headers: { 'x-requested-with': 'observablehq.com' } })
    .then(r => r.json())
    ;

fixedCountryNames = ({
  'bosnia and herzegovina': 'bosnia and herz.',
  drc: 'dem. rep. congo',
  'dominican republic': 'dominican rep.',
  'ivory coast': 'CÃ´te d\'Ivoire',
  's. korea': 'south korea',
  taiwan: 'Taiwan, Province of China',
  uae: 'United Arab Emirates',
  uk: 'United Kingdom',
  usa: 'United States of America'
});  

covidFeatureData = {
  const dataByCountry = indexBy(covidData, d => (fixedCountryNames[d.country.toLowerCase()] || d.country).toLowerCase(), false);
  
  return countries110m.features
    .filter(d => d.properties && d.properties.NAME)
    .map(d => ({
      ...d,
      covidData: dataByCountry[d.properties.NAME.toLowerCase()]
    }));    
};

getFeatureVal = feat => (feat.covidData? feat.covidData[valMode] : 0) / (popRel ? feat.properties.POP_EST : 1);
```

```
//  Logs  ---
countriesMissingGeoJson = {
  const dataByCountry = indexBy(covidData, d => (fixedCountryNames[d.country.toLowerCase()] || d.country).toLowerCase(), false);
  const geoJsonCountries = new Set(countries110m.features.map(d => d.properties.NAME.toLowerCase()));
  
  return Object.keys(dataByCountry).filter(country => !geoJsonCountries.has(country)).sort();
};

countriesMissingData = {
  const dataByCountry = indexBy(covidData, d => (fixedCountryNames[d.country.toLowerCase()] || d.country).toLowerCase(), false);
  const geoJsonCountries = new Set(countries110m.features.map(d => d.properties.NAME.toLowerCase()));
  
  return [...geoJsonCountries].filter(country => !dataByCountry.hasOwnProperty(country)).sort();
};
```

```
//  Dependencies  ---
import {radio, checkbox} from '@jashkenas/inputs';
d3 = require('d3');
indexBy = require('index-array-by');
Globe = require('globe.gl');
```
