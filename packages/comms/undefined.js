import { scopedLogger, join, promiseTimeout, exists, deepMixin, xml2json, StateObject, Cache, Graph, Subgraph as Subgraph$1, Vertex as Vertex$1, Edge as Edge$1, Stack, SAXStackParser, espTime2Seconds as espTime2Seconds$1, deepMixinT, XMLNode, debounce, Message, Dispatch, find, Dictionary, DictionaryNoCase, root } from '@hpcc-js/util';
import { DOMParser as DOMParser$1 } from '@xmldom/xmldom';
import fetch$1 from 'node-fetch';
import * as https from 'https';
import { Agent, setGlobalDispatcher } from 'undici';
import AbortController from 'abort-controller';
import { Buffer } from 'safe-buffer';
import * as cp from 'child_process';
import * as fs from 'fs';
import * as os from 'os';
import * as path from 'path';
import * as tmp from 'tmp';

var trustwave = "\nTrustwave Secure Global Extended Validation CA, Level 1\nSecureTrust Corporation\n00F6F61CE4A3635BB0CA8AACEEFCB2D0F0\n-----BEGIN CERTIFICATE-----\nMIIE+DCCA+CgAwIBAgIRAPb2HOSjY1uwyoqs7vyy0PAwDQYJKoZIhvcNAQELBQAw\nSjELMAkGA1UEBhMCVVMxIDAeBgNVBAoTF1NlY3VyZVRydXN0IENvcnBvcmF0aW9u\nMRkwFwYDVQQDExBTZWN1cmUgR2xvYmFsIENBMB4XDTE1MDgxMjIwMTcyOVoXDTI1\nMDgwOTIwMTcyOVowgbgxCzAJBgNVBAYTAlVTMREwDwYDVQQIEwhJbGxpbm9pczEQ\nMA4GA1UEBxMHQ2hpY2FnbzEhMB8GA1UEChMYVHJ1c3R3YXZlIEhvbGRpbmdzLCBJ\nbmMuMUAwPgYDVQQDEzdUcnVzdHdhdmUgU2VjdXJlIEdsb2JhbCBFeHRlbmRlZCBW\nYWxpZGF0aW9uIENBLCBMZXZlbCAxMR8wHQYJKoZIhvcNAQkBFhBjYUB0cnVzdHdh\ndmUuY29tMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAx6D45slgLGq8\n2G/NPFnuFscv7UM1eRoQyx3h0DdSTfoRvHkkNv4Gf6OudZDOXqwV86v/SjcNEP87\nnjMOEqQ7dKQPtiYzEkK0MOrjbRySFC5dvCTI9T8tnBgFpYA9YXwbpUqXxEi0Ayoq\nhA7UQhS7Q+YGrVwZaJ6LiWrQw+x8ACPLqEvPmMZhrxagKwrsKbylMsAQ1ljk8X74\nJ76TSxi/AZpxos7tHD0XbO8elXFZexfsgPLDRpMs6jREVeQj1jVCWLtg9twiXzcI\naUCchBsTSc92WGkKwBnH70dlL2N8kT/BNe3tAsXuBpZRILANY59jLrLnHEJNfado\nt6ZpougolQIDAQABo4IBaDCCAWQwEgYDVR0TAQH/BAgwBgEB/wIBADAdBgNVHQ4E\nFgQUx33qXRmrVNT6P+ZKc956sjwdbC4wDgYDVR0PAQH/BAQDAgGGMD0GA1UdIAQ2\nMDQwMgYEVR0gADAqMCgGCCsGAQUFBwIBFhxodHRwczovL3NzbC50cnVzdHdhdmUu\nY29tL0NBMDIGA1UdHwQrMCkwJ6AloCOGIWh0dHA6Ly9jcmwudHJ1c3R3YXZlLmNv\nbS9TR0NBLmNybDBsBggrBgEFBQcBAQRgMF4wJQYIKwYBBQUHMAGGGWh0dHA6Ly9v\nY3NwLnRydXN0d2F2ZS5jb20wNQYIKwYBBQUHMAKGKWh0dHA6Ly9zc2wudHJ1c3R3\nYXZlLmNvbS9pc3N1ZXJzL1NHQ0EuY3J0MB0GA1UdJQQWMBQGCCsGAQUFBwMCBggr\nBgEFBQcDATAfBgNVHSMEGDAWgBSvRATCQX5Ig9tOOQLs7IR65s7JpDANBgkqhkiG\n9w0BAQsFAAOCAQEAkn/4wKQRLo41fDRkZtfF+3o8JtUmfQXf2zoo9Ll29hhCiz8k\nBOpIek9MrFd/cdNgUw1nckIi+J3udyFrbO5p64JBvtc0K4kAOPFSKpHssFcnRLPx\nFXgGxXq6ohD4Py+xaEApslYFfMy89N6DKs/v/10/+/xD831RFEUMUoQxBimsmmNf\n+cLoMwF5bpoSz9JcWqCmSlK0Nla1dPphaoA/MObLN2iQPpeM3yF5dTUm1tPxe39W\nOlr6nLU1xO+yRDrlGLXrVDP1l1/qGVuwi+xufIAcdFycLLBjSSNX7LOIK3tbva7A\nWctLUs+qhIlUrbPyFERm7YOY4SttWdozeYFNfg==\n-----END CERTIFICATE-----\n\nSecureTrust Domain Validation CA, Level 1\nSecureTrust Corporation\n06F1EC00E80B1BAF9870A7C4B6CBE401A32D68\n-----BEGIN CERTIFICATE-----\nMIIEfzCCA2egAwIBAgITBvHsAOgLG6+YcKfEtsvkAaMtaDANBgkqhkiG9w0BAQsF\nADBIMQswCQYDVQQGEwJVUzEgMB4GA1UEChMXU2VjdXJlVHJ1c3QgQ29ycG9yYXRp\nb24xFzAVBgNVBAMTDlNlY3VyZVRydXN0IENBMB4XDTE5MDEyOTEyNTk1OVoXDTI5\nMDEyOTEyNTk1OVowfDEyMDAGA1UEAxMpU2VjdXJlVHJ1c3QgRG9tYWluIFZhbGlk\nYXRpb24gQ0EsIExldmVsIDExFDASBgNVBAoTC1NlY3VyZVRydXN0MRAwDgYDVQQH\nEwdDaGljYWdvMREwDwYDVQQIEwhJbGxpbm9pczELMAkGA1UEBhMCVVMwggEiMA0G\nCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCjRHBw8iIivBBrfE6HqexQK0oMt2Y/\nx8jO3fN96KEazZwEoGidwloRBk2Q7VfVvZ0ZDk+qwJZGLZJLS1ntGaZLH4/Iel+r\nPnp36IVF7J5MNDB+K81a/y9svEMfDu0p3FdlBUyhHvizZ/zFNP3tolmQfZ7T0mGL\n7lutlNAzFYoVTUlVeF5cSC8Yca906TEKyizYXuXcY8Diee+t+fQRHmSI5Hk5kyXD\nYFWcf2tXEfdkuFlDjJ7HPdFyfJzrNjD+cbqt8R5rZKnK1GNVP1dXm0cIYS+BMlMa\nCC1yF18oygbnOZLw5fDv9bxs4MOgF8E/Iypw0hLQHVkuD8wAvxVgPsqvAgMBAAGj\nggEsMIIBKDASBgNVHRMBAf8ECDAGAQH/AgEAMA4GA1UdDwEB/wQEAwIBhjATBgNV\nHSUEDDAKBggrBgEFBQcDATAdBgNVHQ4EFgQUYt6tehfefLfDfCMXo7Em5UbXOvQw\nHwYDVR0jBBgwFoAUQjK2FvoE/f5dS3rD/fdMQB1aQ68wQQYDVR0gBDowODA2BgRV\nHSAAMC4wLAYIKwYBBQUHAgEWIGh0dHBzOi8vY2VydHMuc2VjdXJldHJ1c3QuY29t\nL0NBMDIGA1UdHwQrMCkwJ6AloCOGIWh0dHA6Ly9jcmwudHJ1c3R3YXZlLmNvbS9T\nVENBLmNybDA2BggrBgEFBQcBAQQqMCgwJgYIKwYBBQUHMAGGGmh0dHA6Ly9vY3Nw\nLnRydXN0d2F2ZS5jb20vMA0GCSqGSIb3DQEBCwUAA4IBAQAHXPYhl+++o//di2Qm\naWGmC1ijxbGbKA4jOSDRvQfxlWOVkqPF11Dpxz+V8Rxw7QFFVoJ5mHpfoXtQOijV\ntsCFknxTKgzQeArNkZrkXBNpYOJAcuc5v0eX0OllBWgVdIvZRl2TM5L/u1WFrlPr\nqwWdEYTkinQwgAHXVV/7WZi6c4StcqNnlw93mlvN6Vspzaf/mWtcYp+aqT9vrqHt\nyNR1k8Ri5eIRPIU0B8woiXTj3bifLg6/O217SY5cWwQKCMFsa6nGWoRVCJ0JJXa0\nZ+m3mPQD2OcW5YMrynhL2VWohyfZAjB8l/NZaeRT7M+vki56fxbx3Bk2lqy8Z1Zz\nWd5m\n-----END CERTIFICATE-----\n\nSecureTrust Extended Validation CA, Level 1\nSecureTrust Corporation\n06F1EC00E31E46D341B2B2633CE480D915F81D\n-----BEGIN CERTIFICATE-----\nMIIEizCCA3OgAwIBAgITBvHsAOMeRtNBsrJjPOSA2RX4HTANBgkqhkiG9w0BAQsF\nADBIMQswCQYDVQQGEwJVUzEgMB4GA1UEChMXU2VjdXJlVHJ1c3QgQ29ycG9yYXRp\nb24xFzAVBgNVBAMTDlNlY3VyZVRydXN0IENBMB4XDTE5MDEyOTEyNTk1OVoXDTI5\nMDEyOTEyNTk1OVowfjE0MDIGA1UEAxMrU2VjdXJlVHJ1c3QgRXh0ZW5kZWQgVmFs\naWRhdGlvbiBDQSwgTGV2ZWwgMTEUMBIGA1UEChMLU2VjdXJlVHJ1c3QxEDAOBgNV\nBAcTB0NoaWNhZ28xETAPBgNVBAgTCElsbGlub2lzMQswCQYDVQQGEwJVUzCCASIw\nDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBANS6vRtFpCJBJ7zJODH07Y3k54Qn\nVIBhnQmmWoqFqzCVMX97GAyAfzjcQrhl/TNiJiRCrVQWPI4n0R8eUd91Ab1Qzfsr\nnp+0NRbagVDa6+nF0KcNxbSZ6/iZQ7Ac3HyhCvJS2rH2CVYlzqdsrxDXcZk69jOO\ndPV8+w+7eNIn34BKpB/ZF7iXApDoAKG81kg1VtpGOxJhxTsKLuJmURT4pQjtZqF+\nF6rN64j5T2DOK0gOA4G7BLoTdOQuXkPS38LXKgZ43lKqEenjmiOaMF/XuLYzaHrW\nGYgCM2wJsykgdB9hCsTTEwsHRZzt2q9mLBDvYYWVhql1/kR4K/RN4JdESEECAwEA\nAaOCATYwggEyMBIGA1UdEwEB/wQIMAYBAf8CAQAwDgYDVR0PAQH/BAQDAgGGMB0G\nA1UdJQQWMBQGCCsGAQUFBwMCBggrBgEFBQcDATAdBgNVHQ4EFgQUA6uAxlUKKpWh\n4Nf+GubAynjMsJYwHwYDVR0jBBgwFoAUQjK2FvoE/f5dS3rD/fdMQB1aQ68wQQYD\nVR0gBDowODA2BgRVHSAAMC4wLAYIKwYBBQUHAgEWIGh0dHBzOi8vY2VydHMuc2Vj\ndXJldHJ1c3QuY29tL0NBMDIGA1UdHwQrMCkwJ6AloCOGIWh0dHA6Ly9jcmwudHJ1\nc3R3YXZlLmNvbS9TVENBLmNybDA2BggrBgEFBQcBAQQqMCgwJgYIKwYBBQUHMAGG\nGmh0dHA6Ly9vY3NwLnRydXN0d2F2ZS5jb20vMA0GCSqGSIb3DQEBCwUAA4IBAQB1\nfzAmGGmtbJyIvOfjq2McCpUoYkXAq6JTN51+nb9NDAihhDoTKMde+801bC1/l54h\nxPPm4HImM6GK6LFckDew/FGwbdRbEznUOJ7uVL5ploNBIjte23kTBUZa9fx3+aXK\nhUTAipSyPtNjnOwVVBVXzrMynfMhdsyRRe7gLXNFYCXIxtks3IkIpuYnc86NAuV9\nnBLFlZzgmbAsW+tMc5QsNvQJ9pQ539K8cqZaM+HFCScreDERxmNtHHbMw+hCa2yL\nOj4ntekgWLO8KQbE0lPUNLIM17QK8aktJavj+GezBztKMmJJwhVYQy9nxS388ApX\nxcZsEgIzOCeH0SOWg4FA\n-----END CERTIFICATE-----\n\nSecureTrust Organization Validation CA, Level 1\nSecureTrust Corporation\n06F1EC00E58E9ADD372C871D25843FDAB852D9\n-----BEGIN CERTIFICATE-----\nMIIEkDCCA3igAwIBAgITBvHsAOWOmt03LIcdJYQ/2rhS2TANBgkqhkiG9w0BAQsF\nADBIMQswCQYDVQQGEwJVUzEgMB4GA1UEChMXU2VjdXJlVHJ1c3QgQ29ycG9yYXRp\nb24xFzAVBgNVBAMTDlNlY3VyZVRydXN0IENBMB4XDTE5MDEyOTEyNTk1OVoXDTI5\nMDEyOTEyNTk1OVowgYIxODA2BgNVBAMTL1NlY3VyZVRydXN0IE9yZ2FuaXphdGlv\nbiBWYWxpZGF0aW9uIENBLCBMZXZlbCAxMRQwEgYDVQQKEwtTZWN1cmVUcnVzdDEQ\nMA4GA1UEBxMHQ2hpY2FnbzERMA8GA1UECBMISWxsaW5vaXMxCzAJBgNVBAYTAlVT\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA4QVBCdYToXFIfzd1SQfi\nTEgg1bwHXM2cE2VsyxwWK8NEFH8zMYdKy2hYOAjbfpm0xE6q4TQzS8KL2vAtCNyY\nVrwX7d3IvKR25H5s1LUDeQXSl1JBBZCtgJf2caJcwaYa6n2pZ0EKt3wBB+QteSFn\n57ENB37T13y7Nn8gCt9ZZaPYqRWxHcPaIWO3CVzQZ3tXjCLqzJMCV2KqhK85DZk3\nwo33Zb6cyYDkerDbWyric+10dJ/wdgE49dkfyZxVxEGpHg1SCSJdHjGb4z85Zx/u\neBpxBS6g3dfrkDjjT3MUxyNS4EaRTZp7o/2EqVCYDWJDM1HcOZL64kyWyi0d9jqA\n7wIDAQABo4IBNjCCATIwEgYDVR0TAQH/BAgwBgEB/wIBADAOBgNVHQ8BAf8EBAMC\nAYYwHQYDVR0lBBYwFAYIKwYBBQUHAwIGCCsGAQUFBwMBMB0GA1UdDgQWBBR/QuNI\nbljpLrlhyGp3tPcDuM1qWjAfBgNVHSMEGDAWgBRCMrYW+gT9/l1LesP990xAHVpD\nrzBBBgNVHSAEOjA4MDYGBFUdIAAwLjAsBggrBgEFBQcCARYgaHR0cHM6Ly9jZXJ0\ncy5zZWN1cmV0cnVzdC5jb20vQ0EwMgYDVR0fBCswKTAnoCWgI4YhaHR0cDovL2Ny\nbC50cnVzdHdhdmUuY29tL1NUQ0EuY3JsMDYGCCsGAQUFBwEBBCowKDAmBggrBgEF\nBQcwAYYaaHR0cDovL29jc3AudHJ1c3R3YXZlLmNvbS8wDQYJKoZIhvcNAQELBQAD\nggEBAIwGM/ejz4Hbjf7Vc11gS8jzf+BwtZq9N4t1Nibj4rIDsW2G2jDE0S7fCN2m\nMhq76xkfnwfXhBbXDEKz6rj/M0G2u1kHw4Y8ZtKSzYEyRtgpeBFm4qU6voCSREpD\nFJXsL+Go2/YLRSE6xkWVSocklxppx4hi5o/RVdMMQept6ooOSFzBpH5XZYUoblKi\n99Yj0FUe8egIa9qSts42TObTpH1YVRMDnH3k2MNX3rcgPf9v/QO9Cf8W6RQ2+X3R\nCaYMPdL5OIKh4RGYjxXe3LpgiTKBWik/ZWTFL5sZSjetrJFl50NONzTc8E+BJtrx\nVCHAI2OcWyloxrYd4zMipw0YjDw=\n-----END CERTIFICATE-----\n\nTrustwave Domain Validation SHA256 CA, Level 1\nSecureTrust Corporation\n00DDEDF6F64298490E694C36EFA422C88F\n-----BEGIN CERTIFICATE-----\nMIIE7jCCA9agAwIBAgIRAN3t9vZCmEkOaUw276QiyI8wDQYJKoZIhvcNAQELBQAw\nSDELMAkGA1UEBhMCVVMxIDAeBgNVBAoTF1NlY3VyZVRydXN0IENvcnBvcmF0aW9u\nMRcwFQYDVQQDEw5TZWN1cmVUcnVzdCBDQTAeFw0xNDEwMDExOTIyMzJaFw0yNDA5\nMjgxOTIyMzJaMIGvMQswCQYDVQQGEwJVUzERMA8GA1UECBMISWxsaW5vaXMxEDAO\nBgNVBAcTB0NoaWNhZ28xITAfBgNVBAoTGFRydXN0d2F2ZSBIb2xkaW5ncywgSW5j\nLjE3MDUGA1UEAxMuVHJ1c3R3YXZlIERvbWFpbiBWYWxpZGF0aW9uIFNIQTI1NiBD\nQSwgTGV2ZWwgMTEfMB0GCSqGSIb3DQEJARYQY2FAdHJ1c3R3YXZlLmNvbTCCASIw\nDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBALNr4Z91k7AKM+Pz5XXWTIuVeMts\nPU2W/pI4WdEHG9Zab1EOWPLbthB6fzUJLLLBBk1wy2OM9yG1HywB/CwfGHcoKS8Z\n/efGV+ZKTzEpIestriUWx7wUnzxKzGML48Xv7sNuY1Crru5Hgce1Ax5uOfP7OB6t\norbMunvKQC10WcSrqFg6LapZ0UhgGmQzdjYguOBF6WZJR3QLghQaNrSUZuA6neXR\ncUsBgmzrxiEVHyzt+lmnYFMFvKVwGOyIZ2RU2LAFthS6UDDrSLGsJysxc1MK1Sti\n/VP8e8wj9rJdmiWNfA+lz6hDAPzRbv+WVJNoHEGbIx8rai+rVMiLy2HIbPsCAwEA\nAaOCAWkwggFlMBIGA1UdEwEB/wQIMAYBAf8CAQAwHQYDVR0OBBYEFPQc4jqvtqTk\n2emd/u8cd6VjPe+IMA4GA1UdDwEB/wQEAwIBhjBIBgNVHSAEQTA/MD0GDysGAQQB\nge0YAwMDAwQFAzAqMCgGCCsGAQUFBwIBFhxodHRwczovL3NzbC50cnVzdHdhdmUu\nY29tL0NBMDIGA1UdHwQrMCkwJ6AloCOGIWh0dHA6Ly9jcmwudHJ1c3R3YXZlLmNv\nbS9TVENBLmNybDBsBggrBgEFBQcBAQRgMF4wJQYIKwYBBQUHMAGGGWh0dHA6Ly9v\nY3NwLnRydXN0d2F2ZS5jb20wNQYIKwYBBQUHMAKGKWh0dHA6Ly9zc2wudHJ1c3R3\nYXZlLmNvbS9pc3N1ZXJzL1NUQ0EuY3J0MBMGA1UdJQQMMAoGCCsGAQUFBwMBMB8G\nA1UdIwQYMBaAFEIythb6BP3+XUt6w/33TEAdWkOvMA0GCSqGSIb3DQEBCwUAA4IB\nAQAjoDrTysopn7t+onDZ6rZSQW8rYlWZQpSiNHrq9xAAcMExrhcN0bQC9OQ+VRci\noMDascvwum7hVkyh2w2Ad7lC3Ir9gIuA8HycjqQJ4t1eSF3geYyf8lp259ztZ/TO\nxSAwJ9W0Szc8fslOA0SWlyA3lnRVcYVu54Idc1dPXXBxwlQ1NUCYgcsXZs+6QjLL\nYhYL85DhuitQSddoYemGpfVJnaYH9tBiWmwtzwc4qsVqTsKEJ/1zYAy2GrEAv8sB\nFKSfMNMopBmmDA8/aCIW/tH6KTD2DC15QQwL6yAUbSa5mhzFSA9O8zmF881YwBVG\nn+z3isMPClgpNw/eWSbaSLZ+\n-----END CERTIFICATE-----\n\nTrustwave Domain Validation SHA256 CA, Level 1\nSecureTrust Corporation\n390A3F7EECA8FB4347DCAF701861662B\n-----BEGIN CERTIFICATE-----\nMIIE/zCCA+egAwIBAgIQOQo/fuyo+0NH3K9wGGFmKzANBgkqhkiG9w0BAQsFADBI\nMQswCQYDVQQGEwJVUzEgMB4GA1UEChMXU2VjdXJlVHJ1c3QgQ29ycG9yYXRpb24x\nFzAVBgNVBAMTDlNlY3VyZVRydXN0IENBMB4XDTE2MDkwMTE0MzUzMloXDTI0MDky\nOTE0MzUzMlowga8xCzAJBgNVBAYTAlVTMREwDwYDVQQIEwhJbGxpbm9pczEQMA4G\nA1UEBxMHQ2hpY2FnbzEhMB8GA1UEChMYVHJ1c3R3YXZlIEhvbGRpbmdzLCBJbmMu\nMTcwNQYDVQQDEy5UcnVzdHdhdmUgRG9tYWluIFZhbGlkYXRpb24gU0hBMjU2IENB\nLCBMZXZlbCAxMR8wHQYJKoZIhvcNAQkBFhBjYUB0cnVzdHdhdmUuY29tMIIBIjAN\nBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAs2vhn3WTsAoz4/PlddZMi5V4y2w9\nTZb+kjhZ0Qcb1lpvUQ5Y8tu2EHp/NQksssEGTXDLY4z3IbUfLAH8LB8YdygpLxn9\n58ZX5kpPMSkh6y2uJRbHvBSfPErMYwvjxe/uw25jUKuu7keBx7UDHm458/s4Hq2i\ntsy6e8pALXRZxKuoWDotqlnRSGAaZDN2NiC44EXpZklHdAuCFBo2tJRm4Dqd5dFx\nSwGCbOvGIRUfLO36WadgUwW8pXAY7IhnZFTYsAW2FLpQMOtIsawnKzFzUwrVK2L9\nU/x7zCP2sl2aJY18D6XPqEMA/NFu/5ZUk2gcQZsjHytqL6tUyIvLYchs+wIDAQAB\no4IBezCCAXcwEgYDVR0TAQH/BAgwBgEB/wIBADAdBgNVHQ4EFgQU9BziOq+2pOTZ\n6Z3+7xx3pWM974gwDgYDVR0PAQH/BAQDAgGGMDIGA1UdHwQrMCkwJ6AloCOGIWh0\ndHA6Ly9jcmwudHJ1c3R3YXZlLmNvbS9TVENBLmNybDA9BgNVHSAENjA0MDIGBFUd\nIAAwKjAoBggrBgEFBQcCARYcaHR0cHM6Ly9zc2wudHJ1c3R3YXZlLmNvbS9DQTBs\nBggrBgEFBQcBAQRgMF4wJQYIKwYBBQUHMAGGGWh0dHA6Ly9vY3NwLnRydXN0d2F2\nZS5jb20wNQYIKwYBBQUHMAKGKWh0dHA6Ly9zc2wudHJ1c3R3YXZlLmNvbS9pc3N1\nZXJzL1NUQ0EuY3J0MBMGA1UdJQQMMAoGCCsGAQUFBwMBMB8GA1UdIwQYMBaAFEIy\nthb6BP3+XUt6w/33TEAdWkOvMBsGA1UdEQQUMBKBEGNhQHRydXN0d2F2ZS5jb20w\nDQYJKoZIhvcNAQELBQADggEBAFcdG0/3P/CkeGb76tz/mn1viDZiftD05i9Jw70k\nH9ulRwdCHgzhSZVN5zHvG919oHA9WHbxH04J+iAnVl1+FjoDNN+A+2icy2WXqH9w\ngaNUGyUwLdo0JCfgUeGbrCF6WUYCj47pS7zAY02CdGlstZZsqouXK3RnOMKOD3Dq\nf5kiSh56KvhW/F0OZY7PAbdV79LVAiSTiAFdoe/jMjmj8fqXOiCIjllqH/O9/DAm\nRwQStFpauwR+nBbFhq4sYwlZQvJ0NvIxN5JOTECTkMM+X21kf8mrwRdxBfw0YEPa\nUTeZhFr48Fwvnt4jpo7gqpJzt7jjsbWPd1FHtey2Q8zmSHY=\n-----END CERTIFICATE-----\n\nTrustwave Extended Validation SHA256 CA, Level 1\nSecureTrust Corporation\n00C1BD27B383958D0D8BCA5E4F08D009D9\n-----BEGIN CERTIFICATE-----\nMIIFGDCCBACgAwIBAgIRAMG9J7ODlY0Ni8peTwjQCdkwDQYJKoZIhvcNAQELBQAw\nSDELMAkGA1UEBhMCVVMxIDAeBgNVBAoTF1NlY3VyZVRydXN0IENvcnBvcmF0aW9u\nMRcwFQYDVQQDEw5TZWN1cmVUcnVzdCBDQTAeFw0xNDEwMTMxODE3MzlaFw0yNDEw\nMTAxODE3MzlaMIGxMQswCQYDVQQGEwJVUzERMA8GA1UECBMISWxsaW5vaXMxEDAO\nBgNVBAcTB0NoaWNhZ28xITAfBgNVBAoTGFRydXN0d2F2ZSBIb2xkaW5ncywgSW5j\nLjE5MDcGA1UEAxMwVHJ1c3R3YXZlIEV4dGVuZGVkIFZhbGlkYXRpb24gU0hBMjU2\nIENBLCBMZXZlbCAxMR8wHQYJKoZIhvcNAQkBFhBjYUB0cnVzdHdhdmUuY29tMIIB\nIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAre9mHLqiv689FWIk7PaeQLuW\nos8ldRX4rNLHeD7/X7JrTfaXuIQaLfrUODtyRaZs0LtJsEHgpr7dUonDIH69PjBP\nrHg+hBLu7ob4udEx3J03NQSdnR/fqPY0ZMH2NP7e9TFSKKctZ/SmzA8jGclVmdiT\nGg1bTx6xgWuPWq9OprIQSgkP5NRe1GeTQ7U/E1zxLqaw6PeQWjESHPGeilyw0jr6\nqVyHM5ack9ps60sN3CKNGushyaQe3w2bYxRJ9RRH/sILCAmmTbjc/cXrGQMGdaYt\naiGnXbc45r39cqfbynZ71hPPNEtFbOdqk3C7I8vrhIHiKaAtFkTMRSWmHHk4HwID\nAQABo4IBkTCCAY0wEgYDVR0TAQH/BAgwBgEB/wIBADAdBgNVHQ4EFgQU5eQkWRUy\nJ8kgs0ICbLDvMt6bIFowDgYDVR0PAQH/BAQDAgGGMGYGA1UdIARfMF0wDAYKKwYB\nBAGB7RgDADAOBgxghkgBhv1kAQECBAEwPQYPKwYBBAGB7RgDAwMDBAMDMCowKAYI\nKwYBBQUHAgEWHGh0dHBzOi8vc3NsLnRydXN0d2F2ZS5jb20vQ0EwMgYDVR0fBCsw\nKTAnoCWgI4YhaHR0cDovL2NybC50cnVzdHdhdmUuY29tL1NUQ0EuY3JsMGwGCCsG\nAQUFBwEBBGAwXjAlBggrBgEFBQcwAYYZaHR0cDovL29jc3AudHJ1c3R3YXZlLmNv\nbTA1BggrBgEFBQcwAoYpaHR0cDovL3NzbC50cnVzdHdhdmUuY29tL2lzc3VlcnMv\nU1RDQS5jcnQwHQYDVR0lBBYwFAYIKwYBBQUHAwIGCCsGAQUFBwMBMB8GA1UdIwQY\nMBaAFEIythb6BP3+XUt6w/33TEAdWkOvMA0GCSqGSIb3DQEBCwUAA4IBAQCly1p1\nrvcOlRS+ODBLb2kYHd4q+cXDl65X+IQ7hOlXg9dpa7CzSAGNNpzhyYMbE48mB/RE\nBXxbZkMzEhWPFj+4jdGNsmX0zjEWatJWsnNVxpA7hDR0iZssezu86oDQ/sbVoaXj\n0a5jB2cZsnMS5287CNDk5i+ImruhbMAYV9sadliXoDy3y01Sv+FLMx39C5UhYhWU\ngvoT9igbSCoc/DPOukEDqsnKMmDqTf3JzuFI1CbJcR6M8R1hAda4mZrxIdGcbT8R\nXp8JQ8Vuv/+plPMcAiZ2Bzed0hPVr5A1Mz8K8w9OyORGlRwjWS65jsr26bjMCcfj\npvuAANrc0Alu4nJC\n-----END CERTIFICATE-----\n\nTrustwave Extended Validation SHA256 CA, Level 1\nSecureTrust Corporation\n35962F305C5A0BEC400D4E9877528C65\n-----BEGIN CERTIFICATE-----\nMIIFCzCCA/OgAwIBAgIQNZYvMFxaC+xADU6Yd1KMZTANBgkqhkiG9w0BAQsFADBI\nMQswCQYDVQQGEwJVUzEgMB4GA1UEChMXU2VjdXJlVHJ1c3QgQ29ycG9yYXRpb24x\nFzAVBgNVBAMTDlNlY3VyZVRydXN0IENBMB4XDTE2MDkwMTE0MzUzNFoXDTI0MDky\nOTE0MzUzNFowgbExCzAJBgNVBAYTAlVTMREwDwYDVQQIEwhJbGxpbm9pczEQMA4G\nA1UEBxMHQ2hpY2FnbzEhMB8GA1UEChMYVHJ1c3R3YXZlIEhvbGRpbmdzLCBJbmMu\nMTkwNwYDVQQDEzBUcnVzdHdhdmUgRXh0ZW5kZWQgVmFsaWRhdGlvbiBTSEEyNTYg\nQ0EsIExldmVsIDExHzAdBgkqhkiG9w0BCQEWEGNhQHRydXN0d2F2ZS5jb20wggEi\nMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCt72YcuqK/rz0VYiTs9p5Au5ai\nzyV1Ffis0sd4Pv9fsmtN9pe4hBot+tQ4O3JFpmzQu0mwQeCmvt1SicMgfr0+ME+s\neD6EEu7uhvi50THcnTc1BJ2dH9+o9jRkwfY0/t71MVIopy1n9KbMDyMZyVWZ2JMa\nDVtPHrGBa49ar06mshBKCQ/k1F7UZ5NDtT8TXPEuprDo95BaMRIc8Z6KXLDSOvqp\nXIczlpyT2mzrSw3cIo0a6yHJpB7fDZtjFEn1FEf+wgsICaZNuNz9xesZAwZ1pi1q\nIaddtzjmvf1yp9vKdnvWE880S0Vs52qTcLsjy+uEgeIpoC0WRMxFJaYceTgfAgMB\nAAGjggGFMIIBgTASBgNVHRMBAf8ECDAGAQH/AgEAMB0GA1UdDgQWBBTl5CRZFTIn\nySCzQgJssO8y3psgWjAOBgNVHQ8BAf8EBAMCAYYwMgYDVR0fBCswKTAnoCWgI4Yh\naHR0cDovL2NybC50cnVzdHdhdmUuY29tL1NUQ0EuY3JsMD0GA1UdIAQ2MDQwMgYE\nVR0gADAqMCgGCCsGAQUFBwIBFhxodHRwczovL3NzbC50cnVzdHdhdmUuY29tL0NB\nMGwGCCsGAQUFBwEBBGAwXjAlBggrBgEFBQcwAYYZaHR0cDovL29jc3AudHJ1c3R3\nYXZlLmNvbTA1BggrBgEFBQcwAoYpaHR0cDovL3NzbC50cnVzdHdhdmUuY29tL2lz\nc3VlcnMvU1RDQS5jcnQwHQYDVR0lBBYwFAYIKwYBBQUHAwIGCCsGAQUFBwMBMB8G\nA1UdIwQYMBaAFEIythb6BP3+XUt6w/33TEAdWkOvMBsGA1UdEQQUMBKBEGNhQHRy\ndXN0d2F2ZS5jb20wDQYJKoZIhvcNAQELBQADggEBAGUMIDkrvlMJ0wHLuP3lkneC\nwGU6mZ3g17jyU2RJwhRinYctraryG7Jh20DQ9/ppTHoxTIADw2JDsC5ByplabteQ\nnLghrl17K1b6PO+rzWA/NFKVwo6u8Gh7Lz0iUuit7ZBD4eKcRedxRZcPQlnD9KTR\nIs94SRpootsuCv/Y5b+1FMPV1KrYtbco9yEVlaNEWLpmiEsqvLjxiWEmt71rzz+0\nS59OtA/ihnbGP9Xrnhe7wf1ybCNOO5gZQMKr/OszfLZ7oVKACGOPLlcSZRRW98gA\nszE+1ZvlHkdjamfTSs4yMvUorYn9NhXnjAWl28NuD9m3FPiE2O50ezEDnHTiaOQ=\n-----END CERTIFICATE-----\n\nTrustwave Organization Validation SHA256 CA, Level 1\nSecureTrust Corporation\n4B2C6646F434775B67DF34A04DD504E6\n-----BEGIN CERTIFICATE-----\nMIIE/TCCA+WgAwIBAgIQSyxmRvQ0d1tn3zSgTdUE5jANBgkqhkiG9w0BAQsFADBI\nMQswCQYDVQQGEwJVUzEgMB4GA1UEChMXU2VjdXJlVHJ1c3QgQ29ycG9yYXRpb24x\nFzAVBgNVBAMTDlNlY3VyZVRydXN0IENBMB4XDTE0MTAwMTE5MjIzNloXDTI0MDky\nODE5MjIzNlowgbUxCzAJBgNVBAYTAlVTMREwDwYDVQQIEwhJbGxpbm9pczEQMA4G\nA1UEBxMHQ2hpY2FnbzEhMB8GA1UEChMYVHJ1c3R3YXZlIEhvbGRpbmdzLCBJbmMu\nMT0wOwYDVQQDEzRUcnVzdHdhdmUgT3JnYW5pemF0aW9uIFZhbGlkYXRpb24gU0hB\nMjU2IENBLCBMZXZlbCAxMR8wHQYJKoZIhvcNAQkBFhBjYUB0cnVzdHdhdmUuY29t\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA49OohlJHBJ/juiQTmibO\nS28pHvCCp1bPOc6elQ62DCYE/A14JXUtI8yaUc9nFjh6dNzR7KjFPEq/qDplQl7f\n1Tvh5ifBNNP2wQ6e820TWlPO4HhR/5g4+3iFmJ1N7kFrxDp1/P8e3+9lcJsXckXC\ntfFkQ9slogJqnaCsipgdrH4gQhicFAL5YqHw2AKfctZLSPpxhI3xISMV/lIQwZPW\nI2221v9ALckokh5pW6dTK8x8yNUUye1zt5msWzqunfBjVYVUj5/LXu46hS99Mfxu\n80ARJRyHsXIuHbMzwVXGqKVPZfKAdHBl5e3ElCjNwNy+Hgi09vS7PoAUhjCf/wbO\nnQIDAQABo4IBczCCAW8wEgYDVR0TAQH/BAgwBgEB/wIBADAdBgNVHQ4EFgQUys4d\nGAN3HhzzfFiymnCoCIAW9K4wDgYDVR0PAQH/BAQDAgGGMEgGA1UdIARBMD8wPQYP\nKwYBBAGB7RgDAwMDBAQDMCowKAYIKwYBBQUHAgEWHGh0dHBzOi8vc3NsLnRydXN0\nd2F2ZS5jb20vQ0EwMgYDVR0fBCswKTAnoCWgI4YhaHR0cDovL2NybC50cnVzdHdh\ndmUuY29tL1NUQ0EuY3JsMGwGCCsGAQUFBwEBBGAwXjAlBggrBgEFBQcwAYYZaHR0\ncDovL29jc3AudHJ1c3R3YXZlLmNvbTA1BggrBgEFBQcwAoYpaHR0cDovL3NzbC50\ncnVzdHdhdmUuY29tL2lzc3VlcnMvU1RDQS5jcnQwHQYDVR0lBBYwFAYIKwYBBQUH\nAwIGCCsGAQUFBwMBMB8GA1UdIwQYMBaAFEIythb6BP3+XUt6w/33TEAdWkOvMA0G\nCSqGSIb3DQEBCwUAA4IBAQBN/Qb6x5VSQHIt/FqvXAkjfCI7jwXGzRoxThavUqv0\npJr1azXKv2L2ye9Sl4OCqiDHZ8ZJZ/Z19Ae1yvGTpG++0O5dWTHZ8qy/JSj17Mg1\nvWiefVpJKtkYflzhC9B9/eB3QuKVTRKDqm1ZC9kbm3MWOwtnEOw4WURWS1X2v4Hv\n2AJaXe11ZRqjx7/c6U50tYp3eVpRDCw7bOIXRffLG0oibhjHiEu8dgq7KkTSrx9m\nQFS6T2x9GLiJKhj2mEfPuGr73TfBPyKsRBymOpG67LThKVnwoUfH3pghA6VkZp5Z\n1Vm6AcDm+eelf5XPvZtNve4evLVPYueA3TmGyxXh1m2d\n-----END CERTIFICATE-----\n\nTrustwave Organization Validation SHA256 CA, Level 1\nSecureTrust Corporation\n0092B8744F71CED0E26C72A3D8D5D925B2\n-----BEGIN CERTIFICATE-----\nMIIFEDCCA/igAwIBAgIRAJK4dE9xztDibHKj2NXZJbIwDQYJKoZIhvcNAQELBQAw\nSDELMAkGA1UEBhMCVVMxIDAeBgNVBAoTF1NlY3VyZVRydXN0IENvcnBvcmF0aW9u\nMRcwFQYDVQQDEw5TZWN1cmVUcnVzdCBDQTAeFw0xNjA5MDExNDM1MzVaFw0yNDA5\nMjkxNDM1MzVaMIG1MQswCQYDVQQGEwJVUzERMA8GA1UECBMISWxsaW5vaXMxEDAO\nBgNVBAcTB0NoaWNhZ28xITAfBgNVBAoTGFRydXN0d2F2ZSBIb2xkaW5ncywgSW5j\nLjE9MDsGA1UEAxM0VHJ1c3R3YXZlIE9yZ2FuaXphdGlvbiBWYWxpZGF0aW9uIFNI\nQTI1NiBDQSwgTGV2ZWwgMTEfMB0GCSqGSIb3DQEJARYQY2FAdHJ1c3R3YXZlLmNv\nbTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAOPTqIZSRwSf47okE5om\nzktvKR7wgqdWzznOnpUOtgwmBPwNeCV1LSPMmlHPZxY4enTc0eyoxTxKv6g6ZUJe\n39U74eYnwTTT9sEOnvNtE1pTzuB4Uf+YOPt4hZidTe5Ba8Q6dfz/Ht/vZXCbF3JF\nwrXxZEPbJaICap2grIqYHax+IEIYnBQC+WKh8NgCn3LWS0j6cYSN8SEjFf5SEMGT\n1iNtttb/QC3JKJIeaVunUyvMfMjVFMntc7eZrFs6rp3wY1WFVI+fy17uOoUvfTH8\nbvNAESUch7FyLh2zM8FVxqilT2XygHRwZeXtxJQozcDcvh4ItPb0uz6AFIYwn/8G\nzp0CAwEAAaOCAYUwggGBMBIGA1UdEwEB/wQIMAYBAf8CAQAwHQYDVR0OBBYEFMrO\nHRgDdx4c83xYsppwqAiAFvSuMA4GA1UdDwEB/wQEAwIBhjAyBgNVHR8EKzApMCeg\nJaAjhiFodHRwOi8vY3JsLnRydXN0d2F2ZS5jb20vU1RDQS5jcmwwPQYDVR0gBDYw\nNDAyBgRVHSAAMCowKAYIKwYBBQUHAgEWHGh0dHBzOi8vc3NsLnRydXN0d2F2ZS5j\nb20vQ0EwbAYIKwYBBQUHAQEEYDBeMCUGCCsGAQUFBzABhhlodHRwOi8vb2NzcC50\ncnVzdHdhdmUuY29tMDUGCCsGAQUFBzAChilodHRwOi8vc3NsLnRydXN0d2F2ZS5j\nb20vaXNzdWVycy9TVENBLmNydDAdBgNVHSUEFjAUBggrBgEFBQcDAgYIKwYBBQUH\nAwEwHwYDVR0jBBgwFoAUQjK2FvoE/f5dS3rD/fdMQB1aQ68wGwYDVR0RBBQwEoEQ\nY2FAdHJ1c3R3YXZlLmNvbTANBgkqhkiG9w0BAQsFAAOCAQEAC0OvN7/UJBcRDXch\nA4b2qJo7mBD05+XR96N7vucMaanz26CnUxs1o8DcBckpqyEXCxdOanIr+/UJNbBL\nXLJCzNLJEJcgV9TjbVu33eQR23yMuXD+cZsqLMF+L5IIM47W8dlwKJvMy0xs7Jb1\nS3NOIhcoVu+XPzRsgKv8Yi2B6l278RfzegiCx4vYJv0pBjFzizEiFH9bWTYIOlIJ\nJSM57hoICgjCTS8BoEgndwWIyc/nEmlYaUwmCo9QynY+UmW1WPWmVITEJPMdMK6A\nZqvvaWmuHJ6/vURaz+Hoc5D3z0yJDDCkv52bXV04ZoF6cbcWry7JvNA+djvay/4B\nRR4SZQ==\n-----END CERTIFICATE-----\n\nSecureTrust TWG Secure Email CA, Level 2\nTrustwave Holdings, Inc.\n072F30E9C25181828DAC4F5F7DE4AFC87AD132\n-----BEGIN CERTIFICATE-----\nMIIG2zCCBMOgAwIBAgITBy8w6cJRgYKNrE9ffeSvyHrRMjANBgkqhkiG9w0BAQsF\nADCBiDELMAkGA1UEBhMCVVMxETAPBgNVBAgMCElsbGlub2lzMRAwDgYDVQQHDAdD\naGljYWdvMSEwHwYDVQQKDBhUcnVzdHdhdmUgSG9sZGluZ3MsIEluYy4xMTAvBgNV\nBAMMKFRydXN0d2F2ZSBHbG9iYWwgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkwHhcN\nMjAxMDA4MDY0OTQwWhcNMzAxMDA4MDY0ODQwWjBWMQswCQYDVQQGEwJVUzEUMBIG\nA1UEChMLU2VjdXJlVHJ1c3QxMTAvBgNVBAMTKFNlY3VyZVRydXN0IFRXRyBTZWN1\ncmUgRW1haWwgQ0EsIExldmVsIDIwggIiMA0GCSqGSIb3DQEBAQUAA4ICDwAwggIK\nAoICAQCcD5Wc7H480gOv3ae6SELBls0oNOvpw1ZFjK55nLw+W6PhgqTGNEHlO/Ga\nWt13yS1iO1/WzRaUc2XsFRGcjv3QIfDZb+6UzhL1LL9ZE8zcs0B6fepn4smQg1yK\ngtAWGoD70Z9kEBtypkG23sO5xIiRACJWgRWVZ/891pQBBz+ElCxUnIyDGghHlWCD\nzn5dLoBIVic69Pfpi384uNoNfHV/WATUQEEnwY+5yMMUALAWrRD6Jeh5R4m9qKxG\nUlrO9ObDebK9mFEJvrCPtkTIWT1He4ZD58Lt0NIkaItQ7KsKF9wgwH7BTsRGwQXb\nP6/0LvfO8UDRKNE/4C39u9dwUw/Zpu2iNXTadVWBtaSDsrPFVb5rBu+pvn4l4Hw5\njtySyHAOWn4mhuxDXMuKBtaoTi/qF94d7N0CbqPdN9WSN79Cy2O0BexTGHSJVndX\nEbKyn96b5STPshKVpG9DmUekfnDtnHR9dmH74a05X/A8k/XeSJWXphM6NvyZap2A\nWiIkrS7MsfwnCdZlX+9WGY2qHxnm4Y6JdNah0qxozBbQHkqHsSN4k8O7zr2lfZhC\nuarm0Q1t6tjsmp7PUh26u6PCe0m+MctIrD6ZckUzZeuPduRb55K2p8MxjQSVNH1S\nJ2aaHp77qOYV+rvHXIL7le4OR5lDWyzYtXLc8u17/kLbUtgnmQIDAQABo4IBbTCC\nAWkwEgYDVR0TAQH/BAgwBgEB/wIBADAOBgNVHQ8BAf8EBAMCAYYwEwYDVR0lBAww\nCgYIKwYBBQUHAwQwHQYDVR0OBBYEFKpD9MNsQCriSoEcg6nez7XhG7bOMB8GA1Ud\nIwQYMBaAFJngGWcNYtt2s9o9uFvo/ULSMQ6HMEEGA1UdIAQ6MDgwNgYEVR0gADAu\nMCwGCCsGAQUFBwIBFiBodHRwczovL2NlcnRzLnNlY3VyZXRydXN0LmNvbS9DQTA1\nBgNVHR8ELjAsMCqgKKAmhiRodHRwOi8vY3JsLnNlY3VyZXRydXN0LmNvbS9UV0dD\nQS5jcmwwdAYIKwYBBQUHAQEEaDBmMCgGCCsGAQUFBzABhhxodHRwOi8vb2NzcC5z\nZWN1cmV0cnVzdC5jb20vMDoGCCsGAQUFBzAChi5odHRwOi8vY2VydHMuc2VjdXJl\ndHJ1c3QuY29tL2lzc3VlcnMvVFdHQ0EuY3J0MA0GCSqGSIb3DQEBCwUAA4ICAQBb\ntCXryLFewOafyNENB3NzgAQVVztwaWSyvF5FYSqav95JKcoHZzy3wG7aKlTPtGnq\n1QzJst03qPmZJ3j63obz2AvfEEzLEMlsPmOTy3B9oIrNzd2QhpGW1oF6pIgGB/VP\n5zh7U2ibUC+zRLmihwt+j2+7NBbuLbPozgxDTWh2f9O4rJb5bv98Q8RdbGrypBb9\nhOhDvmNCCfjSe+Q8myqsvawEG5p7s8gsIK/V3xbyqDihXjsGc7xeEWNftlU91jBL\nKPRbrLmXhhWnHJjYs4y5IHu735HA3aAT4TqURS9dGHOMVDRumkFpLqR2W7ptpDki\nOtIFZjO5smU29OD4AlcNUXqQuKEFasyTtkRlORnWhU37c36HB8dc57xWQKOf8pMq\n7lK+ublO9G4mO1Aqr9mioTN4oMONFJG4W5dWwG9baNg682ZACkvPaw45MqSztL3A\nKb4s2cDTWu/D34hV3oafkTwu8B7B2mFZnWRJ9q4akPmZF45uw4RZx2ALaYGGGs67\n+r5qS300As9ONg8hxfVkFQSHOc00IiBkgi3OpoCofEKTgDwZwHVqOJyyPjk6H9Sh\nZANmUOT2mGDLwl86Ar5bTu8ipzlsyDYQMFjho7WaVs8I5OXyVdONXDYLIOtpITGT\n1fRcXFzxYHhrNuFwrdj2zBVyvVD4O6xV97/9nv2Eng==\n-----END CERTIFICATE-----\n\nTrustwave Global Domain Validation CA, Level 1\nTrustwave Holdings, Inc.\n06CE82D9AD30465CF22697F246B101EC92953B\n-----BEGIN CERTIFICATE-----\nMIIHCDCCBPCgAwIBAgITBs6C2a0wRlzyJpfyRrEB7JKVOzANBgkqhkiG9w0BAQsF\nADCBiDELMAkGA1UEBhMCVVMxETAPBgNVBAgMCElsbGlub2lzMRAwDgYDVQQHDAdD\naGljYWdvMSEwHwYDVQQKDBhUcnVzdHdhdmUgSG9sZGluZ3MsIEluYy4xMTAvBgNV\nBAMMKFRydXN0d2F2ZSBHbG9iYWwgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkwHhcN\nMTgwMjA2MTIyMTIxWhcNMjgwMjI0MDUwMTIxWjCBjjE3MDUGA1UEAxMuVHJ1c3R3\nYXZlIEdsb2JhbCBEb21haW4gVmFsaWRhdGlvbiBDQSwgTGV2ZWwgMTEhMB8GA1UE\nChMYVHJ1c3R3YXZlIEhvbGRpbmdzLCBJbmMuMRAwDgYDVQQHEwdDaGljYWdvMREw\nDwYDVQQIEwhJbGxpbm9pczELMAkGA1UEBhMCVVMwggIiMA0GCSqGSIb3DQEBAQUA\nA4ICDwAwggIKAoICAQChh5brvvk/kFUZwhlUhqdsUmsMCBjzYqBBLnTyNrKPr4nd\nS9s2h2JvA+9TY7NnJc/Mq1eN5V6zqvbn/LN3c8W06f76xrVvFEKs5SzCefUS/V3Z\nC18dgwXXFrP+RgfK2kqfTHGIPrWoRSnUiLn3iUNEBtJ06oXjAqAMnAyL5AzD+eHm\nZzRK/yCw/gMPnVp2S7Dstka607fS4fW9Sl33mOMNwJRxEjQWHHR25PAb4muP6wjN\nvmoLMgiDMKseHSFVtC7SpmO89PsrUV6MahKJrZcAfquAyoO1zR2c2eGaCI/m8oSx\n3B7KiMZJ3NZims/siMp/5szemsutf36WJ31nmr7PqLJGJdVpoxbLckWIhZnNYSFm\n/pTutpNONqpyYC2gGSXdw5LuxU61913SbAPpk8DZiHi3WslHBo26ghXG++sgJUGj\nhtKZhiYlp8uD21WTP6/60wngpXyCtt9cpHxW1lXmqcxwe2J4/2S3xjHz1dC6BKxb\nr61HCPVrbTD90CZUpMI8JPdsVbz5eegv+SIyybHxZe4S0D9Kv5pgWfqdXf0BAiJC\nTbGwYmFr4uisKhkfMThyOgWEH+CRBzQqdZREQ5lTIlVyzi3jGPuu9Q6brAS9U9Ue\nQhUwX8TtY8Igfo8HlhjugDpy6WvDYQ9i+tG3AC6v8sJLdOOU83Lr+2C1LEF5ZwID\nAQABo4IBYTCCAV0wEgYDVR0TAQH/BAgwBgEB/wIBADAOBgNVHQ8BAf8EBAMCAYYw\nEwYDVR0lBAwwCgYIKwYBBQUHAwEwHQYDVR0OBBYEFIaZQQzOP7aMcEnlkwfwhgcd\nLXqVMB8GA1UdIwQYMBaAFJngGWcNYtt2s9o9uFvo/ULSMQ6HMD0GA1UdIAQ2MDQw\nMgYEVR0gADAqMCgGCCsGAQUFBwIBFhxodHRwczovL3NzbC50cnVzdHdhdmUuY29t\nL0NBMDMGA1UdHwQsMCowKKAmoCSGImh0dHA6Ly9jcmwudHJ1c3R3YXZlLmNvbS9U\nV0dDQS5jcmwwbgYIKwYBBQUHAQEEYjBgMCYGCCsGAQUFBzABhhpodHRwOi8vb2Nz\ncC50cnVzdHdhdmUuY29tLzA2BggrBgEFBQcwAoYqaHR0cDovL3NzbC50cnVzdHdh\ndmUuY29tL2lzc3VlcnMvVFdHQ0EuY3J0MA0GCSqGSIb3DQEBCwUAA4ICAQAmn0jp\n+lNp188KxjKQZtpJ3mixLmuqGdH6SVpRs40BYQg/68xOPH3C6AJ17tqE6IwZMW9s\nlgiO4B7khR3ESA6Sct3zmkA8woR/KJVzzegjscHhtQUifQ+Eb9Gi0ORNnetGV+5g\n5vlrFZMptBRGUxXMo2xa+Z/NTyimpMopfXj7qCW/nQWQbzvkQGchK9IokyqV2wra\ntX68/P3zleG+LLwzoJd5AhHYSXWrIRJpClZHN+LQKkbI3MYW7+upo/1e9HEmFKxu\n5SFV3nuQm5wSOsz/ZtIL1AS8IoZYxcSe1Q/yuV9GjnxtL1jkPbzsBx4eBGxUrcIe\nsBat6SI8G58uHTpIPpqUxRYsg8w0FdjK3kNBB5QWDeXiDxzqIRzA0iE1kHeTXRZ3\n7qgGXUcce7ciW5KqeRApjQbD5BSZG2EKkQ7aaOhvxK0LiuxHZnjPW4/fdEcaCuku\nMT5qMDiF2U85V9BvanEy/xkYn4I2UeK4EdSXe7q6j+CIJz9WnoLQDbIS04GqIWe0\nVRQUlx3idUWYSJU/SG8KrEHhlJLmgSjshCwtT6qo4vHwT5WcWDLIbjMqgL1iQ6JS\n4gxXuOGia3d0I4/wec5x23EWwx9V8BtDJ8N7NDeRNmZ8RXOHSYJsVQYIQuFUEXE1\nv3WMSIxuyQMyR5FYSCG9xnKRFzNmiPngDil5IA==\n-----END CERTIFICATE-----\n\nTrustwave Global Extended Validation CA, Level 1\nTrustwave Holdings, Inc.\n06CE82D99FB3B180C281020314A2D1C7640017\n-----BEGIN CERTIFICATE-----\nMIIHFDCCBPygAwIBAgITBs6C2Z+zsYDCgQIDFKLRx2QAFzANBgkqhkiG9w0BAQsF\nADCBiDELMAkGA1UEBhMCVVMxETAPBgNVBAgMCElsbGlub2lzMRAwDgYDVQQHDAdD\naGljYWdvMSEwHwYDVQQKDBhUcnVzdHdhdmUgSG9sZGluZ3MsIEluYy4xMTAvBgNV\nBAMMKFRydXN0d2F2ZSBHbG9iYWwgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkwHhcN\nMTgwMjA2MTIyMTIwWhcNMjgwMjI0MDUwMTIwWjCBkDE5MDcGA1UEAxMwVHJ1c3R3\nYXZlIEdsb2JhbCBFeHRlbmRlZCBWYWxpZGF0aW9uIENBLCBMZXZlbCAxMSEwHwYD\nVQQKExhUcnVzdHdhdmUgSG9sZGluZ3MsIEluYy4xEDAOBgNVBAcTB0NoaWNhZ28x\nETAPBgNVBAgTCElsbGlub2lzMQswCQYDVQQGEwJVUzCCAiIwDQYJKoZIhvcNAQEB\nBQADggIPADCCAgoCggIBAMRO7orfWjfmz6Y6qoAmDp2lqCJcdvbRQ8w18rl1JE3j\nf/1CScZLrnLg4RDm8JiRcvFuvoMXn/XNUWy5ICG57tjG2nO7jvBuXfvbdkGA+foN\n3yJKMTX/PmmGlN4qpzFtsB0kLrP14/0TRGeJB7qDfAFH0ReFk0ftQobLBGBOpEca\n+bv+LhcTe40/uNUSK2yQ9GpIw200mcsD3B9c29Im4tSZFuA2o1vnEeizYW5M4sPX\nHu7p5ZCxjJrXVNqWUPM38rShhMUNL5uaVYWoi7TG5JXbg0Lmt2nq1k5nnig9Yp/W\nlAFooWXjKQzHf/z+XZ57bqPe7SzLW5pzpZdSmY2VRybAwEmzMjCXgHiP2ru3TpAD\n+giakPDoz3ZmbKjwYKZ5PmnOmXx0Z2GloO37MjamjPor/+fZohfyma7VAQE8znJt\nI9MVoRN3G3gW/tuT3jXfzYdFBlfGoO7OYyLN1LK5YBKH2qXrCHD8rG2DauBt7U+w\nfOvwfkp8FcdTnfQ92Xe65U3Xdu0eCgQJbChxZtWhhLnbY6xhmwAWyJ1my+Im72Kx\nGP/XcA8SH2sz6/k0782BjRckDuFpVVpTNYl9wqe/tuOrZhWPapOsRlfsDTuhgGu5\n2inM9sU3CAzmFE85zoRQFZQSof3kFN2rUZF20bmTak99cBNLli6/ja3+KntpZ08d\nAgMBAAGjggFrMIIBZzASBgNVHRMBAf8ECDAGAQH/AgEAMA4GA1UdDwEB/wQEAwIB\nhjAdBgNVHSUEFjAUBggrBgEFBQcDAgYIKwYBBQUHAwEwHQYDVR0OBBYEFHM4IMZH\nbabGL3tQ4EDe3sedR958MB8GA1UdIwQYMBaAFJngGWcNYtt2s9o9uFvo/ULSMQ6H\nMD0GA1UdIAQ2MDQwMgYEVR0gADAqMCgGCCsGAQUFBwIBFhxodHRwczovL3NzbC50\ncnVzdHdhdmUuY29tL0NBMDMGA1UdHwQsMCowKKAmoCSGImh0dHA6Ly9jcmwudHJ1\nc3R3YXZlLmNvbS9UV0dDQS5jcmwwbgYIKwYBBQUHAQEEYjBgMCYGCCsGAQUFBzAB\nhhpodHRwOi8vb2NzcC50cnVzdHdhdmUuY29tLzA2BggrBgEFBQcwAoYqaHR0cDov\nL3NzbC50cnVzdHdhdmUuY29tL2lzc3VlcnMvVFdHQ0EuY3J0MA0GCSqGSIb3DQEB\nCwUAA4ICAQBwnSHECaf+hfGrm3Cg+aRr57ytoOSzI1DjlTNcM7k4uSt6kJRPHJ4c\nldIujMaETV52RgE6ykaMGkuIwQOIsLI6SXwjU1f5gXFUbDTS3KTWc/jwQeyLmdOe\nhvc+wBSFv8d10Sx/Qiti8mqsTqr0+N94Cx01+SkiWxWWoSZOAPkz8DMQGlD4yndK\nceTMGtQ03cLnD/36Mv6tz/Ds9l/OExrJGGxHD0tmYwYwBZpPHm7BBY2ZzycVxLcg\n+uuggcX1pg5MhJ1rDyod+7X+ilvTgH7ftHCmxvR7viMLwSUuytZ05zb2teRQgU+8\niWnPEHO/ADm5VD1Zb5Rx0579/YEENBJtGUPPJzo+JEpiZIOIlwZ69ETWWNCLZr0V\nvoi+SDl65cr+dgR9JreJ2I4W9FzS45ruxYEC8LGKEmV46sAk1YLbnIBmhehAKy9t\nP8RVz3QXYJ6rLOAuXF7R2eVV0SqfivW9bVzvBZTUTFsbdSMBAAF1BJjdRqYR63DI\ncQASY7CRoUiak1NTgPkzeV8VcNJmUt8c2eKJIifqBAjquH6+6UXs9Ol0aMPn6v0y\nB+TSuxhX2sSrpna9QcOh/QyoR5Hvcd81rZSbMc7yasKoUMXviotV1SfEqs3RU5Ts\nwnU4NHPn5ITRiuh5VMuvB/VnjnPC953u5uqAGtZ8BkC7X9cu5E0rMQ==\n-----END CERTIFICATE-----\n\nTrustwave Global Organization Validation CA, Level 1\nTrustwave Holdings, Inc.\n06CE82D9A69703AEFE5D37D18858C74026B004\n-----BEGIN CERTIFICATE-----\nMIIHGDCCBQCgAwIBAgITBs6C2aaXA67+XTfRiFjHQCawBDANBgkqhkiG9w0BAQsF\nADCBiDELMAkGA1UEBhMCVVMxETAPBgNVBAgMCElsbGlub2lzMRAwDgYDVQQHDAdD\naGljYWdvMSEwHwYDVQQKDBhUcnVzdHdhdmUgSG9sZGluZ3MsIEluYy4xMTAvBgNV\nBAMMKFRydXN0d2F2ZSBHbG9iYWwgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkwHhcN\nMTgwMjA2MTIyMTIwWhcNMjgwMjI0MDUwMTIwWjCBlDE9MDsGA1UEAxM0VHJ1c3R3\nYXZlIEdsb2JhbCBPcmdhbml6YXRpb24gVmFsaWRhdGlvbiBDQSwgTGV2ZWwgMTEh\nMB8GA1UEChMYVHJ1c3R3YXZlIEhvbGRpbmdzLCBJbmMuMRAwDgYDVQQHEwdDaGlj\nYWdvMREwDwYDVQQIEwhJbGxpbm9pczELMAkGA1UEBhMCVVMwggIiMA0GCSqGSIb3\nDQEBAQUAA4ICDwAwggIKAoICAQC8BzZtA3eWejFOGHc2DLgex6P471dLWIIHSlrF\nY4a2BCtzAd/VlpQ3gslWnTgthOmK2/hCc+WSaOLPVZzZf3lGnxbb0+Y87Kx+nS1m\nIfJ/4OR6o8XLMLoCTAI1jsWxggiB4NBMqsW2xXQ5VAvBb66KEQYbshNlRpTbtBFq\nEed4YIvCdjbnCUOy1zubgVHUVyCFHzN4XPjEQCtT5vZM576Lt10Je9COnqG0CtPU\nQNP2tjnSmOOYdWcVRZ0UqXUl2fMBfmSDHd8902foigjpP04AYYbq6AetqEgqdvQP\nxz5pVbZqzy8UrE/s/raJLFyTuIAYVt18M0whSgWzGgUWkq2xRqbfn7b1hd56dwRb\nR7pKc51FyTbeocnKlYLC+Dlzp7iKQ3Pb7WHRwLhaJB7u4CzwqhUxHc0xplMYsq92\nMbZ6WN5L5mI7hxY8gLMOR7vNX9CKz9XcYRS01iCDe5Y/9muW8bzGyNXLX1YaHAy4\n+6ncksb3Y3RUKj3f0+T4nbiRISmGazravJKSssBLP3kPa9h5aX+Vd00eL+Q7sXrh\nFO7xz+oWtOL5rfVszyc87JQvjw1sDHA710nViqzUE1bJZNe61EXdCb/RV+Wsu+rO\ncAMSr5x2j/wW875sh+U3EJmTzdEBUBxHnBD2mDTyonT7wL47TRXTEO1IaS4mVbnv\no0jWvQIDAQABo4IBazCCAWcwEgYDVR0TAQH/BAgwBgEB/wIBADAOBgNVHQ8BAf8E\nBAMCAYYwHQYDVR0lBBYwFAYIKwYBBQUHAwIGCCsGAQUFBwMBMB0GA1UdDgQWBBS3\n/VNzOCaKcKuTyoupCOrH07fj/TAfBgNVHSMEGDAWgBSZ4BlnDWLbdrPaPbhb6P1C\n0jEOhzA9BgNVHSAENjA0MDIGBFUdIAAwKjAoBggrBgEFBQcCARYcaHR0cHM6Ly9z\nc2wudHJ1c3R3YXZlLmNvbS9DQTAzBgNVHR8ELDAqMCigJqAkhiJodHRwOi8vY3Js\nLnRydXN0d2F2ZS5jb20vVFdHQ0EuY3JsMG4GCCsGAQUFBwEBBGIwYDAmBggrBgEF\nBQcwAYYaaHR0cDovL29jc3AudHJ1c3R3YXZlLmNvbS8wNgYIKwYBBQUHMAKGKmh0\ndHA6Ly9zc2wudHJ1c3R3YXZlLmNvbS9pc3N1ZXJzL1RXR0NBLmNydDANBgkqhkiG\n9w0BAQsFAAOCAgEAFXwfmELpEGKUguzVTMix79XbUnkfLa7IXcqBOrwOWEF1V8F1\nxGY6jLlUTtoEXRYZwCpqOK/i4m4nmWCYE45O7URR8nqeFffceTi62t4Yvh6LkC9g\nUnj3aChLiO/Zdxilq6vfsXO0mKafrGtZXwjyskS250Pj9DsANs57QqvYN4hqbplJ\nzc95p09OUvEhPiyRyx6FyY28U+3X6+mSNMJWd4Nhr+3HtvmItLIXP2JCLxuYtu/K\n6nKcpFCFFKeF8K3PWpjsAb0hfXL4vc3WfyCYsQnvJeisyAh7yEuge2iDwl1/xXIo\nEOAyyYAxvy5UnzcAa0Z2lwjptve+jZ4gQ+A1ioYUavR3pSfBNzuJW30nZCWFadKc\nNXOPoAPkK8JLxgRBH3JboeBCXG6xgy/pXrTjyhW7/SS+Z+7eKkp9jgdTVQ12yUtc\nCiYWUuM4l240D/z+s03WOEcLTluESwFkJhzs3D9i5crTL72uSkDDmlh8HXoPAyYO\nl3Mn9cGWhd8M8IeQRXmb6O7gvvQZDoSXDVDbjBKcW1lFpi0wBxIBzLaOi4CX4OhI\nJHJ/H3duOMaltuzXLSLkc26jwHzMeq8seQRSXraXJi1t5oBKlmEWFEgq6xlH7mLW\n3TOqS19cuiSWl/CsnlLGaW8MH5YHmk+MJxQE1BcLBs6ciapvHlhLEd9EUpU=\n-----END CERTIFICATE-----\n\nSecureTrust TWG ECDSA P-256 Secure Email CA, Level 2\nTrustwave Holdings, Inc.\n072F30E9C4627001DECFEBF6BF5D3B1066D7E3\n-----BEGIN CERTIFICATE-----\nMIIDbTCCAxKgAwIBAgITBy8w6cRicAHez+v2v107EGbX4zAKBggqhkjOPQQDAjCB\nkTELMAkGA1UEBhMCVVMxETAPBgNVBAgTCElsbGlub2lzMRAwDgYDVQQHEwdDaGlj\nYWdvMSEwHwYDVQQKExhUcnVzdHdhdmUgSG9sZGluZ3MsIEluYy4xOjA4BgNVBAMT\nMVRydXN0d2F2ZSBHbG9iYWwgRUNDIFAyNTYgQ2VydGlmaWNhdGlvbiBBdXRob3Jp\ndHkwHhcNMjAxMDA4MDY0OTQxWhcNMzAxMDA4MDY0ODQxWjBiMQswCQYDVQQGEwJV\nUzEUMBIGA1UEChMLU2VjdXJlVHJ1c3QxPTA7BgNVBAMTNFNlY3VyZVRydXN0IFRX\nRyBFQ0RTQSBQLTI1NiBTZWN1cmUgRW1haWwgQ0EsIExldmVsIDIwWTATBgcqhkjO\nPQIBBggqhkjOPQMBBwNCAAT4KazLm94aiykBGkNQVkBrjmK77RlP627D2n3EwK3s\n49ljRkN6wiTWXHx3jPD5BBE/7mWhGWnphzGu1Deb6yzco4IBdTCCAXEwEgYDVR0T\nAQH/BAgwBgEB/wIBADAOBgNVHQ8BAf8EBAMCAYYwEwYDVR0lBAwwCgYIKwYBBQUH\nAwQwHQYDVR0OBBYEFHMQ2nwjQr8tFHfBImxM7ct8lbBYMB8GA1UdIwQYMBaAFKNB\nBqyQbdFK63WlShCZs7Ghi0r3MEEGA1UdIAQ6MDgwNgYEVR0gADAuMCwGCCsGAQUF\nBwIBFiBodHRwczovL2NlcnRzLnNlY3VyZXRydXN0LmNvbS9DQTA5BgNVHR8EMjAw\nMC6gLKAqhihodHRwOi8vY3JsLnNlY3VyZXRydXN0LmNvbS9UV0dQMjU2Q0EuY3Js\nMHgGCCsGAQUFBwEBBGwwajAoBggrBgEFBQcwAYYcaHR0cDovL29jc3Auc2VjdXJl\ndHJ1c3QuY29tLzA+BggrBgEFBQcwAoYyaHR0cDovL2NlcnRzLnNlY3VyZXRydXN0\nLmNvbS9pc3N1ZXJzL1RXR1AyNTZDQS5jcnQwCgYIKoZIzj0EAwIDSQAwRgIhAN8G\nPwKUpMgV3LZjq7fuKS96f15BrwBjmTlKhOwgX83BAiEA9WpWhzRRoKeJGAqqXrMk\nZ8RE9xRtOFBqYdv9H5CeTVk=\n-----END CERTIFICATE-----\n\nTrustwave Global ECDSA P-256 Domain Validation CA, Level 1\nTrustwave Holdings, Inc.\n06CE82D9AF531423847B85FB677932AAF80508\n-----BEGIN CERTIFICATE-----\nMIIDmDCCAz+gAwIBAgITBs6C2a9TFCOEe4X7Z3kyqvgFCDAKBggqhkjOPQQDAjCB\nkTELMAkGA1UEBhMCVVMxETAPBgNVBAgTCElsbGlub2lzMRAwDgYDVQQHEwdDaGlj\nYWdvMSEwHwYDVQQKExhUcnVzdHdhdmUgSG9sZGluZ3MsIEluYy4xOjA4BgNVBAMT\nMVRydXN0d2F2ZSBHbG9iYWwgRUNDIFAyNTYgQ2VydGlmaWNhdGlvbiBBdXRob3Jp\ndHkwHhcNMTgwMjA2MTIyMTIxWhcNMjgwMjI0MDUwMTIxWjCBmjFDMEEGA1UEAxM6\nVHJ1c3R3YXZlIEdsb2JhbCBFQ0RTQSBQLTI1NiBEb21haW4gVmFsaWRhdGlvbiBD\nQSwgTGV2ZWwgMTEhMB8GA1UEChMYVHJ1c3R3YXZlIEhvbGRpbmdzLCBJbmMuMRAw\nDgYDVQQHEwdDaGljYWdvMREwDwYDVQQIEwhJbGxpbm9pczELMAkGA1UEBhMCVVMw\nWTATBgcqhkjOPQIBBggqhkjOPQMBBwNCAATWpfTIQFPkZIoXXMDN9utRU+AbLGcg\nBmLA06x2qqdcpCMlYFoJhuRWzYCiqz1mKrAvNlQYkgoHfemk92sf8iaro4IBaTCC\nAWUwEgYDVR0TAQH/BAgwBgEB/wIBADAOBgNVHQ8BAf8EBAMCAYYwEwYDVR0lBAww\nCgYIKwYBBQUHAwEwHQYDVR0OBBYEFA/DUGGZflb1xtmcOeiDWJAHuhq0MB8GA1Ud\nIwQYMBaAFKNBBqyQbdFK63WlShCZs7Ghi0r3MD0GA1UdIAQ2MDQwMgYEVR0gADAq\nMCgGCCsGAQUFBwIBFhxodHRwczovL3NzbC50cnVzdHdhdmUuY29tL0NBMDcGA1Ud\nHwQwMC4wLKAqoCiGJmh0dHA6Ly9jcmwudHJ1c3R3YXZlLmNvbS9UV0dQMjU2Q0Eu\nY3JsMHIGCCsGAQUFBwEBBGYwZDAmBggrBgEFBQcwAYYaaHR0cDovL29jc3AudHJ1\nc3R3YXZlLmNvbS8wOgYIKwYBBQUHMAKGLmh0dHA6Ly9zc2wudHJ1c3R3YXZlLmNv\nbS9pc3N1ZXJzL1RXR1AyNTZDQS5jcnQwCgYIKoZIzj0EAwIDRwAwRAIgICvA5ttD\n0oeUcd37iYvoQ7iMIpZINp4e1j5NrlI3UnYCIEZhimm9+1dUWAfx9ZkGmIu0HiHR\nzEZifAHbPM3SJbRu\n-----END CERTIFICATE-----\n\nTrustwave Global ECDSA P-256 Extended Validation CA, Level 1\nTrustwave Holdings, Inc.\n06CE82D9A20A3797CD878EB3DAA41D08680AF7\n-----BEGIN CERTIFICATE-----\nMIIDpjCCA0ugAwIBAgITBs6C2aIKN5fNh46z2qQdCGgK9zAKBggqhkjOPQQDAjCB\nkTELMAkGA1UEBhMCVVMxETAPBgNVBAgTCElsbGlub2lzMRAwDgYDVQQHEwdDaGlj\nYWdvMSEwHwYDVQQKExhUcnVzdHdhdmUgSG9sZGluZ3MsIEluYy4xOjA4BgNVBAMT\nMVRydXN0d2F2ZSBHbG9iYWwgRUNDIFAyNTYgQ2VydGlmaWNhdGlvbiBBdXRob3Jp\ndHkwHhcNMTgwMjA2MTIyMTIwWhcNMjgwMjI0MDUwMTIwWjCBnDFFMEMGA1UEAxM8\nVHJ1c3R3YXZlIEdsb2JhbCBFQ0RTQSBQLTI1NiBFeHRlbmRlZCBWYWxpZGF0aW9u\nIENBLCBMZXZlbCAxMSEwHwYDVQQKExhUcnVzdHdhdmUgSG9sZGluZ3MsIEluYy4x\nEDAOBgNVBAcTB0NoaWNhZ28xETAPBgNVBAgTCElsbGlub2lzMQswCQYDVQQGEwJV\nUzBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IABKXHfFxFDVI6uYWZlWciFFKtYzuJ\n+IBhot3PQGikE3sjU8d9dARkZCkInqmDyP/+XiLzgrYPMy7NS8lZcRsE5p2jggFz\nMIIBbzASBgNVHRMBAf8ECDAGAQH/AgEAMA4GA1UdDwEB/wQEAwIBhjAdBgNVHSUE\nFjAUBggrBgEFBQcDAgYIKwYBBQUHAwEwHQYDVR0OBBYEFAwlVqqzYgakv+7gGxtX\nzC8s9g1QMB8GA1UdIwQYMBaAFKNBBqyQbdFK63WlShCZs7Ghi0r3MD0GA1UdIAQ2\nMDQwMgYEVR0gADAqMCgGCCsGAQUFBwIBFhxodHRwczovL3NzbC50cnVzdHdhdmUu\nY29tL0NBMDcGA1UdHwQwMC4wLKAqoCiGJmh0dHA6Ly9jcmwudHJ1c3R3YXZlLmNv\nbS9UV0dQMjU2Q0EuY3JsMHIGCCsGAQUFBwEBBGYwZDAmBggrBgEFBQcwAYYaaHR0\ncDovL29jc3AudHJ1c3R3YXZlLmNvbS8wOgYIKwYBBQUHMAKGLmh0dHA6Ly9zc2wu\ndHJ1c3R3YXZlLmNvbS9pc3N1ZXJzL1RXR1AyNTZDQS5jcnQwCgYIKoZIzj0EAwID\nSQAwRgIhALahroq1NScrFeCvG5uMgMKH/bo190D+Mkh2ZIojrUOfAiEAosFXFE73\n0WLRPjX2uOkLhXuA4cQEb1R1oeGDH4MNVOo=\n-----END CERTIFICATE-----\n\nTrustwave Global ECDSA P-256 Organization Validation CA, Level 1\nTrustwave Holdings, Inc.\n06CE82D9A8B57C104843994DACD79E28633E5F\n-----BEGIN CERTIFICATE-----\nMIIDqDCCA0+gAwIBAgITBs6C2ai1fBBIQ5lNrNeeKGM+XzAKBggqhkjOPQQDAjCB\nkTELMAkGA1UEBhMCVVMxETAPBgNVBAgTCElsbGlub2lzMRAwDgYDVQQHEwdDaGlj\nYWdvMSEwHwYDVQQKExhUcnVzdHdhdmUgSG9sZGluZ3MsIEluYy4xOjA4BgNVBAMT\nMVRydXN0d2F2ZSBHbG9iYWwgRUNDIFAyNTYgQ2VydGlmaWNhdGlvbiBBdXRob3Jp\ndHkwHhcNMTgwMjA2MTIyMTIxWhcNMjgwMjI0MDUwMTIxWjCBoDFJMEcGA1UEAxNA\nVHJ1c3R3YXZlIEdsb2JhbCBFQ0RTQSBQLTI1NiBPcmdhbml6YXRpb24gVmFsaWRh\ndGlvbiBDQSwgTGV2ZWwgMTEhMB8GA1UEChMYVHJ1c3R3YXZlIEhvbGRpbmdzLCBJ\nbmMuMRAwDgYDVQQHEwdDaGljYWdvMREwDwYDVQQIEwhJbGxpbm9pczELMAkGA1UE\nBhMCVVMwWTATBgcqhkjOPQIBBggqhkjOPQMBBwNCAAQmHWo0mogvX1J61xysTqsn\n6qV06wxUH68/QJ2aDIka6beTrDoTZv3mIkyPxFTPy+9idjgSAERlBsDirgO2/NiY\no4IBczCCAW8wEgYDVR0TAQH/BAgwBgEB/wIBADAOBgNVHQ8BAf8EBAMCAYYwHQYD\nVR0lBBYwFAYIKwYBBQUHAwIGCCsGAQUFBwMBMB0GA1UdDgQWBBSv+Ju8XTSl3tA+\nFCldDY4lrbClhTAfBgNVHSMEGDAWgBSjQQaskG3RSut1pUoQmbOxoYtK9zA9BgNV\nHSAENjA0MDIGBFUdIAAwKjAoBggrBgEFBQcCARYcaHR0cHM6Ly9zc2wudHJ1c3R3\nYXZlLmNvbS9DQTA3BgNVHR8EMDAuMCygKqAohiZodHRwOi8vY3JsLnRydXN0d2F2\nZS5jb20vVFdHUDI1NkNBLmNybDByBggrBgEFBQcBAQRmMGQwJgYIKwYBBQUHMAGG\nGmh0dHA6Ly9vY3NwLnRydXN0d2F2ZS5jb20vMDoGCCsGAQUFBzAChi5odHRwOi8v\nc3NsLnRydXN0d2F2ZS5jb20vaXNzdWVycy9UV0dQMjU2Q0EuY3J0MAoGCCqGSM49\nBAMCA0cAMEQCIGa3JyBYlXxRN5GIIulLaDxnANNRnY4j1Et166CCC5h+AiAVUlzJ\nIJTfUDBU7jnSTKSw/F+bLIPvaC6frMZv0h+RTA==\n-----END CERTIFICATE-----\n\nSecureTrust TWG ECDSA P-384 Secure Email CA, Level 2\nTrustwave Holdings, Inc.\n072F30E9C58D91DEF98A7F9EB2666CFE7BE1EE\n-----BEGIN CERTIFICATE-----\nMIIDqjCCAy+gAwIBAgITBy8w6cWNkd75in+esmZs/nvh7jAKBggqhkjOPQQDAzCB\nkTELMAkGA1UEBhMCVVMxETAPBgNVBAgTCElsbGlub2lzMRAwDgYDVQQHEwdDaGlj\nYWdvMSEwHwYDVQQKExhUcnVzdHdhdmUgSG9sZGluZ3MsIEluYy4xOjA4BgNVBAMT\nMVRydXN0d2F2ZSBHbG9iYWwgRUNDIFAzODQgQ2VydGlmaWNhdGlvbiBBdXRob3Jp\ndHkwHhcNMjAxMDA4MDY0OTQxWhcNMzAxMDA4MDY0ODQxWjBiMQswCQYDVQQGEwJV\nUzEUMBIGA1UEChMLU2VjdXJlVHJ1c3QxPTA7BgNVBAMTNFNlY3VyZVRydXN0IFRX\nRyBFQ0RTQSBQLTM4NCBTZWN1cmUgRW1haWwgQ0EsIExldmVsIDIwdjAQBgcqhkjO\nPQIBBgUrgQQAIgNiAAR4nTJ6MvtPBb7+L3tklhdDw0tr5FNY5Q1hsp6NR5OzZVeG\nx/X3VrCvkOsae1OEZHNqWCnnI1s/ix9qn/2+q0pPpXrT6wkN/HOQzpQaJWzCF7yX\nIfIB0o+x1Pr17UOX2qGjggF1MIIBcTASBgNVHRMBAf8ECDAGAQH/AgEAMA4GA1Ud\nDwEB/wQEAwIBhjATBgNVHSUEDDAKBggrBgEFBQcDBDAdBgNVHQ4EFgQUJd3xyUp6\n6EP6L9hCmkRrWAcU2mwwHwYDVR0jBBgwFoAUVamEidLBMr0Yy2ymB07I552+gpAw\nQQYDVR0gBDowODA2BgRVHSAAMC4wLAYIKwYBBQUHAgEWIGh0dHBzOi8vY2VydHMu\nc2VjdXJldHJ1c3QuY29tL0NBMDkGA1UdHwQyMDAwLqAsoCqGKGh0dHA6Ly9jcmwu\nc2VjdXJldHJ1c3QuY29tL1RXR1AzODRDQS5jcmwweAYIKwYBBQUHAQEEbDBqMCgG\nCCsGAQUFBzABhhxodHRwOi8vb2NzcC5zZWN1cmV0cnVzdC5jb20vMD4GCCsGAQUF\nBzAChjJodHRwOi8vY2VydHMuc2VjdXJldHJ1c3QuY29tL2lzc3VlcnMvVFdHUDM4\nNENBLmNydDAKBggqhkjOPQQDAwNpADBmAjEA8X5zwZHtdHjLIn60rwG3Z3NAa6cU\n6gOFxyF+ksTCXvWCUP0oFUqsRPMKMYE2mtdQAjEA2diuEHTPUgCQ0ynhLjged8BO\nFyzL3UlFieGGp90v58gUpfjoFq0BReAw7MPYo/Qa\n-----END CERTIFICATE-----\n\nTrustwave Global ECDSA P-384 Domain Validation CA, Level 1\nTrustwave Holdings, Inc.\n06CE82D9B07A17CC5376157813389A2930A44A\n-----BEGIN CERTIFICATE-----\nMIID1TCCA1ygAwIBAgITBs6C2bB6F8xTdhV4EziaKTCkSjAKBggqhkjOPQQDAzCB\nkTELMAkGA1UEBhMCVVMxETAPBgNVBAgTCElsbGlub2lzMRAwDgYDVQQHEwdDaGlj\nYWdvMSEwHwYDVQQKExhUcnVzdHdhdmUgSG9sZGluZ3MsIEluYy4xOjA4BgNVBAMT\nMVRydXN0d2F2ZSBHbG9iYWwgRUNDIFAzODQgQ2VydGlmaWNhdGlvbiBBdXRob3Jp\ndHkwHhcNMTgwMjA2MTIyMTIxWhcNMjgwMjI0MDUwMTIxWjCBmjFDMEEGA1UEAxM6\nVHJ1c3R3YXZlIEdsb2JhbCBFQ0RTQSBQLTM4NCBEb21haW4gVmFsaWRhdGlvbiBD\nQSwgTGV2ZWwgMTEhMB8GA1UEChMYVHJ1c3R3YXZlIEhvbGRpbmdzLCBJbmMuMRAw\nDgYDVQQHEwdDaGljYWdvMREwDwYDVQQIEwhJbGxpbm9pczELMAkGA1UEBhMCVVMw\ndjAQBgcqhkjOPQIBBgUrgQQAIgNiAASxlBEflNumTKsypgdOscM2x6ZRpQGSyB4B\nhJScRQI81UhZvzYSwxPWcxNZwFQoV457HfqR51pviJnHltRS8MJhJ9Q9Rf1sSmy4\nW6SPsM9qnBjwfBRxghByIsEIaTW/PKyjggFpMIIBZTASBgNVHRMBAf8ECDAGAQH/\nAgEAMA4GA1UdDwEB/wQEAwIBhjATBgNVHSUEDDAKBggrBgEFBQcDATAdBgNVHQ4E\nFgQUp6etGGS1u/oGGEfIwJ68Zf9pAWAwHwYDVR0jBBgwFoAUVamEidLBMr0Yy2ym\nB07I552+gpAwPQYDVR0gBDYwNDAyBgRVHSAAMCowKAYIKwYBBQUHAgEWHGh0dHBz\nOi8vc3NsLnRydXN0d2F2ZS5jb20vQ0EwNwYDVR0fBDAwLjAsoCqgKIYmaHR0cDov\nL2NybC50cnVzdHdhdmUuY29tL1RXR1AzODRDQS5jcmwwcgYIKwYBBQUHAQEEZjBk\nMCYGCCsGAQUFBzABhhpodHRwOi8vb2NzcC50cnVzdHdhdmUuY29tLzA6BggrBgEF\nBQcwAoYuaHR0cDovL3NzbC50cnVzdHdhdmUuY29tL2lzc3VlcnMvVFdHUDM4NENB\nLmNydDAKBggqhkjOPQQDAwNnADBkAjA6fS1jRjt+DvnWSI58v4lX+8DCXbdEhDaB\nbBOS/rXwS/ntsFXqTf0B90GPv3AWlFMCMBbz6nXMwX0jKRkaFZOZx9tvwUapdq7M\n6jYpT/NnAzH68x1t3/7ysZ8lPuKIqAwdKQ==\n-----END CERTIFICATE-----\n\nTrustwave Global ECDSA P-384 Extended Validation CA, Level 1\nTrustwave Holdings, Inc.\n06CE82D9A331594530006781829387E40DBCB6\n-----BEGIN CERTIFICATE-----\nMIID4zCCA2igAwIBAgITBs6C2aMxWUUwAGeBgpOH5A28tjAKBggqhkjOPQQDAzCB\nkTELMAkGA1UEBhMCVVMxETAPBgNVBAgTCElsbGlub2lzMRAwDgYDVQQHEwdDaGlj\nYWdvMSEwHwYDVQQKExhUcnVzdHdhdmUgSG9sZGluZ3MsIEluYy4xOjA4BgNVBAMT\nMVRydXN0d2F2ZSBHbG9iYWwgRUNDIFAzODQgQ2VydGlmaWNhdGlvbiBBdXRob3Jp\ndHkwHhcNMTgwMjA2MTIyMTIwWhcNMjgwMjI0MDUwMTIwWjCBnDFFMEMGA1UEAxM8\nVHJ1c3R3YXZlIEdsb2JhbCBFQ0RTQSBQLTM4NCBFeHRlbmRlZCBWYWxpZGF0aW9u\nIENBLCBMZXZlbCAxMSEwHwYDVQQKExhUcnVzdHdhdmUgSG9sZGluZ3MsIEluYy4x\nEDAOBgNVBAcTB0NoaWNhZ28xETAPBgNVBAgTCElsbGlub2lzMQswCQYDVQQGEwJV\nUzB2MBAGByqGSM49AgEGBSuBBAAiA2IABKcVGieqBjW3BuVza9VhkBlpGLHLZqQg\nI0GXaTpt5CogNWz6BmlZ1yAPjRnDUVfVwl57ATRtV7u+5TPFzKZ+RheFVc0iA8vl\nQ2JINGRz8XLDaivvuygQtFKSzCWn4e66cKOCAXMwggFvMBIGA1UdEwEB/wQIMAYB\nAf8CAQAwDgYDVR0PAQH/BAQDAgGGMB0GA1UdJQQWMBQGCCsGAQUFBwMCBggrBgEF\nBQcDATAdBgNVHQ4EFgQUMFfit09gayJACkNfT/oNzXO8JCcwHwYDVR0jBBgwFoAU\nVamEidLBMr0Yy2ymB07I552+gpAwPQYDVR0gBDYwNDAyBgRVHSAAMCowKAYIKwYB\nBQUHAgEWHGh0dHBzOi8vc3NsLnRydXN0d2F2ZS5jb20vQ0EwNwYDVR0fBDAwLjAs\noCqgKIYmaHR0cDovL2NybC50cnVzdHdhdmUuY29tL1RXR1AzODRDQS5jcmwwcgYI\nKwYBBQUHAQEEZjBkMCYGCCsGAQUFBzABhhpodHRwOi8vb2NzcC50cnVzdHdhdmUu\nY29tLzA6BggrBgEFBQcwAoYuaHR0cDovL3NzbC50cnVzdHdhdmUuY29tL2lzc3Vl\ncnMvVFdHUDM4NENBLmNydDAKBggqhkjOPQQDAwNpADBmAjEA6pScrGT+SruK7iON\n7iDJZfhQsjfQIhaq9sHiEXd89B8ibWOb57no/K265dPxeuALAjEA27NTMZM344eT\nX3df9B22dY5ZshsUMIiRcMo1K4B/GBO8SIA0jParkHS5g4WO5K7O\n-----END CERTIFICATE-----\n\nTrustwave Global ECDSA P-384 Organization Validation CA, Level 1\nTrustwave Holdings, Inc.\n06CE82D9A9D8E29837EF90BEAF59DC6551BED6\n-----BEGIN CERTIFICATE-----\nMIID5jCCA2ygAwIBAgITBs6C2anY4pg375C+r1ncZVG+1jAKBggqhkjOPQQDAzCB\nkTELMAkGA1UEBhMCVVMxETAPBgNVBAgTCElsbGlub2lzMRAwDgYDVQQHEwdDaGlj\nYWdvMSEwHwYDVQQKExhUcnVzdHdhdmUgSG9sZGluZ3MsIEluYy4xOjA4BgNVBAMT\nMVRydXN0d2F2ZSBHbG9iYWwgRUNDIFAzODQgQ2VydGlmaWNhdGlvbiBBdXRob3Jp\ndHkwHhcNMTgwMjA2MTIyMTIxWhcNMjgwMjI0MDUwMTIxWjCBoDFJMEcGA1UEAxNA\nVHJ1c3R3YXZlIEdsb2JhbCBFQ0RTQSBQLTM4NCBPcmdhbml6YXRpb24gVmFsaWRh\ndGlvbiBDQSwgTGV2ZWwgMTEhMB8GA1UEChMYVHJ1c3R3YXZlIEhvbGRpbmdzLCBJ\nbmMuMRAwDgYDVQQHEwdDaGljYWdvMREwDwYDVQQIEwhJbGxpbm9pczELMAkGA1UE\nBhMCVVMwdjAQBgcqhkjOPQIBBgUrgQQAIgNiAATvG09PrsO8UQZhH5Zw54rwgcUw\nKjC9D2V3myjD5WOa8uxdTL8PzdwPk4TCcSf6UUG1Tt74j/I+vBOi2tgMcDt68Zld\nvTj+jZT1BBYTQtYh6/dOUjmiapQU5XqoFMRNubGjggFzMIIBbzASBgNVHRMBAf8E\nCDAGAQH/AgEAMA4GA1UdDwEB/wQEAwIBhjAdBgNVHSUEFjAUBggrBgEFBQcDAgYI\nKwYBBQUHAwEwHQYDVR0OBBYEFDoXwH5iO1eguEDKzDRHzZZ+/AmIMB8GA1UdIwQY\nMBaAFFWphInSwTK9GMtspgdOyOedvoKQMD0GA1UdIAQ2MDQwMgYEVR0gADAqMCgG\nCCsGAQUFBwIBFhxodHRwczovL3NzbC50cnVzdHdhdmUuY29tL0NBMDcGA1UdHwQw\nMC4wLKAqoCiGJmh0dHA6Ly9jcmwudHJ1c3R3YXZlLmNvbS9UV0dQMzg0Q0EuY3Js\nMHIGCCsGAQUFBwEBBGYwZDAmBggrBgEFBQcwAYYaaHR0cDovL29jc3AudHJ1c3R3\nYXZlLmNvbS8wOgYIKwYBBQUHMAKGLmh0dHA6Ly9zc2wudHJ1c3R3YXZlLmNvbS9p\nc3N1ZXJzL1RXR1AzODRDQS5jcnQwCgYIKoZIzj0EAwMDaAAwZQIwMyHlVCVMacxP\nO0fC+uc4M7Eq1F9woaWBmLSSNC6EWe3nShMqsR9HrNWrOHBHucNWAjEArwrzEM8g\nJkR4iZxbyYNIn2sNEkNZt2pxqJn4G2cDDDFfOarykKVzP1aJ9OMdYUvs\n-----END CERTIFICATE-----\n\nTrustwave S/MIME SHA256 CA, Level 1\nXRamp Security Services Inc\n3A83B71EE02C3CCA1CE1A2643E9B66EA\n-----BEGIN CERTIFICATE-----\nMIIFHTCCBAWgAwIBAgIQOoO3HuAsPMoc4aJkPptm6jANBgkqhkiG9w0BAQsFADCB\ngjELMAkGA1UEBhMCVVMxHjAcBgNVBAsTFXd3dy54cmFtcHNlY3VyaXR5LmNvbTEk\nMCIGA1UEChMbWFJhbXAgU2VjdXJpdHkgU2VydmljZXMgSW5jMS0wKwYDVQQDEyRY\nUmFtcCBHbG9iYWwgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkwHhcNMTQxMDAxMTky\nMjM4WhcNMjQwOTI4MTkyMjM4WjCBpDELMAkGA1UEBhMCVVMxETAPBgNVBAgTCEls\nbGlub2lzMRAwDgYDVQQHEwdDaGljYWdvMSEwHwYDVQQKExhUcnVzdHdhdmUgSG9s\nZGluZ3MsIEluYy4xLDAqBgNVBAMTI1RydXN0d2F2ZSBTL01JTUUgU0hBMjU2IENB\nLCBMZXZlbCAxMR8wHQYJKoZIhvcNAQkBFhBjYUB0cnVzdHdhdmUuY29tMIIBIjAN\nBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA4c5I5giD0wEh+RuoLIJkD7a6mBlm\n+YzTtXSefGejVVYtpjclkUl4C4hEfQMCUcrBnU3ORHVprXi/Q82dKNFPac8FI9bj\n8mtq0cjdSDfXJKfdf52wPXnTjASwKyhJt+CoJik+Fz72KAkjxi+OUSpWdQBeAQra\ndbtu4UGFTgPcuU/cwpF8J0g4CGk/saVKkkJNpq5wqpfQRYl025FyKbzmRjqhB/Ta\npoHlbHMQ7aeoZ+qtDC+eWnE3AqTUHx14Z5fegjLQRmPWqqdeZafthouglbEuHt4A\neyzefTDNwyXjUiRD/n0kaNNW+lcsLpw7ouw1OU8mwQ0C7LoPJljpXRjvOwIDAQAB\no4IBaTCCAWUwEgYDVR0TAQH/BAgwBgEB/wIBADAdBgNVHQ4EFgQUDDOjV6rjq9ZL\ncBs2nqPtYVDmr3QwDgYDVR0PAQH/BAQDAgGGMEgGA1UdIARBMD8wPQYPKwYBBAGB\n7RgDAwMFBAMDMCowKAYIKwYBBQUHAgEWHGh0dHBzOi8vc3NsLnRydXN0d2F2ZS5j\nb20vQ0EwMgYDVR0fBCswKTAnoCWgI4YhaHR0cDovL2NybC50cnVzdHdhdmUuY29t\nL1hHQ0EuY3JsMGwGCCsGAQUFBwEBBGAwXjAlBggrBgEFBQcwAYYZaHR0cDovL29j\nc3AudHJ1c3R3YXZlLmNvbTA1BggrBgEFBQcwAoYpaHR0cDovL3NzbC50cnVzdHdh\ndmUuY29tL2lzc3VlcnMvWEdDQS5jcnQwEwYDVR0lBAwwCgYIKwYBBQUHAwQwHwYD\nVR0jBBgwFoAUxk+iPQZjhAmczmLkBKyNXLXpthswDQYJKoZIhvcNAQELBQADggEB\nAIdGLHufUegzFKVBQVWs3YAIFqCcJvdak14TMRImxJsnQWLz+jIW0olC0JATY6Ng\nxAbjIJA4wtW/tA+rgE6WcA5y3bLN3bRMQVDSu6X26hkVjvwo4/VYykOp3e9Cqlfe\ngJAsrqBQKXkUpEbYEmmorXxj6/74e//xwXTz0XS0BS9cXhONlTQffyJnMeLaunzQ\nS1x/MvALfPCHCZCTOfLDmwylKtHHu+V2Ks0HV+ZrzCBRR5W3MhGTU7PpNEMQwyGF\n+MG5eZTd0jyxOSOjaXQm7iDh0tG/iKZZegn5AhNdaHE74QEHTjK+teLQlo60QGBk\necyzakgVYZ/Ezalz8nQwhCA=\n-----END CERTIFICATE-----\n\nTrustwave XRamp Global Extended Validation CA, Level 1\nXRamp Security Services Inc\n00D3D519C2B2EB5C7040F64CBC957BBD2C\n-----BEGIN CERTIFICATE-----\nMIIFMDCCBBigAwIBAgIRANPVGcKy61xwQPZMvJV7vSwwDQYJKoZIhvcNAQELBQAw\ngYIxCzAJBgNVBAYTAlVTMR4wHAYDVQQLExV3d3cueHJhbXBzZWN1cml0eS5jb20x\nJDAiBgNVBAoTG1hSYW1wIFNlY3VyaXR5IFNlcnZpY2VzIEluYzEtMCsGA1UEAxMk\nWFJhbXAgR2xvYmFsIENlcnRpZmljYXRpb24gQXV0aG9yaXR5MB4XDTE1MDgxMjIw\nMTczMVoXDTI1MDgwOTIwMTczMVowgbcxCzAJBgNVBAYTAlVTMREwDwYDVQQIEwhJ\nbGxpbm9pczEQMA4GA1UEBxMHQ2hpY2FnbzEhMB8GA1UEChMYVHJ1c3R3YXZlIEhv\nbGRpbmdzLCBJbmMuMT8wPQYDVQQDEzZUcnVzdHdhdmUgWFJhbXAgR2xvYmFsIEV4\ndGVuZGVkIFZhbGlkYXRpb24gQ0EsIExldmVsIDExHzAdBgkqhkiG9w0BCQEWEGNh\nQHRydXN0d2F2ZS5jb20wggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQC9\nAAbj9SknrNJT9pDatGvlR386KRi0SkqIOGr+C5W91+8E8PqydEHwjrnrWt/MTLGO\n+2kfEO3TEJlWxQQqbHy8SdhjCANefLzOT1cfTfjroWBIS9yiHpBIQytAaz/td95Y\n+JKrRBVCnIR/wB5qMMQ982RWwqggD763XLma0c1AIndsZL+dXp1zET4KBreoxn3q\nRYzMIsZIL2mAJoiCOTYuOGrOMVuaQn0HSu3K7bU+CpkdLQ/j+ikcQiI10IL9oOcO\nU9Gnt/hRyUX66Gk91RIpYXhla2tIYrg7ezrAnFoZIZCb891JjFtbSEOvAAK9F5d6\nfkkjPx0432o/v1c5GRFPAgMBAAGjggFoMIIBZDASBgNVHRMBAf8ECDAGAQH/AgEA\nMB0GA1UdDgQWBBTFzrk7QkXAzQnlaOhIOoNdbI6rGDAOBgNVHQ8BAf8EBAMCAYYw\nPQYDVR0gBDYwNDAyBgRVHSAAMCowKAYIKwYBBQUHAgEWHGh0dHBzOi8vc3NsLnRy\ndXN0d2F2ZS5jb20vQ0EwMgYDVR0fBCswKTAnoCWgI4YhaHR0cDovL2NybC50cnVz\ndHdhdmUuY29tL1hHQ0EuY3JsMGwGCCsGAQUFBwEBBGAwXjAlBggrBgEFBQcwAYYZ\naHR0cDovL29jc3AudHJ1c3R3YXZlLmNvbTA1BggrBgEFBQcwAoYpaHR0cDovL3Nz\nbC50cnVzdHdhdmUuY29tL2lzc3VlcnMvWEdDQS5jcnQwHQYDVR0lBBYwFAYIKwYB\nBQUHAwIGCCsGAQUFBwMBMB8GA1UdIwQYMBaAFMZPoj0GY4QJnM5i5ASsjVy16bYb\nMA0GCSqGSIb3DQEBCwUAA4IBAQCA2N/WVTGYRGNTuvF2qKWPrQUx0/6pKmGqELl6\nNXs1bwRXCci98SkeNjiaa2dHEwcGR43/M1Y0nekXP8QCEFVqGOwaY0pnTb8wL+CI\n/HTp1zfmoCYNvtzt1fIq/+9ynLYEjX8rsrf51HIEjJJK8K3k/Ub3cFT+yJKNN2YN\nJS0IvJYlbpqS6VbcInwLcW7WvJmXUuL7t0Vtt0d2q1h5UdnJQP+skiOmN/B0zPut\nbRC4v5pNGJJmwbk58UlOSeviH2qzDGutamOJ6dFNWqQFoZorAT7fUsr3WDA4HKtx\neraYdCIRJX7weW9xpdMNsVO7Wy/Ma7Fz9fzKnOH5mnInBOof\n-----END CERTIFICATE-----\n\nSecure Global CA\nSecureTrust Corporation\n075622A4E8D48A894DF413C8F0F8EAA5\n-----BEGIN CERTIFICATE-----\nMIIDvDCCAqSgAwIBAgIQB1YipOjUiolN9BPI8PjqpTANBgkqhkiG9w0BAQUFADBK\nMQswCQYDVQQGEwJVUzEgMB4GA1UEChMXU2VjdXJlVHJ1c3QgQ29ycG9yYXRpb24x\nGTAXBgNVBAMTEFNlY3VyZSBHbG9iYWwgQ0EwHhcNMDYxMTA3MTk0MjI4WhcNMjkx\nMjMxMTk1MjA2WjBKMQswCQYDVQQGEwJVUzEgMB4GA1UEChMXU2VjdXJlVHJ1c3Qg\nQ29ycG9yYXRpb24xGTAXBgNVBAMTEFNlY3VyZSBHbG9iYWwgQ0EwggEiMA0GCSqG\nSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCvNS7YrGxVaQZx5RNoJLNP2MwhR/jxYDiJ\niQPpvepeRlMJ3Fz1Wuj3RSoC6zFh1ykzTM7HfAo3fg+6MpjhHZevj8fcyTiW89sa\n/FHtaMbQbqR8JNGuQsiWUGMu4P51/pinX0kuleM5M2SOHqRfkNJnPLLZ/kG5VacJ\njnIFHovdRIWCQtBJwB1g8NEXLJXr9qXBkqPFwqcIYA1gBBCWeZ4WNOaptvolRTnI\nHmX5k/Wq8VLcmZg9pYYaDDUz+kulBAYVHDGA76oYa8J719rO+TMg1fW9ajMtgQT7\nsFzUnKPiXB3jqUJ1XnvUd+85VLrJChgbEplJL4hL/VBi0XPnj3pDAgMBAAGjgZ0w\ngZowEwYJKwYBBAGCNxQCBAYeBABDAEEwCwYDVR0PBAQDAgGGMA8GA1UdEwEB/wQF\nMAMBAf8wHQYDVR0OBBYEFK9EBMJBfkiD2045AuzshHrmzsmkMDQGA1UdHwQtMCsw\nKaAnoCWGI2h0dHA6Ly9jcmwuc2VjdXJldHJ1c3QuY29tL1NHQ0EuY3JsMBAGCSsG\nAQQBgjcVAQQDAgEAMA0GCSqGSIb3DQEBBQUAA4IBAQBjGghAfaReUw132HquHw0L\nURYD7xh8yOOvaliTFGCRsoTciE6+OYo68+aCiV0BN7OrJKQVDpI1WkpEXk5X+nXO\nH0jOZvQ8QCaSmGwb7iRGDBezUqXbpZGRzzfTb+cnCDpOGR86p1hcF895P4vkp9Mm\nI50mD1hp/Ed+stCNi5O/KU9DaXR2Z0vPB4zmAve14bRDtUstFJ/53CYNv6ZHdAbY\niNE6KTCEztI5gGIbqMdXSbxqVVFnFUq+NQfk1XWYN3kwFNspnWzFacxHVaIw98xc\nf8LDmBxrThaA63p4ZUWiABqvDA1VZDRIuJK58bRQKfJPIx/abKwfROHdI3hRW8cW\n-----END CERTIFICATE-----\n\nSecureTrust CA\nSecureTrust Corporation\n0CF08E5C0816A5AD427FF0EB271859D0\n-----BEGIN CERTIFICATE-----\nMIIDuDCCAqCgAwIBAgIQDPCOXAgWpa1Cf/DrJxhZ0DANBgkqhkiG9w0BAQUFADBI\nMQswCQYDVQQGEwJVUzEgMB4GA1UEChMXU2VjdXJlVHJ1c3QgQ29ycG9yYXRpb24x\nFzAVBgNVBAMTDlNlY3VyZVRydXN0IENBMB4XDTA2MTEwNzE5MzExOFoXDTI5MTIz\nMTE5NDA1NVowSDELMAkGA1UEBhMCVVMxIDAeBgNVBAoTF1NlY3VyZVRydXN0IENv\ncnBvcmF0aW9uMRcwFQYDVQQDEw5TZWN1cmVUcnVzdCBDQTCCASIwDQYJKoZIhvcN\nAQEBBQADggEPADCCAQoCggEBAKukgeWVzfX2FI7CT8rU4niVWJxB4Q2ZQCQXOZEz\nZum+4YOvYlyJ0fwkW2Gz4BERQRwdbvC4u/jep4G6pkjGnx29vo6pQT64lO0pGtSO\n0gMdA+9tDWccV9cGrcrI9f4Or2YlSASWC12juhbDCE/RRvgUXPLIXgGZbf2IzIao\nwW8xQmxSPmjL8xk037uHGFaAJsTQ3MBv396gwpEWoGQRS0S8Hvbn+mPeZqx2pHGj\n7DaUaHp3pLHnDi+BeuK1cobvomuL8A/b01k/unK8RCSc43Oz969XL0Imnal0ugBS\n8kvNU3xHCzaFDmapCJcWNFfBZveA4+1wVMeT4C4oFVmHursCAwEAAaOBnTCBmjAT\nBgkrBgEEAYI3FAIEBh4EAEMAQTALBgNVHQ8EBAMCAYYwDwYDVR0TAQH/BAUwAwEB\n/zAdBgNVHQ4EFgQUQjK2FvoE/f5dS3rD/fdMQB1aQ68wNAYDVR0fBC0wKzApoCeg\nJYYjaHR0cDovL2NybC5zZWN1cmV0cnVzdC5jb20vU1RDQS5jcmwwEAYJKwYBBAGC\nNxUBBAMCAQAwDQYJKoZIhvcNAQEFBQADggEBADDtT0rhWDpSclu1pqNlGKa7UTt3\n6Z3q059c4EVlew3KW+JwULKUBRSuSceNQQcSc5R+DCMh/bwQf2AQWnL1mA6s7Ll/\n3XpvXdMc9P+IBWlCqQVxyLesJugutIxq/3HcuLHfmbx8IVQr5Fiiu1cprp6poxkm\nD5kuCLDv/WnPmRoJjeOnnyvJNjR7JLN4TJUXpAYmHrZkUjZfYGfZnMUFdAvnZyPS\nCPyI6a6Lf+Ew9Dd+/cYy2i2eRDAwbO4H3tI0/NL/QPZL9GZGBlSm8jIKYyYwa5vR\n3ItHuuG51WLQoqD0ZwV4KWMabwTW+MZMo5qxN7SN5ShLHZ4swrhovO0C7jE=\n-----END CERTIFICATE-----\n\nTrustwave Global Certification Authority\nTrustwave Holdings, Inc.\n05F70E86DA49F346352EBAB2\n-----BEGIN CERTIFICATE-----\nMIIF2jCCA8KgAwIBAgIMBfcOhtpJ80Y1LrqyMA0GCSqGSIb3DQEBCwUAMIGIMQsw\nCQYDVQQGEwJVUzERMA8GA1UECAwISWxsaW5vaXMxEDAOBgNVBAcMB0NoaWNhZ28x\nITAfBgNVBAoMGFRydXN0d2F2ZSBIb2xkaW5ncywgSW5jLjExMC8GA1UEAwwoVHJ1\nc3R3YXZlIEdsb2JhbCBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eTAeFw0xNzA4MjMx\nOTM0MTJaFw00MjA4MjMxOTM0MTJaMIGIMQswCQYDVQQGEwJVUzERMA8GA1UECAwI\nSWxsaW5vaXMxEDAOBgNVBAcMB0NoaWNhZ28xITAfBgNVBAoMGFRydXN0d2F2ZSBI\nb2xkaW5ncywgSW5jLjExMC8GA1UEAwwoVHJ1c3R3YXZlIEdsb2JhbCBDZXJ0aWZp\nY2F0aW9uIEF1dGhvcml0eTCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIB\nALldUShLPDeS0YLOvR29zd24q88KPuFd5dyqCblXAj7mY2Hf8g+CY66j96xz0Xzn\nswuvCAAJWX/NKSqIk4cXGIDtiLK0thAfLdZfVaITXdHG6wZWiYj+rDKd/VzDBcdu\n7oaJuogDnXIhhpCujwOl3J+IKMujkkkP7NAP4m1ET4BqstTnoApTAbqOl5F2brz8\n1Ws25kCI1nsvXwXoLG0R8+eyvpJETNKXpP7ScoFDB5zpET71ixpZfR9oWN0EACyW\n80OzfpgZdNmcc9kYvkHHNHnZ9GLCQ7mzJ7Aiy/k9UscwR7PJPrhq4ufogXBeQotP\nJqX+OsIgbrv4Fo7NDKm0G2x2EOFYeUY+VM6AqFcJNykbmROPDMjWLBz7BegIlT1l\nRtzuzWniTY+HKE40Cz7PFNm73bZQmq131BnW2hqIyE4bJ3XYsgjxroMwuREOzYfw\nhI0Vcnyh78zyiGG69Gm7DIwLdVcEuE4qFC49DxweMqZiNu5m4iK4BUBjECLzMx10\ncoos9TkpoNPnG4CELcU9402x/RpvumUHO1jsQkUm+9jaJXLE9gCxInm943xZYkqc\nBW89zubWR2OZxiRvchLIrH+QtAuRcOi35hYQcRfO3gZPSEF9NUqjifLJS3tBEW1n\ntwiYTOURGa5CgNz7kAXU+FDKvuStx8KU1xad5hePrzb7AgMBAAGjQjBAMA8GA1Ud\nEwEB/wQFMAMBAf8wHQYDVR0OBBYEFJngGWcNYtt2s9o9uFvo/ULSMQ6HMA4GA1Ud\nDwEB/wQEAwIBBjANBgkqhkiG9w0BAQsFAAOCAgEAmHNw4rDT7TnsTGDZqRKGFx6W\n0OhUKDtkLSGm+J1WE2pIPU/HPinbbViDVD2HfSMF1OQc3Og4ZYbFdada2zUFvXfe\nuyk3QAUHw5RSn8pk3fEbK9xGChACMf1KaA0HZJDmHvUqoai7PF35owgLEQzxPy0Q\nlG/+4jSHg9bP5Rs1bdID4bANqKCqRieCNqcVtgimQlRXtpla4gt5kNdXElE1GYhB\naCXUNxeEFfsBctyV3lImIJgm4nb1J2/6ADtKYdkNy1GTKv0WBpanI5ojSP5RvbbE\nsLFUzt5sQa0WZ37b/TjNuThOssFgy50X31ieemKyJo90lZvkWx3SD92YHJtZuSPT\nMaCm/zjdzyBP6VhWOmfD0faZmZ26NraAL4hHT4a/RDqA5Dccprrql5gR0IRiR2Qe\nqu5AvzSxnI9O4fKSTx+O856X3vOmeWqJcU9LJxdI/uz0UA9PSX3MReO9ekDFQdxh\nVicGaeVyQYHTtgGJoC86cnn+OjC/QezHYj6RS8fZMXZC+fc8Y+wmjHMMfRod6qh8\nh6jCJ3zhM0EPz8/8AKAigJ5Kp28AsEFFtyLKaEjFQqKu3R3y4G5OBVixwJAWKqQ9\nEEC+j2Jjg6mcgn0tAumDMHzLJ8n9HmYAsC7TIS+OMxZsmO0QqAfWzJPP29FpHOTK\nyeC2nOnOcXHebD8WpHk=\n-----END CERTIFICATE-----\n\nTrustwave Global ECC P256 Certification Authority\nTrustwave Holdings, Inc.\n0D6A5F083F285C3E5195DF5D\n-----BEGIN CERTIFICATE-----\nMIICYDCCAgegAwIBAgIMDWpfCD8oXD5Rld9dMAoGCCqGSM49BAMCMIGRMQswCQYD\nVQQGEwJVUzERMA8GA1UECBMISWxsaW5vaXMxEDAOBgNVBAcTB0NoaWNhZ28xITAf\nBgNVBAoTGFRydXN0d2F2ZSBIb2xkaW5ncywgSW5jLjE6MDgGA1UEAxMxVHJ1c3R3\nYXZlIEdsb2JhbCBFQ0MgUDI1NiBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eTAeFw0x\nNzA4MjMxOTM1MTBaFw00MjA4MjMxOTM1MTBaMIGRMQswCQYDVQQGEwJVUzERMA8G\nA1UECBMISWxsaW5vaXMxEDAOBgNVBAcTB0NoaWNhZ28xITAfBgNVBAoTGFRydXN0\nd2F2ZSBIb2xkaW5ncywgSW5jLjE6MDgGA1UEAxMxVHJ1c3R3YXZlIEdsb2JhbCBF\nQ0MgUDI1NiBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eTBZMBMGByqGSM49AgEGCCqG\nSM49AwEHA0IABH77bOYj43MyCMpg5lOcunSNGLB4kFKA3TjASh3RqMyTpJcGOMoN\nFWLGjgEqZZ2q3zSRLoHB5DOSMcT9CTqmP62jQzBBMA8GA1UdEwEB/wQFMAMBAf8w\nDwYDVR0PAQH/BAUDAwcGADAdBgNVHQ4EFgQUo0EGrJBt0UrrdaVKEJmzsaGLSvcw\nCgYIKoZIzj0EAwIDRwAwRAIgB+ZU2g6gWrKuEZ+Hxbb/ad4lvvigtwjzRM4q3wgh\nDDcCIC0mA6AFvWvR9lz4ZcyGbbOcNEhjhAnFjXca4syc4XR7\n-----END CERTIFICATE-----\n\nTrustwave Global ECC P384 Certification Authority\nTrustwave Holdings, Inc.\n08BD85976C9927A48068473B\n-----BEGIN CERTIFICATE-----\nMIICnTCCAiSgAwIBAgIMCL2Fl2yZJ6SAaEc7MAoGCCqGSM49BAMDMIGRMQswCQYD\nVQQGEwJVUzERMA8GA1UECBMISWxsaW5vaXMxEDAOBgNVBAcTB0NoaWNhZ28xITAf\nBgNVBAoTGFRydXN0d2F2ZSBIb2xkaW5ncywgSW5jLjE6MDgGA1UEAxMxVHJ1c3R3\nYXZlIEdsb2JhbCBFQ0MgUDM4NCBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eTAeFw0x\nNzA4MjMxOTM2NDNaFw00MjA4MjMxOTM2NDNaMIGRMQswCQYDVQQGEwJVUzERMA8G\nA1UECBMISWxsaW5vaXMxEDAOBgNVBAcTB0NoaWNhZ28xITAfBgNVBAoTGFRydXN0\nd2F2ZSBIb2xkaW5ncywgSW5jLjE6MDgGA1UEAxMxVHJ1c3R3YXZlIEdsb2JhbCBF\nQ0MgUDM4NCBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eTB2MBAGByqGSM49AgEGBSuB\nBAAiA2IABGvaDXU1CDFHBa5FmVXxERMuSvgQMSOjfoPTfygIOiYaOs+Xgh+AtycJ\nj9GOMMQKmw6sWASr9zZ9lCOkmwqKi6vr/TklZvFe/oyujUF5nQlgziip04pt89ZF\n1PKYhDhloKNDMEEwDwYDVR0TAQH/BAUwAwEB/zAPBgNVHQ8BAf8EBQMDBwYAMB0G\nA1UdDgQWBBRVqYSJ0sEyvRjLbKYHTsjnnb6CkDAKBggqhkjOPQQDAwNnADBkAjA3\nAZKXRRJ+oPM+rRk6ct30UJMDEr5E0k9BpIycnR+j9sKS50gU/k6bpZFXrsY3crsC\nMGclCrEMXu6pY5Jv5ZAL/mYiykf9ijH3g/56vxC+GCsej/YpHpRZ744hN8tRmKVu\nSw==\n-----END CERTIFICATE-----\n";

var PKG_NAME = "@hpcc-js/comms";
var PKG_VERSION = "2.97.0";
var BUILD_VERSION = "2.106.11";

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise, SuppressedError, Symbol, Iterator */

var extendStatics = function(d, b) {
  extendStatics = Object.setPrototypeOf ||
      ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
      function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
  return extendStatics(d, b);
};

function __extends(d, b) {
  if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
  extendStatics(d, b);
  function __() { this.constructor = d; }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = function() {
  __assign = Object.assign || function __assign(t) {
      for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
      }
      return t;
  };
  return __assign.apply(this, arguments);
};

function __awaiter(thisArg, _arguments, P, generator) {
  function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
  return new (P || (P = Promise))(function (resolve, reject) {
      function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
      function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
      function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}

function __generator(thisArg, body) {
  var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
  return g.next = verb(0), g["throw"] = verb(1), g["return"] = verb(2), typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
  function verb(n) { return function (v) { return step([n, v]); }; }
  function step(op) {
      if (f) throw new TypeError("Generator is already executing.");
      while (g && (g = 0, op[0] && (_ = 0)), _) try {
          if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
          if (y = 0, t) op = [op[0] & 2, t.value];
          switch (op[0]) {
              case 0: case 1: t = op; break;
              case 4: _.label++; return { value: op[1], done: false };
              case 5: _.label++; y = op[1]; op = [0]; continue;
              case 7: op = _.ops.pop(); _.trys.pop(); continue;
              default:
                  if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                  if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                  if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                  if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                  if (t[2]) _.ops.pop();
                  _.trys.pop(); continue;
          }
          op = body.call(thisArg, _);
      } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
      if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
  }
}

function __spreadArray(to, from, pack) {
  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
      if (ar || !(i in from)) {
          if (!ar) ar = Array.prototype.slice.call(from, 0, i);
          ar[i] = from[i];
      }
  }
  return to.concat(ar || Array.prototype.slice.call(from));
}

typeof SuppressedError === "function" ? SuppressedError : function (error, suppressed, message) {
  var e = new Error(message);
  return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
};

var logger$6 = scopedLogger("comms/connection.ts");
function instanceOfIOptions(object) {
    return "baseUrl" in object;
}
var DefaultOptions = {
    type: "post",
    baseUrl: "",
    userID: "",
    password: "",
    rejectUnauthorized: true,
    timeoutSecs: 60
};
function instanceOfIConnection(object) {
    return typeof object.opts === "function" &&
        typeof object.send === "function" &&
        typeof object.clone === "function";
}
//  comms  ---
function encode(uriComponent, encodeRequest) {
    return (encodeRequest === undefined || encodeRequest === true) ? encodeURIComponent(uriComponent) : "" + uriComponent;
}
function serializeRequest(obj, encodeRequest, prefix) {
    if (encodeRequest === void 0) { encodeRequest = true; }
    if (prefix === void 0) { prefix = ""; }
    if (prefix) {
        prefix += ".";
    }
    if (typeof obj !== "object") {
        return encode(obj, encodeRequest);
    }
    var str = [];
    var _loop_1 = function (key) {
        if (obj.hasOwnProperty(key)) {
            if (obj[key] instanceof Array) {
                //  Specific to ESP - but no REST standard exists...
                var includeItemCount_1 = false;
                obj[key].forEach(function (row, i) {
                    if (typeof row === "object") {
                        includeItemCount_1 = true;
                        str.push(serializeRequest(row, encodeRequest, prefix + encode("".concat(key, ".").concat(i), encodeRequest)));
                    }
                    else {
                        str.push(prefix + encode("".concat(key, "_i").concat(i), encodeRequest) + "=" + serializeRequest(row, encodeRequest));
                    }
                });
                if (includeItemCount_1) {
                    str.push(prefix + encode("".concat(key, ".itemcount"), encodeRequest) + "=" + obj[key].length);
                }
            }
            else if (typeof obj[key] === "object") {
                if (obj[key] && obj[key]["Item"] instanceof Array) { // Specific to ws_machine.GetTargetClusterInfo?
                    str.push(serializeRequest(obj[key]["Item"], encodeRequest, prefix + encode(key, encodeRequest)));
                    str.push(prefix + encode("".concat(key, ".itemcount"), encodeRequest) + "=" + obj[key]["Item"].length);
                }
                else {
                    str.push(serializeRequest(obj[key], encodeRequest, prefix + encode(key, encodeRequest)));
                }
            }
            else if (obj[key] !== undefined) {
                str.push(prefix + encode(key, encodeRequest) + "=" + encode(obj[key], encodeRequest));
            }
            else {
                str.push(prefix + encode(key, encodeRequest));
            }
        }
    };
    for (var key in obj) {
        _loop_1(key);
    }
    return str.join("&");
}
function deserializeResponse(body) {
    return JSON.parse(body);
}
function jsonp(opts, action, request, responseType, header) {
    if (request === void 0) { request = {}; }
    if (responseType === void 0) { responseType = "json"; }
    if (header) {
        console.warn("Header attributes ignored for JSONP connections");
    }
    return new Promise(function (resolve, reject) {
        var respondedTimeout = opts.timeoutSecs * 1000;
        var respondedTick = 5000;
        var callbackName = "jsonp_callback_" + Math.round(Math.random() * 999999);
        window[callbackName] = function (response) {
            respondedTimeout = 0;
            doCallback();
            resolve(responseType === "json" && typeof response === "string" ? deserializeResponse(response) : response);
        };
        var script = document.createElement("script");
        var url = join(opts.baseUrl, action);
        url += url.indexOf("?") >= 0 ? "&" : "?";
        script.src = url + "jsonp=" + callbackName + "&" + serializeRequest(request, opts.encodeRequest);
        document.body.appendChild(script);
        var progress = setInterval(function () {
            if (respondedTimeout <= 0) {
                clearInterval(progress);
            }
            else {
                respondedTimeout -= respondedTick;
                if (respondedTimeout <= 0) {
                    clearInterval(progress);
                    logger$6.error("Request timeout:  " + script.src);
                    doCallback();
                    reject(Error("Request timeout:  " + script.src));
                }
                else {
                    logger$6.debug("Request pending (" + respondedTimeout / 1000 + " sec):  " + script.src);
                }
            }
        }, respondedTick);
        function doCallback() {
            delete window[callbackName];
            document.body.removeChild(script);
        }
    });
}
function authHeader(opts) {
    return opts.userID ? { Authorization: "Basic ".concat(btoa("".concat(opts.userID, ":").concat(opts.password))) } : {};
}
//  _omitMap is a workaround for older HPCC-Platform instances without credentials ---
var _omitMap = {};
function doFetch(opts, action, requestInit, headersInit, responseType) {
    headersInit = __assign(__assign({}, authHeader(opts)), headersInit);
    requestInit = __assign(__assign({ credentials: _omitMap[opts.baseUrl] ? "omit" : "include" }, requestInit), { headers: headersInit });
    if (fetch["__setGlobalDispatcher"]) {
        fetch["__setGlobalDispatcher"](fetch["__defaultAgent"]);
    }
    if (opts.baseUrl.indexOf("https:") === 0) {
        //  NodeJS / node-fetch only  ---
        if (opts.rejectUnauthorized === false && fetch["__rejectUnauthorizedAgent"]) {
            if (fetch["__setGlobalDispatcher"]) {
                fetch["__setGlobalDispatcher"](fetch["__rejectUnauthorizedAgent"]);
            }
            else {
                requestInit["agent"] = fetch["__rejectUnauthorizedAgent"];
            }
        }
        else if (fetch["__trustwaveAgent"]) {
            requestInit["agent"] = fetch["__trustwaveAgent"];
        }
    }
    function handleResponse(response) {
        if (response.ok) {
            return responseType === "json" ? response.json() : response.text();
        }
        throw new Error(response.statusText);
    }
    return promiseTimeout(opts.timeoutSecs * 1000, fetch(join(opts.baseUrl, action), requestInit)
        .then(handleResponse)
        .catch(function (e) {
        //  Try again with the opposite credentials mode  ---
        requestInit.credentials = !_omitMap[opts.baseUrl] ? "omit" : "include";
        return fetch(join(opts.baseUrl, action), requestInit)
            .then(handleResponse)
            .then(function (responseBody) {
            _omitMap[opts.baseUrl] = !_omitMap[opts.baseUrl]; // The "opposite" credentials mode is known to work  ---
            return responseBody;
        });
    }));
}
function post(opts, action, request, responseType, header) {
    if (responseType === void 0) { responseType = "json"; }
    if (request.upload_) {
        delete request.upload_;
        action += "?upload_";
    }
    var abortSignal;
    if (request.abortSignal_) {
        abortSignal = request.abortSignal_;
        delete request.abortSignal_;
    }
    return doFetch(opts, action, {
        method: "post",
        body: serializeRequest(request, opts.encodeRequest),
        signal: abortSignal
    }, __assign({ "Content-Type": "application/x-www-form-urlencoded" }, header), responseType);
}
function get(opts, action, request, responseType, header) {
    if (responseType === void 0) { responseType = "json"; }
    var abortSignal;
    if (request.abortSignal_) {
        abortSignal = request.abortSignal_;
        delete request.abortSignal_;
    }
    return doFetch(opts, "".concat(action, "?").concat(serializeRequest(request, opts.encodeRequest)), {
        method: "get",
        signal: abortSignal
    }, __assign({}, header), responseType);
}
function send(opts, action, request, responseType, header) {
    if (responseType === void 0) { responseType = "json"; }
    var retVal;
    switch (opts.type) {
        case "jsonp":
            retVal = jsonp(opts, action, request, responseType, header);
            break;
        case "get":
            retVal = get(opts, action, request, responseType, header);
            break;
        case "post":
        default:
            retVal = post(opts, action, request, responseType, header);
            break;
    }
    return retVal;
}
var hookedSend = send;
function hookSend(newSend) {
    var retVal = hookedSend;
    if (newSend) {
        hookedSend = newSend;
    }
    return retVal;
}
var Connection = /** @class */ (function () {
    function Connection(opts) {
        this.opts(opts);
    }
    Object.defineProperty(Connection.prototype, "baseUrl", {
        get: function () { return this._opts.baseUrl; },
        enumerable: false,
        configurable: true
    });
    Connection.prototype.opts = function (_) {
        if (arguments.length === 0)
            return this._opts;
        this._opts = __assign(__assign({}, DefaultOptions), _);
        return this;
    };
    Connection.prototype.send = function (action, request, responseType, header) {
        if (responseType === void 0) { responseType = "json"; }
        if (this._opts.hookSend) {
            return this._opts.hookSend(this._opts, action, request, responseType, hookedSend, header);
        }
        return hookedSend(this._opts, action, request, responseType, header);
    };
    Connection.prototype.clone = function () {
        return new Connection(this.opts());
    };
    return Connection;
}());
var createConnection = function (opts) {
    return new Connection(opts);
};
function setTransportFactory(newFunc) {
    var retVal = createConnection;
    createConnection = newFunc;
    return retVal;
}

function isArray(arg) {
    return Object.prototype.toString.call(arg) === "[object Array]";
}
var ESPExceptions = /** @class */ (function (_super) {
    __extends(ESPExceptions, _super);
    function ESPExceptions(action, request, exceptions) {
        var _this = _super.call(this, "ESPException:  " + exceptions.Source) || this;
        _this.isESPExceptions = true;
        _this.action = action;
        _this.request = request;
        _this.Source = exceptions.Source;
        _this.Exception = exceptions.Exception;
        if (exceptions.Exception.length) {
            _this.message = "".concat(exceptions.Exception[0].Code, ":  ").concat(exceptions.Exception[0].Message);
        }
        else {
            _this.message = "";
        }
        return _this;
    }
    return ESPExceptions;
}(Error));
function isExceptions(err) {
    return err instanceof ESPExceptions || (err.isESPExceptions && Array.isArray(err.Exception));
}
function isConnection(optsConnection) {
    return optsConnection.send !== undefined;
}
var ESPConnection = /** @class */ (function () {
    function ESPConnection(optsConnection, service, version) {
        this._connection = isConnection(optsConnection) ? optsConnection : createConnection(optsConnection);
        this._service = service;
        this._version = version;
    }
    Object.defineProperty(ESPConnection.prototype, "baseUrl", {
        get: function () { return this._connection.opts().baseUrl; },
        enumerable: false,
        configurable: true
    });
    ESPConnection.prototype.service = function (_) {
        if (_ === void 0)
            return this._service;
        this._service = _;
        return this;
    };
    ESPConnection.prototype.version = function (_) {
        if (_ === void 0)
            return this._version;
        this._version = _;
        return this;
    };
    ESPConnection.prototype.toESPStringArray = function (target, arrayName) {
        if (isArray(target[arrayName])) {
            for (var i = 0; i < target[arrayName].length; ++i) {
                target[arrayName + "_i" + i] = target[arrayName][i];
            }
            delete target[arrayName];
        }
        return target;
    };
    ESPConnection.prototype.opts = function (_) {
        if (_ === void 0)
            return this._connection.opts();
        this._connection.opts(_);
        return this;
    };
    ESPConnection.prototype.send = function (action, _request, espResponseType, largeUpload, abortSignal, espResponseField) {
        if (_request === void 0) { _request = {}; }
        if (espResponseType === void 0) { espResponseType = "json"; }
        if (largeUpload === void 0) { largeUpload = false; }
        var request = __assign(__assign({}, _request), { ver_: this._version });
        if (largeUpload) {
            request["upload_"] = true;
        }
        if (abortSignal) {
            request["abortSignal_"] = abortSignal;
        }
        var serviceAction;
        var responseType = "json";
        switch (espResponseType) {
            case "text":
                serviceAction = join(this._service, action);
                responseType = "text";
                break;
            case "xsd":
                serviceAction = join(this._service, action + ".xsd");
                responseType = "text";
                break;
            case "json2":
                serviceAction = join(this._service, action + "/json");
                espResponseType = "json";
                var actionParts = action.split("/");
                action = actionParts.pop();
                break;
            default:
                serviceAction = join(this._service, action + ".json");
        }
        return this._connection.send(serviceAction, request, responseType).then(function (response) {
            if (espResponseType === "json") {
                var retVal = void 0;
                if (response && response.Exceptions) {
                    throw new ESPExceptions(action, request, response.Exceptions);
                }
                else if (response) {
                    retVal = response[espResponseField || (action + "Response")];
                }
                if (!retVal) {
                    throw new ESPExceptions(action, request, {
                        Source: "ESPConnection.send",
                        Exception: [{ Code: 0, Message: "Missing Response" }]
                    });
                }
                return retVal;
            }
            return response;
        }).catch(function (e) {
            if (e.isESPExceptions) {
                throw e;
            }
            throw new ESPExceptions(action, request, {
                Source: "ESPConnection.send",
                Exception: [{ Code: 0, Message: e.message }]
            });
        });
    };
    ESPConnection.prototype.clone = function () {
        return new ESPConnection(this._connection.clone(), this._service, this._version);
    };
    return ESPConnection;
}());
var Service = /** @class */ (function () {
    function Service(optsConnection, service, version) {
        this._connection = new ESPConnection(optsConnection, service, version);
    }
    Object.defineProperty(Service.prototype, "baseUrl", {
        get: function () { return this._connection.opts().baseUrl; },
        enumerable: false,
        configurable: true
    });
    return Service;
}());

var FileSpray;
(function (FileSpray) {
    (function (DFUWUActions) {
        DFUWUActions["Delete"] = "Delete";
        DFUWUActions["Protect"] = "Protect";
        DFUWUActions["Unprotect"] = "Unprotect";
        DFUWUActions["Restore"] = "Restore";
        DFUWUActions["SetToFailed"] = "SetToFailed";
        DFUWUActions["Archive"] = "Archive";
    })(FileSpray.DFUWUActions || (FileSpray.DFUWUActions = {}));
})(FileSpray || (FileSpray = {}));
var FileSprayServiceBase = /** @class */ (function (_super) {
    __extends(FileSprayServiceBase, _super);
    function FileSprayServiceBase(optsConnection) {
        return _super.call(this, optsConnection, "FileSpray", "1.26") || this;
    }
    FileSprayServiceBase.prototype.AbortDFUWorkunit = function (request) {
        return this._connection.send("AbortDFUWorkunit", request, "json", false, undefined, "AbortDFUWorkunitResponse");
    };
    FileSprayServiceBase.prototype.Copy = function (request) {
        return this._connection.send("Copy", request, "json", false, undefined, "CopyResponse");
    };
    FileSprayServiceBase.prototype.CreateDFUPublisherWorkunit = function (request) {
        return this._connection.send("CreateDFUPublisherWorkunit", request, "json", false, undefined, "CreateDFUPublisherWorkunitResponse");
    };
    FileSprayServiceBase.prototype.CreateDFUWorkunit = function (request) {
        return this._connection.send("CreateDFUWorkunit", request, "json", false, undefined, "CreateDFUWorkunitResponse");
    };
    FileSprayServiceBase.prototype.DFUWUFile = function (request) {
        return this._connection.send("DFUWUFile", request, "json", false, undefined, "DFUWUFileResponse");
    };
    FileSprayServiceBase.prototype.DFUWUSearch = function (request) {
        return this._connection.send("DFUWUSearch", request, "json", false, undefined, "DFUWUSearchResponse");
    };
    FileSprayServiceBase.prototype.DFUWorkunitsAction = function (request) {
        return this._connection.send("DFUWorkunitsAction", request, "json", false, undefined, "DFUWorkunitsActionResponse");
    };
    FileSprayServiceBase.prototype.DeleteDFUWorkunit = function (request) {
        return this._connection.send("DeleteDFUWorkunit", request, "json", false, undefined, "DeleteDFUWorkunitResponse");
    };
    FileSprayServiceBase.prototype.DeleteDFUWorkunits = function (request) {
        return this._connection.send("DeleteDFUWorkunits", request, "json", false, undefined, "DeleteDFUWorkunitsResponse");
    };
    FileSprayServiceBase.prototype.DeleteDropZoneFiles = function (request) {
        return this._connection.send("DeleteDropZoneFiles", request, "json", false, undefined, "DFUWorkunitsActionResponse");
    };
    FileSprayServiceBase.prototype.Despray = function (request) {
        return this._connection.send("Despray", request, "json", false, undefined, "DesprayResponse");
    };
    FileSprayServiceBase.prototype.DfuMonitor = function (request) {
        return this._connection.send("DfuMonitor", request, "json", false, undefined, "DfuMonitorResponse");
    };
    FileSprayServiceBase.prototype.DropZoneFileSearch = function (request) {
        return this._connection.send("DropZoneFileSearch", request, "json", false, undefined, "DropZoneFileSearchResponse");
    };
    FileSprayServiceBase.prototype.DropZoneFiles = function (request) {
        return this._connection.send("DropZoneFiles", request, "json", false, undefined, "DropZoneFilesResponse");
    };
    FileSprayServiceBase.prototype.EchoDateTime = function (request) {
        return this._connection.send("EchoDateTime", request, "json", false, undefined, "EchoDateTimeResponse");
    };
    FileSprayServiceBase.prototype.FileList = function (request) {
        return this._connection.send("FileList", request, "json", false, undefined, "FileListResponse");
    };
    FileSprayServiceBase.prototype.GetDFUExceptions = function (request) {
        return this._connection.send("GetDFUExceptions", request, "json", false, undefined, "GetDFUExceptionsResponse");
    };
    FileSprayServiceBase.prototype.GetDFUProgress = function (request) {
        return this._connection.send("GetDFUProgress", request, "json", false, undefined, "ProgressResponse");
    };
    FileSprayServiceBase.prototype.GetDFUServerQueues = function (request) {
        return this._connection.send("GetDFUServerQueues", request, "json", false, undefined, "GetDFUServerQueuesResponse");
    };
    FileSprayServiceBase.prototype.GetDFUWorkunit = function (request) {
        return this._connection.send("GetDFUWorkunit", request, "json", false, undefined, "GetDFUWorkunitResponse");
    };
    FileSprayServiceBase.prototype.GetDFUWorkunits = function (request) {
        return this._connection.send("GetDFUWorkunits", request, "json", false, undefined, "GetDFUWorkunitsResponse");
    };
    FileSprayServiceBase.prototype.GetRemoteTargets = function (request) {
        return this._connection.send("GetRemoteTargets", request, "json", false, undefined, "GetRemoteTargetsResponse");
    };
    FileSprayServiceBase.prototype.GetSprayTargets = function (request) {
        return this._connection.send("GetSprayTargets", request, "json", false, undefined, "GetSprayTargetsResponse");
    };
    FileSprayServiceBase.prototype.OpenSave = function (request) {
        return this._connection.send("OpenSave", request, "json", false, undefined, "OpenSaveResponse");
    };
    FileSprayServiceBase.prototype.Ping = function (request) {
        return this._connection.send("Ping", request, "json", false, undefined, "FileSprayPingResponse");
    };
    FileSprayServiceBase.prototype.Rename = function (request) {
        return this._connection.send("Rename", request, "json", false, undefined, "RenameResponse");
    };
    FileSprayServiceBase.prototype.Replicate = function (request) {
        return this._connection.send("Replicate", request, "json", false, undefined, "ReplicateResponse");
    };
    FileSprayServiceBase.prototype.ShowResult = function (request) {
        return this._connection.send("ShowResult", request, "json", false, undefined, "ShowResultResponse");
    };
    FileSprayServiceBase.prototype.SprayFixed = function (request) {
        return this._connection.send("SprayFixed", request, "json", false, undefined, "SprayFixedResponse");
    };
    FileSprayServiceBase.prototype.SprayVariable = function (request) {
        return this._connection.send("SprayVariable", request, "json", false, undefined, "SprayResponse");
    };
    FileSprayServiceBase.prototype.SubmitDFUWorkunit = function (request) {
        return this._connection.send("SubmitDFUWorkunit", request, "json", false, undefined, "SubmitDFUWorkunitResponse");
    };
    FileSprayServiceBase.prototype.UpdateDFUWorkunit = function (request) {
        return this._connection.send("UpdateDFUWorkunit", request, "json", false, undefined, "UpdateDFUWorkunitResponse");
    };
    return FileSprayServiceBase;
}(Service));

var FileSprayStates;
(function (FileSprayStates) {
    FileSprayStates[FileSprayStates["unknown"] = 0] = "unknown";
    FileSprayStates[FileSprayStates["scheduled"] = 1] = "scheduled";
    FileSprayStates[FileSprayStates["queued"] = 2] = "queued";
    FileSprayStates[FileSprayStates["started"] = 3] = "started";
    FileSprayStates[FileSprayStates["aborted"] = 4] = "aborted";
    FileSprayStates[FileSprayStates["failed"] = 5] = "failed";
    FileSprayStates[FileSprayStates["finished"] = 6] = "finished";
    FileSprayStates[FileSprayStates["monitoring"] = 7] = "monitoring";
    FileSprayStates[FileSprayStates["aborting"] = 8] = "aborting";
    FileSprayStates[FileSprayStates["notfound"] = 999] = "notfound";
})(FileSprayStates || (FileSprayStates = {}));
var FileSprayService = /** @class */ (function (_super) {
    __extends(FileSprayService, _super);
    function FileSprayService() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    FileSprayService.prototype.DFUWUFileEx = function (request) {
        return this._connection.send("DFUWUFile", request, "text");
    };
    FileSprayService.prototype.SprayFixedEx = function (request) {
        return this._connection.send("SprayFixed", request);
    };
    FileSprayService.prototype.SprayVariableEx = function (request) {
        return this._connection.send("SprayVariable", request, "json", false, null, "SprayResponse");
    };
    FileSprayService.prototype.DesprayEx = function (request) {
        return this._connection.send("Despray", request);
    };
    FileSprayService.prototype.UpdateDFUWorkunitEx = function (request) {
        return this._connection.send("UpdateDFUWorkunit", request, "json", false, undefined, "UpdateDFUWorkunitResponse");
    };
    return FileSprayService;
}(FileSprayServiceBase));

var WsAccess;
(function (WsAccess) {
    (function (ViewMemberType) {
        ViewMemberType["User"] = "User";
        ViewMemberType["Group"] = "Group";
    })(WsAccess.ViewMemberType || (WsAccess.ViewMemberType = {}));
    (function (UserSortBy) {
        UserSortBy["username"] = "username";
        UserSortBy["fullname"] = "fullname";
        UserSortBy["passwordexpiration"] = "passwordexpiration";
        UserSortBy["employeeID"] = "employeeID";
        UserSortBy["employeeNumber"] = "employeeNumber";
    })(WsAccess.UserSortBy || (WsAccess.UserSortBy = {}));
    (function (GroupSortBy) {
        GroupSortBy["Name"] = "Name";
        GroupSortBy["ManagedBy"] = "ManagedBy";
    })(WsAccess.GroupSortBy || (WsAccess.GroupSortBy = {}));
    (function (AccountTypeReq) {
        AccountTypeReq["Any"] = "Any";
        AccountTypeReq["User"] = "User";
        AccountTypeReq["Group"] = "Group";
    })(WsAccess.AccountTypeReq || (WsAccess.AccountTypeReq = {}));
    (function (ResourcePermissionSortBy) {
        ResourcePermissionSortBy["Name"] = "Name";
        ResourcePermissionSortBy["Type"] = "Type";
    })(WsAccess.ResourcePermissionSortBy || (WsAccess.ResourcePermissionSortBy = {}));
    (function (ResourceSortBy) {
        ResourceSortBy["Name"] = "Name";
    })(WsAccess.ResourceSortBy || (WsAccess.ResourceSortBy = {}));
})(WsAccess || (WsAccess = {}));
var AccessServiceBase = /** @class */ (function (_super) {
    __extends(AccessServiceBase, _super);
    function AccessServiceBase(optsConnection) {
        return _super.call(this, optsConnection, "ws_access", "1.17") || this;
    }
    AccessServiceBase.prototype.AccountPermissions = function (request) {
        return this._connection.send("AccountPermissions", request, "json", false, undefined, "AccountPermissionsResponse");
    };
    AccessServiceBase.prototype.AccountPermissionsV2 = function (request) {
        return this._connection.send("AccountPermissionsV2", request, "json", false, undefined, "AccountPermissionsV2Response");
    };
    AccessServiceBase.prototype.AddUser = function (request) {
        return this._connection.send("AddUser", request, "json", false, undefined, "AddUserResponse");
    };
    AccessServiceBase.prototype.AddView = function (request) {
        return this._connection.send("AddView", request, "json", false, undefined, "AddViewResponse");
    };
    AccessServiceBase.prototype.AddViewColumn = function (request) {
        return this._connection.send("AddViewColumn", request, "json", false, undefined, "AddViewColumnResponse");
    };
    AccessServiceBase.prototype.AddViewMember = function (request) {
        return this._connection.send("AddViewMember", request, "json", false, undefined, "AddViewMemberResponse");
    };
    AccessServiceBase.prototype.ClearPermissionsCache = function (request) {
        return this._connection.send("ClearPermissionsCache", request, "json", false, undefined, "ClearPermissionsCacheResponse");
    };
    AccessServiceBase.prototype.DeleteView = function (request) {
        return this._connection.send("DeleteView", request, "json", false, undefined, "DeleteViewResponse");
    };
    AccessServiceBase.prototype.DeleteViewColumn = function (request) {
        return this._connection.send("DeleteViewColumn", request, "json", false, undefined, "DeleteViewColumnResponse");
    };
    AccessServiceBase.prototype.DeleteViewMember = function (request) {
        return this._connection.send("DeleteViewMember", request, "json", false, undefined, "DeleteViewMemberResponse");
    };
    AccessServiceBase.prototype.DisableScopeScans = function (request) {
        return this._connection.send("DisableScopeScans", request, "json", false, undefined, "DisableScopeScansResponse");
    };
    AccessServiceBase.prototype.EnableScopeScans = function (request) {
        return this._connection.send("EnableScopeScans", request, "json", false, undefined, "EnableScopeScansResponse");
    };
    AccessServiceBase.prototype.FilePermission = function (request) {
        return this._connection.send("FilePermission", request, "json", false, undefined, "FilePermissionResponse");
    };
    AccessServiceBase.prototype.GroupAction = function (request) {
        return this._connection.send("GroupAction", request, "json", false, undefined, "GroupActionResponse");
    };
    AccessServiceBase.prototype.GroupAdd = function (request) {
        return this._connection.send("GroupAdd", request, "json", false, undefined, "GroupAddResponse");
    };
    AccessServiceBase.prototype.GroupEdit = function (request) {
        return this._connection.send("GroupEdit", request, "json", false, undefined, "GroupEditResponse");
    };
    AccessServiceBase.prototype.GroupMemberEdit = function (request) {
        return this._connection.send("GroupMemberEdit", request, "json", false, undefined, "GroupMemberEditResponse");
    };
    AccessServiceBase.prototype.GroupMemberEditInput = function (request) {
        return this._connection.send("GroupMemberEditInput", request, "json", false, undefined, "GroupMemberEditInputResponse");
    };
    AccessServiceBase.prototype.GroupMemberQuery = function (request) {
        return this._connection.send("GroupMemberQuery", request, "json", false, undefined, "GroupMemberQueryResponse");
    };
    AccessServiceBase.prototype.GroupQuery = function (request) {
        return this._connection.send("GroupQuery", request, "json", false, undefined, "GroupQueryResponse");
    };
    AccessServiceBase.prototype.Groups = function (request) {
        return this._connection.send("Groups", request, "json", false, undefined, "GroupResponse");
    };
    AccessServiceBase.prototype.PermissionAction = function (request) {
        return this._connection.send("PermissionAction", request, "json", false, undefined, "PermissionActionResponse");
    };
    AccessServiceBase.prototype.Permissions = function (request) {
        return this._connection.send("Permissions", request, "json", false, undefined, "BasednsResponse");
    };
    AccessServiceBase.prototype.PermissionsReset = function (request) {
        return this._connection.send("PermissionsReset", request, "json", false, undefined, "PermissionsResetResponse");
    };
    AccessServiceBase.prototype.Ping = function (request) {
        return this._connection.send("Ping", request, "json", false, undefined, "ws_accessPingResponse");
    };
    AccessServiceBase.prototype.QueryScopeScansEnabled = function (request) {
        return this._connection.send("QueryScopeScansEnabled", request, "json", false, undefined, "QueryScopeScansEnabledResponse");
    };
    AccessServiceBase.prototype.QueryUserViewColumns = function (request) {
        return this._connection.send("QueryUserViewColumns", request, "json", false, undefined, "QueryUserViewColumnsResponse");
    };
    AccessServiceBase.prototype.QueryViewColumns = function (request) {
        return this._connection.send("QueryViewColumns", request, "json", false, undefined, "QueryViewColumnsResponse");
    };
    AccessServiceBase.prototype.QueryViewMembers = function (request) {
        return this._connection.send("QueryViewMembers", request, "json", false, undefined, "QueryViewMembersResponse");
    };
    AccessServiceBase.prototype.QueryViews = function (request) {
        return this._connection.send("QueryViews", request, "json", false, undefined, "QueryViewsResponse");
    };
    AccessServiceBase.prototype.ResourceAdd = function (request) {
        return this._connection.send("ResourceAdd", request, "json", false, undefined, "ResourceAddResponse");
    };
    AccessServiceBase.prototype.ResourceDelete = function (request) {
        return this._connection.send("ResourceDelete", request, "json", false, undefined, "ResourceDeleteResponse");
    };
    AccessServiceBase.prototype.ResourcePermissionQuery = function (request) {
        return this._connection.send("ResourcePermissionQuery", request, "json", false, undefined, "ResourcePermissionQueryResponse");
    };
    AccessServiceBase.prototype.ResourcePermissions = function (request) {
        return this._connection.send("ResourcePermissions", request, "json", false, undefined, "ResourcePermissionsResponse");
    };
    AccessServiceBase.prototype.ResourceQuery = function (request) {
        return this._connection.send("ResourceQuery", request, "json", false, undefined, "ResourceQueryResponse");
    };
    AccessServiceBase.prototype.Resources = function (request) {
        return this._connection.send("Resources", request, "json", false, undefined, "ResourcesResponse");
    };
    AccessServiceBase.prototype.UserAccountExport = function (request) {
        return this._connection.send("UserAccountExport", request, "json", false, undefined, "UserAccountExportResponse");
    };
    AccessServiceBase.prototype.UserAction = function (request) {
        return this._connection.send("UserAction", request, "json", false, undefined, "UserActionResponse");
    };
    AccessServiceBase.prototype.UserEdit = function (request) {
        return this._connection.send("UserEdit", request, "json", false, undefined, "UserEditResponse");
    };
    AccessServiceBase.prototype.UserGroupEdit = function (request) {
        return this._connection.send("UserGroupEdit", request, "json", false, undefined, "UserGroupEditResponse");
    };
    AccessServiceBase.prototype.UserGroupEditInput = function (request) {
        return this._connection.send("UserGroupEditInput", request, "json", false, undefined, "UserGroupEditInputResponse");
    };
    AccessServiceBase.prototype.UserInfoEdit = function (request) {
        return this._connection.send("UserInfoEdit", request, "json", false, undefined, "UserInfoEditResponse");
    };
    AccessServiceBase.prototype.UserInfoEditInput = function (request) {
        return this._connection.send("UserInfoEditInput", request, "json", false, undefined, "UserInfoEditInputResponse");
    };
    AccessServiceBase.prototype.UserPosix = function (request) {
        return this._connection.send("UserPosix", request, "json", false, undefined, "UserPosixResponse");
    };
    AccessServiceBase.prototype.UserPosixInput = function (request) {
        return this._connection.send("UserPosixInput", request, "json", false, undefined, "UserPosixInputResponse");
    };
    AccessServiceBase.prototype.UserQuery = function (request) {
        return this._connection.send("UserQuery", request, "json", false, undefined, "UserQueryResponse");
    };
    AccessServiceBase.prototype.UserResetPass = function (request) {
        return this._connection.send("UserResetPass", request, "json", false, undefined, "UserResetPassResponse");
    };
    AccessServiceBase.prototype.UserResetPassInput = function (request) {
        return this._connection.send("UserResetPassInput", request, "json", false, undefined, "UserResetPassInputResponse");
    };
    AccessServiceBase.prototype.UserSudoers = function (request) {
        return this._connection.send("UserSudoers", request, "json", false, undefined, "UserSudoersResponse");
    };
    AccessServiceBase.prototype.UserSudoersInput = function (request) {
        return this._connection.send("UserSudoersInput", request, "json", false, undefined, "UserSudoersInputResponse");
    };
    AccessServiceBase.prototype.Users = function (request) {
        return this._connection.send("Users", request, "json", false, undefined, "UserResponse");
    };
    return AccessServiceBase;
}(Service));

var AccessService = /** @class */ (function (_super) {
    __extends(AccessService, _super);
    function AccessService() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return AccessService;
}(AccessServiceBase));

var AccountServiceBase = /** @class */ (function (_super) {
    __extends(AccountServiceBase, _super);
    function AccountServiceBase(optsConnection) {
        return _super.call(this, optsConnection, "ws_account", "1.06") || this;
    }
    AccountServiceBase.prototype.MyAccount = function (request) {
        return this._connection.send("MyAccount", request, "json", false, undefined, "MyAccountResponse");
    };
    AccountServiceBase.prototype.Ping = function (request) {
        return this._connection.send("Ping", request, "json", false, undefined, "ws_accountPingResponse");
    };
    AccountServiceBase.prototype.UpdateUser = function (request) {
        return this._connection.send("UpdateUser", request, "json", false, undefined, "UpdateUserResponse");
    };
    AccountServiceBase.prototype.UpdateUserInput = function (request) {
        return this._connection.send("UpdateUserInput", request, "json", false, undefined, "UpdateUserInputResponse");
    };
    AccountServiceBase.prototype.VerifyUser = function (request) {
        return this._connection.send("VerifyUser", request, "json", false, undefined, "VerifyUserResponse");
    };
    return AccountServiceBase;
}(Service));

var AccountService = /** @class */ (function (_super) {
    __extends(AccountService, _super);
    function AccountService() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AccountService.prototype.VerifyUser = function (request) {
        return this._connection.send("VerifyUser", request)
            .catch(function (e) {
            //  old client version warning  ---
            if (e.isESPExceptions && e.Exception.some(function (exception) { return exception.Code === 20043; })) {
                return {
                    retcode: 20043,
                    Exceptions: {
                        Source: "wsAccount",
                        Exception: e.Exception
                    }
                };
            }
            throw e;
        });
    };
    return AccountService;
}(AccountServiceBase));

var CloudServiceBase = /** @class */ (function (_super) {
    __extends(CloudServiceBase, _super);
    function CloudServiceBase(optsConnection) {
        return _super.call(this, optsConnection, "WsCloud", "1") || this;
    }
    CloudServiceBase.prototype.GetPODs = function (request) {
        return this._connection.send("GetPODs", request);
    };
    CloudServiceBase.prototype.Ping = function (request) {
        return this._connection.send("Ping", request);
    };
    return CloudServiceBase;
}(Service));

var CloudService = /** @class */ (function (_super) {
    __extends(CloudService, _super);
    function CloudService() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CloudService.prototype.getPODs = function () {
        return _super.prototype.GetPODs.call(this, {}).then(function (response) {
            var _a;
            try {
                var obj = typeof response.Result === "string" ? JSON.parse(response.Result) : response.Result;
                return (_a = obj === null || obj === void 0 ? void 0 : obj.items) !== null && _a !== void 0 ? _a : [];
            }
            catch (error) {
                return [];
            }
        });
    };
    return CloudService;
}(CloudServiceBase));

var CodesignService = /** @class */ (function () {
    function CodesignService(optsConnection) {
        this._connection = new ESPConnection(optsConnection, "ws_codesign", "1.1");
    }
    CodesignService.prototype.connectionOptions = function () {
        return this._connection.opts();
    };
    CodesignService.prototype.ListUserIDs = function (request) {
        return this._connection.send("ListUserIDs", request).then(function (response) {
            return response.UserIDs.Item;
        }).catch(function (e) {
            return [];
        });
    };
    CodesignService.prototype.Sign = function (request) {
        return this._connection.send("Sign", __assign({ SigningMethod: "gpg" }, request));
    };
    CodesignService.prototype.Verify = function (request) {
        return this._connection.send("Verify", request);
    };
    return CodesignService;
}());

var DaliServiceBase = /** @class */ (function (_super) {
    __extends(DaliServiceBase, _super);
    function DaliServiceBase(optsConnection) {
        return _super.call(this, optsConnection, "WSDali", "1.07") || this;
    }
    DaliServiceBase.prototype.Add = function (request) {
        return this._connection.send("Add", request, "json", false, undefined, "ResultResponse");
    };
    DaliServiceBase.prototype.ClearTraceTransactions = function (request) {
        return this._connection.send("ClearTraceTransactions", request, "json", false, undefined, "ResultResponse");
    };
    DaliServiceBase.prototype.Count = function (request) {
        return this._connection.send("Count", request, "json", false, undefined, "CountResponse");
    };
    DaliServiceBase.prototype.DFSCheck = function (request) {
        return this._connection.send("DFSCheck", request, "json", false, undefined, "ResultResponse");
    };
    DaliServiceBase.prototype.DFSExists = function (request) {
        return this._connection.send("DFSExists", request, "json", false, undefined, "BooleanResponse");
    };
    DaliServiceBase.prototype.DFSLS = function (request) {
        return this._connection.send("DFSLS", request, "json", false, undefined, "ResultResponse");
    };
    DaliServiceBase.prototype.Delete = function (request) {
        return this._connection.send("Delete", request, "json", false, undefined, "ResultResponse");
    };
    DaliServiceBase.prototype.DisconnectClientConnection = function (request) {
        return this._connection.send("DisconnectClientConnection", request, "json", false, undefined, "ResultResponse");
    };
    DaliServiceBase.prototype.GetClients = function (request) {
        return this._connection.send("GetClients", request, "json", false, undefined, "ResultResponse");
    };
    DaliServiceBase.prototype.GetConnections = function (request) {
        return this._connection.send("GetConnections", request, "json", false, undefined, "ResultResponse");
    };
    DaliServiceBase.prototype.GetDFSCSV = function (request) {
        return this._connection.send("GetDFSCSV", request, "json", false, undefined, "ResultResponse");
    };
    DaliServiceBase.prototype.GetDFSMap = function (request) {
        return this._connection.send("GetDFSMap", request, "json", false, undefined, "ResultResponse");
    };
    DaliServiceBase.prototype.GetDFSParents = function (request) {
        return this._connection.send("GetDFSParents", request, "json", false, undefined, "ResultResponse");
    };
    DaliServiceBase.prototype.GetLogicalFile = function (request) {
        return this._connection.send("GetLogicalFile", request, "json", false, undefined, "ResultResponse");
    };
    DaliServiceBase.prototype.GetLogicalFilePart = function (request) {
        return this._connection.send("GetLogicalFilePart", request, "json", false, undefined, "ResultResponse");
    };
    DaliServiceBase.prototype.GetProtectedList = function (request) {
        return this._connection.send("GetProtectedList", request, "json", false, undefined, "ResultResponse");
    };
    DaliServiceBase.prototype.GetSDSStats = function (request) {
        return this._connection.send("GetSDSStats", request, "json", false, undefined, "ResultResponse");
    };
    DaliServiceBase.prototype.GetSDSSubscribers = function (request) {
        return this._connection.send("GetSDSSubscribers", request, "json", false, undefined, "ResultResponse");
    };
    DaliServiceBase.prototype.GetValue = function (request) {
        return this._connection.send("GetValue", request, "json", false, undefined, "ResultResponse");
    };
    DaliServiceBase.prototype.Import = function (request) {
        return this._connection.send("Import", request, "json", false, undefined, "ResultResponse");
    };
    DaliServiceBase.prototype.ListSDSLocks = function (request) {
        return this._connection.send("ListSDSLocks", request, "json", false, undefined, "ResultResponse");
    };
    DaliServiceBase.prototype.Ping = function (request) {
        return this._connection.send("Ping", request, "json", false, undefined, "WSDaliPingResponse");
    };
    DaliServiceBase.prototype.SaveSDSStore = function (request) {
        return this._connection.send("SaveSDSStore", request, "json", false, undefined, "ResultResponse");
    };
    DaliServiceBase.prototype.SetLogicalFilePartAttr = function (request) {
        return this._connection.send("SetLogicalFilePartAttr", request, "json", false, undefined, "ResultResponse");
    };
    DaliServiceBase.prototype.SetProtected = function (request) {
        return this._connection.send("SetProtected", request, "json", false, undefined, "ResultResponse");
    };
    DaliServiceBase.prototype.SetTraceSlowTransactions = function (request) {
        return this._connection.send("SetTraceSlowTransactions", request, "json", false, undefined, "ResultResponse");
    };
    DaliServiceBase.prototype.SetTraceTransactions = function (request) {
        return this._connection.send("SetTraceTransactions", request, "json", false, undefined, "ResultResponse");
    };
    DaliServiceBase.prototype.SetUnprotected = function (request) {
        return this._connection.send("SetUnprotected", request, "json", false, undefined, "ResultResponse");
    };
    DaliServiceBase.prototype.SetValue = function (request) {
        return this._connection.send("SetValue", request, "json", false, undefined, "ResultResponse");
    };
    DaliServiceBase.prototype.UnlockSDSLock = function (request) {
        return this._connection.send("UnlockSDSLock", request, "json", false, undefined, "ResultResponse");
    };
    return DaliServiceBase;
}(Service));

var DaliService = /** @class */ (function (_super) {
    __extends(DaliService, _super);
    function DaliService() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return DaliService;
}(DaliServiceBase));

var WsDfu;
(function (WsDfu) {
    (function (DFUArrayActions) {
        DFUArrayActions["Delete"] = "Delete";
        DFUArrayActions["AddToSuperfile"] = "Add To Superfile";
        DFUArrayActions["ChangeProtection"] = "Change Protection";
        DFUArrayActions["ChangeRestriction"] = "Change Restriction";
    })(WsDfu.DFUArrayActions || (WsDfu.DFUArrayActions = {}));
    (function (DFUChangeProtection) {
        DFUChangeProtection[DFUChangeProtection["NoChange"] = 0] = "NoChange";
        DFUChangeProtection[DFUChangeProtection["Protect"] = 1] = "Protect";
        DFUChangeProtection[DFUChangeProtection["Unprotect"] = 2] = "Unprotect";
        DFUChangeProtection[DFUChangeProtection["UnprotectAll"] = 3] = "UnprotectAll";
    })(WsDfu.DFUChangeProtection || (WsDfu.DFUChangeProtection = {}));
    (function (DFUChangeRestriction) {
        DFUChangeRestriction[DFUChangeRestriction["NoChange"] = 0] = "NoChange";
        DFUChangeRestriction[DFUChangeRestriction["Restrict"] = 1] = "Restrict";
        DFUChangeRestriction[DFUChangeRestriction["Unrestricted"] = 2] = "Unrestricted";
    })(WsDfu.DFUChangeRestriction || (WsDfu.DFUChangeRestriction = {}));
    (function (DFUDefFileFormat) {
        DFUDefFileFormat["xml"] = "xml";
        DFUDefFileFormat["def"] = "def";
    })(WsDfu.DFUDefFileFormat || (WsDfu.DFUDefFileFormat = {}));
    (function (FileAccessRole) {
        FileAccessRole["Token"] = "Token";
        FileAccessRole["Engine"] = "Engine";
        FileAccessRole["External"] = "External";
    })(WsDfu.FileAccessRole || (WsDfu.FileAccessRole = {}));
    (function (SecAccessType) {
        SecAccessType["None"] = "None";
        SecAccessType["Access"] = "Access";
        SecAccessType["Read"] = "Read";
        SecAccessType["Write"] = "Write";
        SecAccessType["Full"] = "Full";
    })(WsDfu.SecAccessType || (WsDfu.SecAccessType = {}));
    (function (DFUFileType) {
        DFUFileType["Flat"] = "Flat";
        DFUFileType["Index"] = "Index";
        DFUFileType["Xml"] = "Xml";
        DFUFileType["Csv"] = "Csv";
        DFUFileType["Json"] = "Json";
        DFUFileType["IndexLocal"] = "IndexLocal";
        DFUFileType["IndexPartitioned"] = "IndexPartitioned";
        DFUFileType["Unset"] = "Unset";
    })(WsDfu.DFUFileType || (WsDfu.DFUFileType = {}));
})(WsDfu || (WsDfu = {}));
var DfuServiceBase = /** @class */ (function (_super) {
    __extends(DfuServiceBase, _super);
    function DfuServiceBase(optsConnection) {
        return _super.call(this, optsConnection, "WsDfu", "1.65") || this;
    }
    DfuServiceBase.prototype.Add = function (request) {
        return this._connection.send("Add", request, "json", false, undefined, "AddResponse");
    };
    DfuServiceBase.prototype.AddRemote = function (request) {
        return this._connection.send("AddRemote", request, "json", false, undefined, "AddRemoteResponse");
    };
    DfuServiceBase.prototype.AddtoSuperfile = function (request) {
        return this._connection.send("AddtoSuperfile", request, "json", false, undefined, "AddtoSuperfileResponse");
    };
    DfuServiceBase.prototype.DFUArrayAction = function (request) {
        return this._connection.send("DFUArrayAction", request, "json", false, undefined, "DFUArrayActionResponse");
    };
    DfuServiceBase.prototype.DFUBrowseData = function (request) {
        return this._connection.send("DFUBrowseData", request, "json", false, undefined, "DFUBrowseDataResponse");
    };
    DfuServiceBase.prototype.DFUDefFile = function (request) {
        return this._connection.send("DFUDefFile", request, "json", false, undefined, "DFUDefFileResponse");
    };
    DfuServiceBase.prototype.DFUFileAccess = function (request) {
        return this._connection.send("DFUFileAccess", request, "json", false, undefined, "DFUFileAccessResponse");
    };
    DfuServiceBase.prototype.DFUFileAccessV2 = function (request) {
        return this._connection.send("DFUFileAccessV2", request, "json", false, undefined, "DFUFileAccessResponse");
    };
    DfuServiceBase.prototype.DFUFileCreate = function (request) {
        return this._connection.send("DFUFileCreate", request, "json", false, undefined, "DFUFileCreateResponse");
    };
    DfuServiceBase.prototype.DFUFileCreateV2 = function (request) {
        return this._connection.send("DFUFileCreateV2", request, "json", false, undefined, "DFUFileCreateResponse");
    };
    DfuServiceBase.prototype.DFUFilePublish = function (request) {
        return this._connection.send("DFUFilePublish", request, "json", false, undefined, "DFUFilePublishResponse");
    };
    DfuServiceBase.prototype.DFUFileView = function (request) {
        return this._connection.send("DFUFileView", request, "json", false, undefined, "DFUFileViewResponse");
    };
    DfuServiceBase.prototype.DFUGetDataColumns = function (request) {
        return this._connection.send("DFUGetDataColumns", request, "json", false, undefined, "DFUGetDataColumnsResponse");
    };
    DfuServiceBase.prototype.DFUGetFileMetaData = function (request) {
        return this._connection.send("DFUGetFileMetaData", request, "json", false, undefined, "DFUGetFileMetaDataResponse");
    };
    DfuServiceBase.prototype.DFUInfo = function (request) {
        return this._connection.send("DFUInfo", request, "json", false, undefined, "DFUInfoResponse");
    };
    DfuServiceBase.prototype.DFUQuery = function (request) {
        return this._connection.send("DFUQuery", request, "json", false, undefined, "DFUQueryResponse");
    };
    DfuServiceBase.prototype.DFURecordTypeInfo = function (request) {
        return this._connection.send("DFURecordTypeInfo", request, "json", false, undefined, "DFURecordTypeInfoResponse");
    };
    DfuServiceBase.prototype.DFUSearch = function (request) {
        return this._connection.send("DFUSearch", request, "json", false, undefined, "DFUSearchResponse");
    };
    DfuServiceBase.prototype.DFUSearchData = function (request) {
        return this._connection.send("DFUSearchData", request, "json", false, undefined, "DFUSearchDataResponse");
    };
    DfuServiceBase.prototype.DFUSpace = function (request) {
        return this._connection.send("DFUSpace", request, "json", false, undefined, "DFUSpaceResponse");
    };
    DfuServiceBase.prototype.EclRecordTypeInfo = function (request) {
        return this._connection.send("EclRecordTypeInfo", request, "json", false, undefined, "EclRecordTypeInfoResponse");
    };
    DfuServiceBase.prototype.EraseHistory = function (request) {
        return this._connection.send("EraseHistory", request, "json", false, undefined, "EraseHistoryResponse");
    };
    DfuServiceBase.prototype.ListHistory = function (request) {
        return this._connection.send("ListHistory", request, "json", false, undefined, "ListHistoryResponse");
    };
    DfuServiceBase.prototype.Ping = function (request) {
        return this._connection.send("Ping", request, "json", false, undefined, "WsDfuPingResponse");
    };
    DfuServiceBase.prototype.Savexml = function (request) {
        return this._connection.send("Savexml", request, "json", false, undefined, "SavexmlResponse");
    };
    DfuServiceBase.prototype.SuperfileAction = function (request) {
        return this._connection.send("SuperfileAction", request, "json", false, undefined, "SuperfileActionResponse");
    };
    DfuServiceBase.prototype.SuperfileList = function (request) {
        return this._connection.send("SuperfileList", request, "json", false, undefined, "SuperfileListResponse");
    };
    return DfuServiceBase;
}(Service));

var DFUArrayActions = WsDfu.DFUArrayActions;
var DFUDefFileFormat = WsDfu.DFUDefFileFormat;
var DFUChangeProtection = WsDfu.DFUChangeProtection;
var DFUChangeRestriction = WsDfu.DFUChangeRestriction;
var DFUService = /** @class */ (function (_super) {
    __extends(DFUService, _super);
    function DFUService() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DFUService.prototype.DFUFile = function (request) {
        return this._connection.send("DFUDefFile", request, "text");
    };
    return DFUService;
}(DfuServiceBase));

var DFUXRefService = /** @class */ (function (_super) {
    __extends(DFUXRefService, _super);
    function DFUXRefService(optsConnection) {
        return _super.call(this, optsConnection, "WsDFUXRef", "1.01") || this;
    }
    DFUXRefService.prototype.DFUXRefArrayAction = function (request) {
        return this._connection.send("DFUXRefArrayAction", request);
    };
    DFUXRefService.prototype.DFUXRefBuild = function (request) {
        return this._connection.send("DFUXRefBuild", request);
    };
    DFUXRefService.prototype.DFUXRefBuildCancel = function (request) {
        return this._connection.send("DFUXRefBuildCancel", request);
    };
    DFUXRefService.prototype.DFUXRefCleanDirectories = function (request) {
        return this._connection.send("DFUXRefCleanDirectories", request);
    };
    DFUXRefService.prototype.DFUXRefDirectories = function (request) {
        return this._connection.send("DFUXRefDirectories", request, undefined, undefined, undefined, "DFUXRefDirectoriesQueryResponse");
    };
    DFUXRefService.prototype.DFUXRefFoundFiles = function (request) {
        return this._connection.send("DFUXRefFoundFiles", request, undefined, undefined, undefined, "DFUXRefFoundFilesQueryResponse");
    };
    DFUXRefService.prototype.DFUXRefList = function (request) {
        if (request === void 0) { request = {}; }
        return this._connection.send("DFUXRefList", request);
    };
    DFUXRefService.prototype.DFUXRefLostFiles = function (request) {
        return this._connection.send("DFUXRefLostFiles", request, undefined, undefined, undefined, "DFUXRefLostFilesQueryResponse");
    };
    DFUXRefService.prototype.DFUXRefMessages = function (request) {
        return this._connection.send("DFUXRefMessages", request, undefined, undefined, undefined, "DFUXRefMessagesQueryResponse");
    };
    DFUXRefService.prototype.DFUXRefOrphanFiles = function (request) {
        return this._connection.send("DFUXRefOrphanFiles", request, undefined, undefined, undefined, "DFUXRefOrphanFilesQueryResponse");
    };
    DFUXRefService.prototype.DFUXRefUnusedFiles = function (request) {
        return this._connection.send("DFUXRefUnusedFiles", request);
    };
    return DFUXRefService;
}(Service));

function jsonToIField(id, item) {
    var type = typeof item;
    switch (type) {
        case "boolean":
        case "number":
        case "string":
            return { id: id, type: type };
        case "object":
            if (item.Row instanceof Array) {
                item = item.Row;
            }
            if (item instanceof Array) {
                return {
                    id: id,
                    type: "dataset",
                    children: jsonToIFieldArr(item[0])
                };
            }
            else if (item instanceof Object) {
                if (item.Item && item.Item instanceof Array && item.Item.length === 1) {
                    var fieldType = typeof item.Item[0];
                    if (fieldType === "string" || fieldType === "number") {
                        return {
                            id: id,
                            type: "set",
                            fieldType: fieldType
                        };
                    }
                    throw new Error("Unknown field type");
                }
                return {
                    id: id,
                    type: "object",
                    fields: jsonToIFieldObj(item)
                };
            }
        // Fall through  ---
        default:
            throw new Error("Unknown field type");
    }
}
function jsonToIFieldArr(json) {
    if (json.Row && json.Row instanceof Array) {
        json = json.Row[0];
    }
    var retVal = [];
    for (var key in json) {
        retVal.push(jsonToIField(key, json[key]));
    }
    return retVal;
}
function jsonToIFieldObj(json) {
    var fields = {};
    for (var key in json) {
        fields[key] = jsonToIField(key, json[key]);
    }
    return fields;
}
var EclService = /** @class */ (function (_super) {
    __extends(EclService, _super);
    function EclService(optsConnection) {
        return _super.call(this, optsConnection, "WsEcl", "0") || this;
    }
    EclService.prototype.opts = function () {
        return this._connection.opts();
    };
    EclService.prototype.requestJson = function (querySet, queryId) {
        // http://192.168.3.22:8002/WsEcl/example/request/query/roxie/peopleaccounts/json?display
        return this._connection.send("example/request/query/".concat(querySet, "/").concat(queryId, "/json"), {}, "text").then(function (response) {
            var requestSchema = JSON.parse(response);
            for (var key in requestSchema) {
                return requestSchema[key];
            }
            return {};
        }).then(jsonToIFieldArr);
    };
    EclService.prototype.responseJson = function (querySet, queryId) {
        // http://192.168.3.22:8002/WsEcl/example/response/query/roxie/peopleaccounts/json?display
        return this._connection.send("example/response/query/".concat(querySet, "/").concat(queryId, "/json"), {}, "text").then(function (response) {
            var responseSchema = JSON.parse(response);
            for (var key in responseSchema) {
                return responseSchema[key].Results;
            }
            return {};
        }).then(function (resultsJson) {
            var retVal = {};
            for (var key in resultsJson) {
                retVal[key] = jsonToIFieldArr(resultsJson[key]);
            }
            return retVal;
        });
    };
    EclService.prototype.submit = function (querySet, queryId, request) {
        // http://192.168.3.22:8002/WsEcl/submit/query/roxie/peopleaccounts.1/json
        var action = "submit/query/".concat(querySet, "/").concat(queryId);
        return this._connection.send(action, request, "json2").then(function (response) {
            if (response.Results && response.Results.Exception) {
                throw new ESPExceptions(action, request, {
                    Source: "wsEcl.submit",
                    Exception: response.Results.Exception
                });
            }
            return response.Results;
        });
    };
    return EclService;
}(Service));

var ElkServiceBase = /** @class */ (function (_super) {
    __extends(ElkServiceBase, _super);
    function ElkServiceBase(optsConnection) {
        return _super.call(this, optsConnection, "ws_elk", "1") || this;
    }
    ElkServiceBase.prototype.GetConfigDetails = function (request) {
        return this._connection.send("GetConfigDetails", request);
    };
    ElkServiceBase.prototype.Ping = function (request) {
        return this._connection.send("Ping", request);
    };
    return ElkServiceBase;
}(Service));

var ElkService = /** @class */ (function (_super) {
    __extends(ElkService, _super);
    function ElkService() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return ElkService;
}(ElkServiceBase));

var WsLogaccess;
(function (WsLogaccess) {
    (function (LogColumnType) {
        LogColumnType["global"] = "global";
        LogColumnType["workunits"] = "workunits";
        LogColumnType["components"] = "components";
        LogColumnType["audience"] = "audience";
        LogColumnType["class"] = "class";
        LogColumnType["instance"] = "instance";
        LogColumnType["node"] = "node";
        LogColumnType["message"] = "message";
        LogColumnType["logid"] = "logid";
        LogColumnType["processid"] = "processid";
        LogColumnType["threadid"] = "threadid";
        LogColumnType["timestamp"] = "timestamp";
        LogColumnType["pod"] = "pod";
    })(WsLogaccess.LogColumnType || (WsLogaccess.LogColumnType = {}));
    (function (LogColumnValueType) {
        LogColumnValueType["string"] = "string";
        LogColumnValueType["numeric"] = "numeric";
        LogColumnValueType["datetime"] = "datetime";
        LogColumnValueType["enum"] = "enum";
    })(WsLogaccess.LogColumnValueType || (WsLogaccess.LogColumnValueType = {}));
    (function (LogAccessType) {
        LogAccessType[LogAccessType["All"] = 0] = "All";
        LogAccessType[LogAccessType["ByJobID"] = 1] = "ByJobID";
        LogAccessType[LogAccessType["ByComponent"] = 2] = "ByComponent";
        LogAccessType[LogAccessType["ByLogType"] = 3] = "ByLogType";
        LogAccessType[LogAccessType["ByTargetAudience"] = 4] = "ByTargetAudience";
        LogAccessType[LogAccessType["BySourceInstance"] = 5] = "BySourceInstance";
        LogAccessType[LogAccessType["BySourceNode"] = 6] = "BySourceNode";
        LogAccessType[LogAccessType["ByFieldName"] = 7] = "ByFieldName";
        LogAccessType[LogAccessType["ByPod"] = 8] = "ByPod";
    })(WsLogaccess.LogAccessType || (WsLogaccess.LogAccessType = {}));
    (function (LogAccessFilterOperator) {
        LogAccessFilterOperator[LogAccessFilterOperator["NONE"] = 0] = "NONE";
        LogAccessFilterOperator[LogAccessFilterOperator["AND"] = 1] = "AND";
        LogAccessFilterOperator[LogAccessFilterOperator["OR"] = 2] = "OR";
    })(WsLogaccess.LogAccessFilterOperator || (WsLogaccess.LogAccessFilterOperator = {}));
    (function (LogSelectColumnMode) {
        LogSelectColumnMode[LogSelectColumnMode["MIN"] = 0] = "MIN";
        LogSelectColumnMode[LogSelectColumnMode["DEFAULT"] = 1] = "DEFAULT";
        LogSelectColumnMode[LogSelectColumnMode["ALL"] = 2] = "ALL";
        LogSelectColumnMode[LogSelectColumnMode["CUSTOM"] = 3] = "CUSTOM";
    })(WsLogaccess.LogSelectColumnMode || (WsLogaccess.LogSelectColumnMode = {}));
    (function (SortColumType) {
        SortColumType[SortColumType["ByDate"] = 0] = "ByDate";
        SortColumType[SortColumType["ByJobID"] = 1] = "ByJobID";
        SortColumType[SortColumType["ByComponent"] = 2] = "ByComponent";
        SortColumType[SortColumType["ByLogType"] = 3] = "ByLogType";
        SortColumType[SortColumType["ByTargetAudience"] = 4] = "ByTargetAudience";
        SortColumType[SortColumType["BySourceInstance"] = 5] = "BySourceInstance";
        SortColumType[SortColumType["BySourceNode"] = 6] = "BySourceNode";
        SortColumType[SortColumType["ByFieldName"] = 7] = "ByFieldName";
        SortColumType[SortColumType["ByPod"] = 8] = "ByPod";
    })(WsLogaccess.SortColumType || (WsLogaccess.SortColumType = {}));
    (function (SortDirection) {
        SortDirection[SortDirection["ASC"] = 0] = "ASC";
        SortDirection[SortDirection["DSC"] = 1] = "DSC";
    })(WsLogaccess.SortDirection || (WsLogaccess.SortDirection = {}));
})(WsLogaccess || (WsLogaccess = {}));
var LogaccessServiceBase = /** @class */ (function (_super) {
    __extends(LogaccessServiceBase, _super);
    function LogaccessServiceBase(optsConnection) {
        return _super.call(this, optsConnection, "ws_logaccess", "1.05") || this;
    }
    LogaccessServiceBase.prototype.GetLogAccessInfo = function (request) {
        return this._connection.send("GetLogAccessInfo", request, "json", false, undefined, "GetLogAccessInfoResponse");
    };
    LogaccessServiceBase.prototype.GetLogs = function (request) {
        return this._connection.send("GetLogs", request, "json", false, undefined, "GetLogsResponse");
    };
    LogaccessServiceBase.prototype.Ping = function (request) {
        return this._connection.send("Ping", request, "json", false, undefined, "ws_logaccessPingResponse");
    };
    return LogaccessServiceBase;
}(Service));

var logger$5 = scopedLogger("@hpcc-js/comms/services/wsLogaccess.ts");
var LogaccessService = /** @class */ (function (_super) {
    __extends(LogaccessService, _super);
    function LogaccessService() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    LogaccessService.prototype.GetLogAccessInfo = function (request) {
        if (request === void 0) { request = {}; }
        if (!this._logAccessInfo) {
            this._logAccessInfo = _super.prototype.GetLogAccessInfo.call(this, request);
        }
        return this._logAccessInfo;
    };
    LogaccessService.prototype.GetLogs = function (request) {
        return _super.prototype.GetLogs.call(this, request);
    };
    LogaccessService.prototype.GetLogsEx = function (request) {
        return __awaiter(this, void 0, void 0, function () {
            var logInfo, columnMap, convertLogLine, getLogsRequest, filters, _loop_1, key, binaryLogFilter_1;
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
            return __generator(this, function (_l) {
                switch (_l.label) {
                    case 0: return [4 /*yield*/, this.GetLogAccessInfo()];
                    case 1:
                        logInfo = _l.sent();
                        columnMap = {};
                        logInfo.Columns.Column.forEach(function (column) { return columnMap[column.LogType] = column.Name; });
                        convertLogLine = function (line) {
                            var _a;
                            var retVal = {};
                            for (var key in columnMap) {
                                if (line === null || line === void 0 ? void 0 : line.fields) {
                                    retVal[key] = (_a = Object.assign.apply(Object, __spreadArray([{}], line.fields, false))[columnMap[key]]) !== null && _a !== void 0 ? _a : "";
                                }
                                else {
                                    retVal[key] = "";
                                }
                            }
                            return retVal;
                        };
                        getLogsRequest = {
                            Filter: {
                                leftBinaryFilter: {
                                    BinaryLogFilter: [{
                                            leftFilter: {
                                                LogCategory: WsLogaccess.LogAccessType.All,
                                            },
                                        }]
                                }
                            },
                            Range: {
                                StartDate: new Date(0).toISOString(),
                            },
                            LogLineStartFrom: (_a = request.LogLineStartFrom) !== null && _a !== void 0 ? _a : 0,
                            LogLineLimit: (_b = request.LogLineLimit) !== null && _b !== void 0 ? _b : 100,
                            SelectColumnMode: WsLogaccess.LogSelectColumnMode.DEFAULT,
                            Format: "JSON",
                            SortBy: {
                                SortCondition: [{
                                        BySortType: WsLogaccess.SortColumType.ByDate,
                                        ColumnName: "",
                                        Direction: 0
                                    }]
                            }
                        };
                        filters = [];
                        _loop_1 = function (key) {
                            var searchField;
                            if (key in columnMap) {
                                if (Object.values(WsLogaccess.LogColumnType).includes(key)) {
                                    searchField = key;
                                }
                                else {
                                    searchField = columnMap[key];
                                }
                            }
                            var logCategory;
                            if (searchField) {
                                switch (searchField) {
                                    case WsLogaccess.LogColumnType.workunits:
                                    case "hpcc.log.jobid":
                                        logCategory = WsLogaccess.LogAccessType.ByJobID;
                                        break;
                                    case WsLogaccess.LogColumnType.audience:
                                    case "hpcc.log.audience":
                                        logCategory = WsLogaccess.LogAccessType.ByTargetAudience;
                                        break;
                                    case WsLogaccess.LogColumnType.class:
                                    case "hpcc.log.class":
                                        logCategory = WsLogaccess.LogAccessType.ByLogType;
                                        break;
                                    case WsLogaccess.LogColumnType.components:
                                    case "kubernetes.container.name":
                                        logCategory = WsLogaccess.LogAccessType.ByComponent;
                                        break;
                                    default:
                                        logCategory = WsLogaccess.LogAccessType.ByFieldName;
                                        searchField = columnMap[key];
                                }
                                if (Array.isArray(request[key])) {
                                    request[key].forEach(function (value) {
                                        if (logCategory === WsLogaccess.LogAccessType.ByComponent) {
                                            value += "*";
                                        }
                                        filters.push({
                                            LogCategory: logCategory,
                                            SearchField: searchField,
                                            SearchByValue: value
                                        });
                                    });
                                }
                                else {
                                    var value = request[key];
                                    if (logCategory === WsLogaccess.LogAccessType.ByComponent) {
                                        // append wildcard to end of search value to include ephemeral
                                        // containers that aren't listed in ECL Watch's filters
                                        value += "*";
                                    }
                                    filters.push({
                                        LogCategory: logCategory,
                                        SearchField: searchField,
                                        SearchByValue: value
                                    });
                                }
                            }
                        };
                        for (key in request) {
                            _loop_1(key);
                        }
                        if (filters.length > 2) {
                            binaryLogFilter_1 = getLogsRequest.Filter.leftBinaryFilter.BinaryLogFilter[0];
                            filters.forEach(function (filter, i) {
                                var operator = WsLogaccess.LogAccessFilterOperator.AND;
                                if (i > 0) {
                                    if (filters[i - 1].SearchField === filter.SearchField) {
                                        operator = WsLogaccess.LogAccessFilterOperator.OR;
                                    }
                                    if (i === filters.length - 1) {
                                        binaryLogFilter_1.Operator = operator;
                                        binaryLogFilter_1.rightFilter = filter;
                                    }
                                    else {
                                        binaryLogFilter_1.Operator = operator;
                                        binaryLogFilter_1.rightBinaryFilter = {
                                            BinaryLogFilter: [{
                                                    leftFilter: filter
                                                }]
                                        };
                                        binaryLogFilter_1 = binaryLogFilter_1.rightBinaryFilter.BinaryLogFilter[0];
                                    }
                                }
                                else {
                                    binaryLogFilter_1.leftFilter = filter;
                                }
                            });
                        }
                        else {
                            delete getLogsRequest.Filter.leftBinaryFilter;
                            getLogsRequest.Filter.leftFilter = {
                                LogCategory: WsLogaccess.LogAccessType.All
                            };
                            if ((_c = filters[0]) === null || _c === void 0 ? void 0 : _c.SearchField) {
                                getLogsRequest.Filter.leftFilter = {
                                    LogCategory: (_d = filters[0]) === null || _d === void 0 ? void 0 : _d.LogCategory,
                                    SearchField: (_e = filters[0]) === null || _e === void 0 ? void 0 : _e.SearchField,
                                    SearchByValue: (_f = filters[0]) === null || _f === void 0 ? void 0 : _f.SearchByValue
                                };
                            }
                            if ((_g = filters[1]) === null || _g === void 0 ? void 0 : _g.SearchField) {
                                getLogsRequest.Filter.Operator = WsLogaccess.LogAccessFilterOperator.AND;
                                if (filters[0].SearchField === filters[1].SearchField) {
                                    getLogsRequest.Filter.Operator = WsLogaccess.LogAccessFilterOperator.OR;
                                }
                                getLogsRequest.Filter.rightFilter = {
                                    LogCategory: (_h = filters[1]) === null || _h === void 0 ? void 0 : _h.LogCategory,
                                    SearchField: (_j = filters[1]) === null || _j === void 0 ? void 0 : _j.SearchField,
                                    SearchByValue: (_k = filters[1]) === null || _k === void 0 ? void 0 : _k.SearchByValue
                                };
                            }
                        }
                        if (request.StartDate) {
                            getLogsRequest.Range.StartDate = request.StartDate.toISOString();
                        }
                        if (request.EndDate) {
                            getLogsRequest.Range.EndDate = request.EndDate.toISOString();
                        }
                        return [2 /*return*/, this.GetLogs(getLogsRequest).then(function (response) {
                                var _a, _b, _c;
                                try {
                                    var logLines = JSON.parse(response.LogLines);
                                    var lines = [];
                                    switch (logInfo.RemoteLogManagerType) {
                                        case "azureloganalyticscurl":
                                        case "elasticstack":
                                        case "grafanacurl":
                                            lines = (_b = (_a = logLines.lines) === null || _a === void 0 ? void 0 : _a.map(convertLogLine)) !== null && _b !== void 0 ? _b : [];
                                            break;
                                        default:
                                            logger$5.warning("Unknown RemoteLogManagerType: ".concat(logInfo.RemoteLogManagerType));
                                            lines = [];
                                    }
                                    return {
                                        lines: lines,
                                        total: (_c = response.TotalLogLinesAvailable) !== null && _c !== void 0 ? _c : 10000
                                    };
                                }
                                catch (e) {
                                    logger$5.error(e);
                                }
                                return {
                                    lines: [],
                                    total: 0
                                };
                            })];
                }
            });
        });
    };
    return LogaccessService;
}(LogaccessServiceBase));

function ascending(a, b) {
  return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
}

function bisector(compare) {
  if (compare.length === 1) compare = ascendingComparator(compare);
  return {
    left: function(a, x, lo, hi) {
      if (lo == null) lo = 0;
      if (hi == null) hi = a.length;
      while (lo < hi) {
        var mid = lo + hi >>> 1;
        if (compare(a[mid], x) < 0) lo = mid + 1;
        else hi = mid;
      }
      return lo;
    },
    right: function(a, x, lo, hi) {
      if (lo == null) lo = 0;
      if (hi == null) hi = a.length;
      while (lo < hi) {
        var mid = lo + hi >>> 1;
        if (compare(a[mid], x) > 0) hi = mid;
        else lo = mid + 1;
      }
      return lo;
    }
  };
}

function ascendingComparator(f) {
  return function(d, x) {
    return ascending(f(d), x);
  };
}

bisector(ascending);

function number(x) {
  return x === null ? NaN : +x;
}

function d3Max(values, valueof) {
  var n = values.length,
      i = -1,
      value,
      max;

  if (valueof == null) {
    while (++i < n) { // Find the first comparable value.
      if ((value = values[i]) != null && value >= value) {
        max = value;
        while (++i < n) { // Compare the remaining values.
          if ((value = values[i]) != null && value > max) {
            max = value;
          }
        }
      }
    }
  }

  else {
    while (++i < n) { // Find the first comparable value.
      if ((value = valueof(values[i], i, values)) != null && value >= value) {
        max = value;
        while (++i < n) { // Compare the remaining values.
          if ((value = valueof(values[i], i, values)) != null && value > max) {
            max = value;
          }
        }
      }
    }
  }

  return max;
}

function d3Mean(values, valueof) {
  var n = values.length,
      m = n,
      i = -1,
      value,
      sum = 0;

  if (valueof == null) {
    while (++i < n) {
      if (!isNaN(value = number(values[i]))) sum += value;
      else --m;
    }
  }

  else {
    while (++i < n) {
      if (!isNaN(value = number(valueof(values[i], i, values)))) sum += value;
      else --m;
    }
  }

  if (m) return sum / m;
}

var MachineServiceBase = /** @class */ (function (_super) {
    __extends(MachineServiceBase, _super);
    function MachineServiceBase(optsConnection) {
        return _super.call(this, optsConnection, "ws_machine", "1.17") || this;
    }
    MachineServiceBase.prototype.GetComponentStatus = function (request) {
        return this._connection.send("GetComponentStatus", request);
    };
    MachineServiceBase.prototype.GetComponentUsage = function (request) {
        return this._connection.send("GetComponentUsage", request);
    };
    MachineServiceBase.prototype.GetMachineInfo = function (request) {
        return this._connection.send("GetMachineInfo", request);
    };
    MachineServiceBase.prototype.GetMachineInfoEx = function (request) {
        return this._connection.send("GetMachineInfoEx", request);
    };
    MachineServiceBase.prototype.GetMetrics = function (request) {
        return this._connection.send("GetMetrics", request);
    };
    MachineServiceBase.prototype.GetNodeGroupUsage = function (request) {
        return this._connection.send("GetNodeGroupUsage", request);
    };
    MachineServiceBase.prototype.GetTargetClusterInfo = function (request) {
        return this._connection.send("GetTargetClusterInfo", request);
    };
    MachineServiceBase.prototype.GetTargetClusterUsage = function (request) {
        return this._connection.send("GetTargetClusterUsage", request);
    };
    MachineServiceBase.prototype.Ping = function (request) {
        return this._connection.send("Ping", request);
    };
    MachineServiceBase.prototype.UpdateComponentStatus = function (request) {
        return this._connection.send("UpdateComponentStatus", request);
    };
    return MachineServiceBase;
}(Service));

var MachineService = /** @class */ (function (_super) {
    __extends(MachineService, _super);
    function MachineService() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    MachineService.prototype.GetTargetClusterUsageEx = function (targetClusters, bypassCachedResult) {
        if (bypassCachedResult === void 0) { bypassCachedResult = false; }
        return this._connection.send("GetTargetClusterUsage", {
            TargetClusters: targetClusters ? { Item: targetClusters } : {},
            BypassCachedResult: bypassCachedResult
        }).then(function (response) {
            return exists("TargetClusterUsages.TargetClusterUsage", response) ? response.TargetClusterUsages.TargetClusterUsage : [];
        }).then(function (response) {
            return response.filter(function (tcu) { return !!tcu.ComponentUsages; }).map(function (tcu) {
                var ComponentUsages = tcu.ComponentUsages.ComponentUsage.map(function (cu) {
                    var MachineUsages = (cu.MachineUsages && cu.MachineUsages.MachineUsage ? cu.MachineUsages.MachineUsage : []).map(function (mu) {
                        var DiskUsages = mu.DiskUsages && mu.DiskUsages.DiskUsage ? mu.DiskUsages.DiskUsage.map(function (du) {
                            return __assign(__assign({}, du), { InUse: du.InUse * 1024, Total: (du.InUse + du.Available) * 1024, PercentUsed: 100 - du.PercentAvailable });
                        }) : [];
                        return {
                            Name: mu.Name,
                            NetAddress: mu.NetAddress,
                            Description: mu.Description,
                            DiskUsages: DiskUsages,
                            mean: d3Mean(DiskUsages.filter(function (du) { return !isNaN(du.PercentUsed); }), function (du) { return du.PercentUsed; }),
                            max: d3Max(DiskUsages.filter(function (du) { return !isNaN(du.PercentUsed); }), function (du) { return du.PercentUsed; })
                        };
                    });
                    return {
                        Type: cu.Type,
                        Name: cu.Name,
                        Description: cu.Description,
                        MachineUsages: MachineUsages,
                        MachineUsagesDescription: MachineUsages.reduce(function (prev, mu) { return prev + (mu.Description || ""); }, ""),
                        mean: d3Mean(MachineUsages.filter(function (mu) { return !isNaN(mu.mean); }), function (mu) { return mu.mean; }),
                        max: d3Max(MachineUsages.filter(function (mu) { return !isNaN(mu.max); }), function (mu) { return mu.max; })
                    };
                });
                return {
                    Name: tcu.Name,
                    Description: tcu.Description,
                    ComponentUsages: ComponentUsages,
                    ComponentUsagesDescription: ComponentUsages.reduce(function (prev, cu) { return prev + (cu.MachineUsagesDescription || ""); }, ""),
                    mean: d3Mean(ComponentUsages.filter(function (cu) { return !isNaN(cu.mean); }), function (cu) { return cu.mean; }),
                    max: d3Max(ComponentUsages.filter(function (cu) { return !isNaN(cu.max); }), function (cu) { return cu.max; })
                };
            });
        });
    };
    return MachineService;
}(MachineServiceBase));

var PackageProcessServiceBase = /** @class */ (function (_super) {
    __extends(PackageProcessServiceBase, _super);
    function PackageProcessServiceBase(optsConnection) {
        return _super.call(this, optsConnection, "WsPackageProcess", "1.04") || this;
    }
    PackageProcessServiceBase.prototype.ActivatePackage = function (request) {
        return this._connection.send("ActivatePackage", request);
    };
    PackageProcessServiceBase.prototype.AddPackage = function (request) {
        return this._connection.send("AddPackage", request);
    };
    PackageProcessServiceBase.prototype.AddPartToPackageMap = function (request) {
        return this._connection.send("AddPartToPackageMap", request);
    };
    PackageProcessServiceBase.prototype.CopyPackageMap = function (request) {
        return this._connection.send("CopyPackageMap", request);
    };
    PackageProcessServiceBase.prototype.DeActivatePackage = function (request) {
        return this._connection.send("DeActivatePackage", request);
    };
    PackageProcessServiceBase.prototype.DeletePackage = function (request) {
        return this._connection.send("DeletePackage", request);
    };
    PackageProcessServiceBase.prototype.Echo = function (request) {
        return this._connection.send("Echo", request);
    };
    PackageProcessServiceBase.prototype.GetPackage = function (request) {
        return this._connection.send("GetPackage", request);
    };
    PackageProcessServiceBase.prototype.GetPackageMapById = function (request) {
        return this._connection.send("GetPackageMapById", request);
    };
    PackageProcessServiceBase.prototype.GetPackageMapSelectOptions = function (request) {
        return this._connection.send("GetPackageMapSelectOptions", request);
    };
    PackageProcessServiceBase.prototype.GetPartFromPackageMap = function (request) {
        return this._connection.send("GetPartFromPackageMap", request);
    };
    PackageProcessServiceBase.prototype.GetQueryFileMapping = function (request) {
        return this._connection.send("GetQueryFileMapping", request);
    };
    PackageProcessServiceBase.prototype.ListPackage = function (request) {
        return this._connection.send("ListPackage", request);
    };
    PackageProcessServiceBase.prototype.ListPackages = function (request) {
        return this._connection.send("ListPackages", request);
    };
    PackageProcessServiceBase.prototype.Ping = function (request) {
        return this._connection.send("Ping", request);
    };
    PackageProcessServiceBase.prototype.RemovePartFromPackageMap = function (request) {
        return this._connection.send("RemovePartFromPackageMap", request);
    };
    PackageProcessServiceBase.prototype.ValidatePackage = function (request) {
        return this._connection.send("ValidatePackage", request);
    };
    return PackageProcessServiceBase;
}(Service));

var PackageProcessService = /** @class */ (function (_super) {
    __extends(PackageProcessService, _super);
    function PackageProcessService() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return PackageProcessService;
}(PackageProcessServiceBase));

var ResourcesServiceBase = /** @class */ (function (_super) {
    __extends(ResourcesServiceBase, _super);
    function ResourcesServiceBase(optsConnection) {
        return _super.call(this, optsConnection, "WsResources", "1.01") || this;
    }
    ResourcesServiceBase.prototype.Ping = function (request) {
        return this._connection.send("Ping", request);
    };
    ResourcesServiceBase.prototype.ServiceQuery = function (request) {
        return this._connection.send("ServiceQuery", request);
    };
    ResourcesServiceBase.prototype.WebLinksQuery = function (request) {
        return this._connection.send("WebLinksQuery", request);
    };
    return ResourcesServiceBase;
}(Service));

var ResourcesService = /** @class */ (function (_super) {
    __extends(ResourcesService, _super);
    function ResourcesService() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return ResourcesService;
}(ResourcesServiceBase));

var WsSasha;
(function (WsSasha) {
    (function (WUTypes) {
        WUTypes["ECL"] = "ECL";
        WUTypes["DFU"] = "DFU";
    })(WsSasha.WUTypes || (WsSasha.WUTypes = {}));
})(WsSasha || (WsSasha = {}));
var SashaServiceBase = /** @class */ (function (_super) {
    __extends(SashaServiceBase, _super);
    function SashaServiceBase(optsConnection) {
        return _super.call(this, optsConnection, "WSSasha", "1.01") || this;
    }
    SashaServiceBase.prototype.ArchiveWU = function (request) {
        return this._connection.send("ArchiveWU", request, "json", false, undefined, "ResultResponse");
    };
    SashaServiceBase.prototype.GetVersion = function (request) {
        return this._connection.send("GetVersion", request, "json", false, undefined, "ResultResponse");
    };
    SashaServiceBase.prototype.ListWU = function (request) {
        return this._connection.send("ListWU", request, "json", false, undefined, "ResultResponse");
    };
    SashaServiceBase.prototype.Ping = function (request) {
        return this._connection.send("Ping", request, "json", false, undefined, "WSSashaPingResponse");
    };
    SashaServiceBase.prototype.RestoreWU = function (request) {
        return this._connection.send("RestoreWU", request, "json", false, undefined, "ResultResponse");
    };
    return SashaServiceBase;
}(Service));

var SashaService = /** @class */ (function (_super) {
    __extends(SashaService, _super);
    function SashaService() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return SashaService;
}(SashaServiceBase));

var WsSMC;
(function (WsSMC) {
    (function (LockModes) {
        LockModes["ALL"] = "ALL";
        LockModes["READ"] = "READ";
        LockModes["WRITE"] = "WRITE";
        LockModes["HOLD"] = "HOLD";
        LockModes["SUB"] = "SUB";
    })(WsSMC.LockModes || (WsSMC.LockModes = {}));
    (function (RoxieControlCmdType) {
        RoxieControlCmdType["Attach"] = "Attach";
        RoxieControlCmdType["Detach"] = "Detach";
        RoxieControlCmdType["State"] = "State";
        RoxieControlCmdType["Reload"] = "Reload";
        RoxieControlCmdType["ReloadRetry"] = "ReloadRetry";
        RoxieControlCmdType["MemLock"] = "MemLock";
        RoxieControlCmdType["MemUnlock"] = "MemUnlock";
        RoxieControlCmdType["GetMemLocked"] = "GetMemLocked";
    })(WsSMC.RoxieControlCmdType || (WsSMC.RoxieControlCmdType = {}));
})(WsSMC || (WsSMC = {}));
var SMCServiceBase = /** @class */ (function (_super) {
    __extends(SMCServiceBase, _super);
    function SMCServiceBase(optsConnection) {
        return _super.call(this, optsConnection, "WsSMC", "1.27") || this;
    }
    SMCServiceBase.prototype.Activity = function (request) {
        return this._connection.send("Activity", request, "json", false, undefined, "ActivityResponse");
    };
    SMCServiceBase.prototype.BrowseResources = function (request) {
        return this._connection.send("BrowseResources", request, "json", false, undefined, "BrowseResourcesResponse");
    };
    SMCServiceBase.prototype.ClearQueue = function (request) {
        return this._connection.send("ClearQueue", request, "json", false, undefined, "SMCQueueResponse");
    };
    SMCServiceBase.prototype.GetBuildInfo = function (request) {
        return this._connection.send("GetBuildInfo", request, "json", false, undefined, "GetBuildInfoResponse");
    };
    SMCServiceBase.prototype.GetStatusServerInfo = function (request) {
        return this._connection.send("GetStatusServerInfo", request, "json", false, undefined, "GetStatusServerInfoResponse");
    };
    SMCServiceBase.prototype.GetThorQueueAvailability = function (request) {
        return this._connection.send("GetThorQueueAvailability", request, "json", false, undefined, "GetThorQueueAvailabilityResponse");
    };
    SMCServiceBase.prototype.Index = function (request) {
        return this._connection.send("Index", request, "json", false, undefined, "SMCIndexResponse");
    };
    SMCServiceBase.prototype.LockQuery = function (request) {
        return this._connection.send("LockQuery", request, "json", false, undefined, "LockQueryResponse");
    };
    SMCServiceBase.prototype.MoveJobBack = function (request) {
        return this._connection.send("MoveJobBack", request, "json", false, undefined, "SMCJobResponse");
    };
    SMCServiceBase.prototype.MoveJobDown = function (request) {
        return this._connection.send("MoveJobDown", request, "json", false, undefined, "SMCJobResponse");
    };
    SMCServiceBase.prototype.MoveJobFront = function (request) {
        return this._connection.send("MoveJobFront", request, "json", false, undefined, "SMCJobResponse");
    };
    SMCServiceBase.prototype.MoveJobUp = function (request) {
        return this._connection.send("MoveJobUp", request, "json", false, undefined, "SMCJobResponse");
    };
    SMCServiceBase.prototype.NotInCommunityEdition = function (request) {
        return this._connection.send("NotInCommunityEdition", request, "json", false, undefined, "NotInCommunityEditionResponse");
    };
    SMCServiceBase.prototype.PauseQueue = function (request) {
        return this._connection.send("PauseQueue", request, "json", false, undefined, "SMCQueueResponse");
    };
    SMCServiceBase.prototype.Ping = function (request) {
        return this._connection.send("Ping", request, "json", false, undefined, "WsSMCPingResponse");
    };
    SMCServiceBase.prototype.RemoveJob = function (request) {
        return this._connection.send("RemoveJob", request, "json", false, undefined, "SMCJobResponse");
    };
    SMCServiceBase.prototype.ResumeQueue = function (request) {
        return this._connection.send("ResumeQueue", request, "json", false, undefined, "SMCQueueResponse");
    };
    SMCServiceBase.prototype.RoxieControlCmd = function (request) {
        return this._connection.send("RoxieControlCmd", request, "json", false, undefined, "RoxieControlCmdResponse");
    };
    SMCServiceBase.prototype.RoxieXrefCmd = function (request) {
        return this._connection.send("RoxieXrefCmd", request, "json", false, undefined, "RoxieXrefCmdResponse");
    };
    SMCServiceBase.prototype.SetBanner = function (request) {
        return this._connection.send("SetBanner", request, "json", false, undefined, "SetBannerResponse");
    };
    SMCServiceBase.prototype.SetJobPriority = function (request) {
        return this._connection.send("SetJobPriority", request, "json", false, undefined, "SMCPriorityResponse");
    };
    SMCServiceBase.prototype.StopQueue = function (request) {
        return this._connection.send("StopQueue", request, "json", false, undefined, "SMCQueueResponse");
    };
    return SMCServiceBase;
}(Service));

var SMCService = /** @class */ (function (_super) {
    __extends(SMCService, _super);
    function SMCService() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SMCService.prototype.connectionOptions = function () {
        return this._connection.opts();
    };
    SMCService.prototype.Activity = function (request) {
        return _super.prototype.Activity.call(this, request).then(function (response) {
            return __assign({ Running: {
                    ActiveWorkunit: []
                } }, response);
        });
    };
    return SMCService;
}(SMCServiceBase));

var StoreService = /** @class */ (function (_super) {
    __extends(StoreService, _super);
    function StoreService(optsConnection) {
        return _super.call(this, optsConnection, "WsStore", "1") || this;
    }
    StoreService.prototype.CreateStore = function (request) {
        return this._connection.send("Fetch", request);
    };
    StoreService.prototype.Delete = function (request) {
        return this._connection.send("Delete", request).catch(function (e) {
            if (e.isESPExceptions && e.Exception.some(function (e) { return e.Code === -1; })) {
                //  "Delete" item does not exist  ---
                return {
                    Exceptions: undefined,
                    Success: true
                };
            }
            throw e;
        });
    };
    StoreService.prototype.DeleteNamespace = function (request) {
        return this._connection.send("DeleteNamespace", request);
    };
    StoreService.prototype.Fetch = function (request) {
        return this._connection.send("Fetch", request).catch(function (e) {
            if (e.isESPExceptions && e.Exception.some(function (e) { return e.Code === -1; })) {
                //  "Fetch" item does not exist  ---
                return {
                    Exceptions: undefined,
                    Value: undefined
                };
            }
            throw e;
        });
    };
    StoreService.prototype.FetchAll = function (request) {
        return this._connection.send("FetchAll", request);
    };
    StoreService.prototype.FetchKeyMD = function (request) {
        return this._connection.send("FetchKeyMD", request);
    };
    StoreService.prototype.ListKeys = function (request) {
        return this._connection.send("ListKeys", request);
    };
    StoreService.prototype.ListNamespaces = function (request) {
        return this._connection.send("ListNamespaces", request);
    };
    StoreService.prototype.Set = function (request) {
        return this._connection.send("Set", request);
    };
    return StoreService;
}(Service));

var WsTopology;
(function (WsTopology) {
    (function (RoxieQueueFilter) {
        RoxieQueueFilter["All"] = "All";
        RoxieQueueFilter["QueriesOnly"] = "QueriesOnly";
        RoxieQueueFilter["WorkunitsOnly"] = "WorkunitsOnly";
    })(WsTopology.RoxieQueueFilter || (WsTopology.RoxieQueueFilter = {}));
})(WsTopology || (WsTopology = {}));
var TopologyServiceBase = /** @class */ (function (_super) {
    __extends(TopologyServiceBase, _super);
    function TopologyServiceBase(optsConnection) {
        return _super.call(this, optsConnection, "WsTopology", "1.32") || this;
    }
    TopologyServiceBase.prototype.Ping = function (request) {
        return this._connection.send("Ping", request, "json", false, undefined, "WsTopologyPingResponse");
    };
    TopologyServiceBase.prototype.SystemLog = function (request) {
        return this._connection.send("SystemLog", request, "json", false, undefined, "SystemLogResponse");
    };
    TopologyServiceBase.prototype.TpClusterInfo = function (request) {
        return this._connection.send("TpClusterInfo", request, "json", false, undefined, "TpClusterInfoResponse");
    };
    TopologyServiceBase.prototype.TpClusterQuery = function (request) {
        return this._connection.send("TpClusterQuery", request, "json", false, undefined, "TpClusterQueryResponse");
    };
    TopologyServiceBase.prototype.TpDropZoneQuery = function (request) {
        return this._connection.send("TpDropZoneQuery", request, "json", false, undefined, "TpDropZoneQueryResponse");
    };
    TopologyServiceBase.prototype.TpGetComponentFile = function (request) {
        return this._connection.send("TpGetComponentFile", request, "json", false, undefined, "TpGetComponentFileResponse");
    };
    TopologyServiceBase.prototype.TpGetServicePlugins = function (request) {
        return this._connection.send("TpGetServicePlugins", request, "json", false, undefined, "TpGetServicePluginsResponse");
    };
    TopologyServiceBase.prototype.TpGroupQuery = function (request) {
        return this._connection.send("TpGroupQuery", request, "json", false, undefined, "TpGroupQueryResponse");
    };
    TopologyServiceBase.prototype.TpListLogFiles = function (request) {
        return this._connection.send("TpListLogFiles", request, "json", false, undefined, "TpListLogFilesResponse");
    };
    TopologyServiceBase.prototype.TpListTargetClusters = function (request) {
        return this._connection.send("TpListTargetClusters", request, "json", false, undefined, "TpListTargetClustersResponse");
    };
    TopologyServiceBase.prototype.TpLogFile = function (request) {
        return this._connection.send("TpLogFile", request, "json", false, undefined, "TpLogFileResponse");
    };
    TopologyServiceBase.prototype.TpLogFileDisplay = function (request) {
        return this._connection.send("TpLogFileDisplay", request, "json", false, undefined, "TpLogFileResponse");
    };
    TopologyServiceBase.prototype.TpLogicalClusterQuery = function (request) {
        return this._connection.send("TpLogicalClusterQuery", request, "json", false, undefined, "TpLogicalClusterQueryResponse");
    };
    TopologyServiceBase.prototype.TpMachineInfo = function (request) {
        return this._connection.send("TpMachineInfo", request, "json", false, undefined, "TpMachineInfoResponse");
    };
    TopologyServiceBase.prototype.TpMachineQuery = function (request) {
        return this._connection.send("TpMachineQuery", request, "json", false, undefined, "TpMachineQueryResponse");
    };
    TopologyServiceBase.prototype.TpServiceQuery = function (request) {
        return this._connection.send("TpServiceQuery", request, "json", false, undefined, "TpServiceQueryResponse");
    };
    TopologyServiceBase.prototype.TpSetMachineStatus = function (request) {
        return this._connection.send("TpSetMachineStatus", request, "json", false, undefined, "TpSetMachineStatusResponse");
    };
    TopologyServiceBase.prototype.TpSwapNode = function (request) {
        return this._connection.send("TpSwapNode", request, "json", false, undefined, "TpSwapNodeResponse");
    };
    TopologyServiceBase.prototype.TpTargetClusterQuery = function (request) {
        return this._connection.send("TpTargetClusterQuery", request, "json", false, undefined, "TpTargetClusterQueryResponse");
    };
    TopologyServiceBase.prototype.TpThorStatus = function (request) {
        return this._connection.send("TpThorStatus", request, "json", false, undefined, "TpThorStatusResponse");
    };
    TopologyServiceBase.prototype.TpXMLFile = function (request) {
        return this._connection.send("TpXMLFile", request, "json", false, undefined, "TpXMLFileResponse");
    };
    return TopologyServiceBase;
}(Service));

var TopologyService = /** @class */ (function (_super) {
    __extends(TopologyService, _super);
    function TopologyService() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    TopologyService.prototype.connectionOptions = function () {
        return this._connection.opts();
    };
    TopologyService.prototype.protocol = function () {
        var parts = this._connection.opts().baseUrl.split("//");
        return parts[0];
    };
    TopologyService.prototype.ip = function () {
        var parts = this._connection.opts().baseUrl.split("//");
        var parts2 = parts[1].split(":");
        return parts2[0];
    };
    TopologyService.prototype.DefaultTpLogicalClusterQuery = function (request) {
        if (request === void 0) { request = {}; }
        return this.TpLogicalClusterQuery(request).then(function (response) {
            if (response.default) {
                return response.default;
            }
            var firstHThor;
            var first;
            response.TpLogicalClusters.TpLogicalCluster.some(function (item, idx) {
                if (idx === 0) {
                    first = item;
                }
                if (item.Type === "hthor") {
                    firstHThor = item;
                    return true;
                }
                return false;
            });
            return firstHThor || first;
        });
    };
    return TopologyService;
}(TopologyServiceBase));

var WsWorkunits;
(function (WsWorkunits) {
    (function (ECLWUActions) {
        ECLWUActions["Abort"] = "Abort";
        ECLWUActions["Delete"] = "Delete";
        ECLWUActions["Deschedule"] = "Deschedule";
        ECLWUActions["Reschedule"] = "Reschedule";
        ECLWUActions["Pause"] = "Pause";
        ECLWUActions["PauseNow"] = "PauseNow";
        ECLWUActions["Protect"] = "Protect";
        ECLWUActions["Unprotect"] = "Unprotect";
        ECLWUActions["Restore"] = "Restore";
        ECLWUActions["Resume"] = "Resume";
        ECLWUActions["SetToFailed"] = "SetToFailed";
        ECLWUActions["Archive"] = "Archive";
    })(WsWorkunits.ECLWUActions || (WsWorkunits.ECLWUActions = {}));
    (function (LogSelectColumnMode) {
        LogSelectColumnMode[LogSelectColumnMode["MIN"] = 0] = "MIN";
        LogSelectColumnMode[LogSelectColumnMode["DEFAULT"] = 1] = "DEFAULT";
        LogSelectColumnMode[LogSelectColumnMode["ALL"] = 2] = "ALL";
        LogSelectColumnMode[LogSelectColumnMode["CUSTOM"] = 3] = "CUSTOM";
    })(WsWorkunits.LogSelectColumnMode || (WsWorkunits.LogSelectColumnMode = {}));
    (function (SortDirection) {
        SortDirection[SortDirection["ASC"] = 0] = "ASC";
        SortDirection[SortDirection["DSC"] = 1] = "DSC";
    })(WsWorkunits.SortDirection || (WsWorkunits.SortDirection = {}));
    (function (LogEventClass) {
        LogEventClass["ALL"] = "ALL";
        LogEventClass["DIS"] = "DIS";
        LogEventClass["ERR"] = "ERR";
        LogEventClass["WRN"] = "WRN";
        LogEventClass["INF"] = "INF";
        LogEventClass["PRO"] = "PRO";
        LogEventClass["MET"] = "MET";
        LogEventClass["EVT"] = "EVT";
    })(WsWorkunits.LogEventClass || (WsWorkunits.LogEventClass = {}));
    (function (WUDetailsAttrValueType) {
        WUDetailsAttrValueType["Single"] = "Single";
        WUDetailsAttrValueType["List"] = "List";
        WUDetailsAttrValueType["Multi"] = "Multi";
    })(WsWorkunits.WUDetailsAttrValueType || (WsWorkunits.WUDetailsAttrValueType = {}));
    (function (EclDefinitionActions) {
        EclDefinitionActions["SyntaxCheck"] = "SyntaxCheck";
        EclDefinitionActions["Deploy"] = "Deploy";
        EclDefinitionActions["Publish"] = "Publish";
    })(WsWorkunits.EclDefinitionActions || (WsWorkunits.EclDefinitionActions = {}));
    (function (ErrorMessageFormat) {
        ErrorMessageFormat["xml"] = "xml";
        ErrorMessageFormat["json"] = "json";
        ErrorMessageFormat["text"] = "text";
    })(WsWorkunits.ErrorMessageFormat || (WsWorkunits.ErrorMessageFormat = {}));
    (function (LogAccessLogFormat) {
        LogAccessLogFormat[LogAccessLogFormat["XML"] = 0] = "XML";
        LogAccessLogFormat[LogAccessLogFormat["JSON"] = 1] = "JSON";
        LogAccessLogFormat[LogAccessLogFormat["CSV"] = 2] = "CSV";
    })(WsWorkunits.LogAccessLogFormat || (WsWorkunits.LogAccessLogFormat = {}));
    (function (WUExceptionSeverity) {
        WUExceptionSeverity["info"] = "info";
        WUExceptionSeverity["warning"] = "warning";
        WUExceptionSeverity["error"] = "error";
        WUExceptionSeverity["alert"] = "alert";
    })(WsWorkunits.WUExceptionSeverity || (WsWorkunits.WUExceptionSeverity = {}));
    (function (WUQueryFilterSuspendedType) {
        WUQueryFilterSuspendedType["Allqueries"] = "All queries";
        WUQueryFilterSuspendedType["Notsuspended"] = "Not suspended";
        WUQueryFilterSuspendedType["Suspended"] = "Suspended";
        WUQueryFilterSuspendedType["Suspendedbyuser"] = "Suspended by user";
        WUQueryFilterSuspendedType["Suspendedbyfirstnode"] = "Suspended by first node";
        WUQueryFilterSuspendedType["Suspendedbyanynode"] = "Suspended by any node";
    })(WsWorkunits.WUQueryFilterSuspendedType || (WsWorkunits.WUQueryFilterSuspendedType = {}));
    (function (WUQuerySetFilterType) {
        WUQuerySetFilterType["All"] = "All";
        WUQuerySetFilterType["Id"] = "Id";
        WUQuerySetFilterType["Name"] = "Name";
        WUQuerySetFilterType["Alias"] = "Alias";
        WUQuerySetFilterType["Status"] = "Status";
    })(WsWorkunits.WUQuerySetFilterType || (WsWorkunits.WUQuerySetFilterType = {}));
    (function (WUProtectFilter) {
        WUProtectFilter["All"] = "All";
        WUProtectFilter["Protected"] = "Protected";
        WUProtectFilter["NotProtected"] = "NotProtected";
    })(WsWorkunits.WUProtectFilter || (WsWorkunits.WUProtectFilter = {}));
    (function (QuerySetAliasActionTypes) {
        QuerySetAliasActionTypes["Deactivate"] = "Deactivate";
    })(WsWorkunits.QuerySetAliasActionTypes || (WsWorkunits.QuerySetAliasActionTypes = {}));
    (function (QuerysetImportActivation) {
        QuerysetImportActivation["None"] = "None";
        QuerysetImportActivation["ActivateImportedActive"] = "ActivateImportedActive";
    })(WsWorkunits.QuerysetImportActivation || (WsWorkunits.QuerysetImportActivation = {}));
    (function (QuerySetQueryActionTypes) {
        QuerySetQueryActionTypes["Suspend"] = "Suspend";
        QuerySetQueryActionTypes["Unsuspend"] = "Unsuspend";
        QuerySetQueryActionTypes["ToggleSuspend"] = "ToggleSuspend";
        QuerySetQueryActionTypes["Activate"] = "Activate";
        QuerySetQueryActionTypes["Delete"] = "Delete";
        QuerySetQueryActionTypes["DeleteQueriesAndWUs"] = "DeleteQueriesAndWUs";
        QuerySetQueryActionTypes["RemoveAllAliases"] = "RemoveAllAliases";
        QuerySetQueryActionTypes["ResetQueryStats"] = "ResetQueryStats";
    })(WsWorkunits.QuerySetQueryActionTypes || (WsWorkunits.QuerySetQueryActionTypes = {}));
    (function (WUQueryActivationMode) {
        WUQueryActivationMode[WUQueryActivationMode["DoNotActivateQuery"] = 0] = "DoNotActivateQuery";
        WUQueryActivationMode[WUQueryActivationMode["ActivateQuery"] = 1] = "ActivateQuery";
        WUQueryActivationMode[WUQueryActivationMode["ActivateQuerySuspendPrevious"] = 2] = "ActivateQuerySuspendPrevious";
        WUQueryActivationMode[WUQueryActivationMode["ActivateQueryDeletePrevious"] = 3] = "ActivateQueryDeletePrevious";
    })(WsWorkunits.WUQueryActivationMode || (WsWorkunits.WUQueryActivationMode = {}));
})(WsWorkunits || (WsWorkunits = {}));
var WorkunitsServiceBase = /** @class */ (function (_super) {
    __extends(WorkunitsServiceBase, _super);
    function WorkunitsServiceBase(optsConnection) {
        return _super.call(this, optsConnection, "WsWorkunits", "2") || this;
    }
    WorkunitsServiceBase.prototype.GVCAjaxGraph = function (request) {
        return this._connection.send("GVCAjaxGraph", request, "json", false, undefined, "GVCAjaxGraphResponse");
    };
    WorkunitsServiceBase.prototype.Ping = function (request) {
        return this._connection.send("Ping", request, "json", false, undefined, "WsWorkunitsPingResponse");
    };
    WorkunitsServiceBase.prototype.WUAbort = function (request) {
        return this._connection.send("WUAbort", request, "json", false, undefined, "WUAbortResponse");
    };
    WorkunitsServiceBase.prototype.WUAction = function (request) {
        return this._connection.send("WUAction", request, "json", false, undefined, "WUActionResponse");
    };
    WorkunitsServiceBase.prototype.WUAddLocalFileToWorkunit = function (request) {
        return this._connection.send("WUAddLocalFileToWorkunit", request, "json", false, undefined, "WUAddLocalFileToWorkunitResponse");
    };
    WorkunitsServiceBase.prototype.WUAnalyseHotspot = function (request) {
        return this._connection.send("WUAnalyseHotspot", request, "json", false, undefined, "WUAnalyseHotspotResponse");
    };
    WorkunitsServiceBase.prototype.WUCDebug = function (request) {
        return this._connection.send("WUCDebug", request, "json", false, undefined, "WUDebugResponse");
    };
    WorkunitsServiceBase.prototype.WUCheckFeatures = function (request) {
        return this._connection.send("WUCheckFeatures", request, "json", false, undefined, "WUCheckFeaturesResponse");
    };
    WorkunitsServiceBase.prototype.WUClusterJobQueueLOG = function (request) {
        return this._connection.send("WUClusterJobQueueLOG", request, "json", false, undefined, "WUClusterJobQueueLOGResponse");
    };
    WorkunitsServiceBase.prototype.WUClusterJobQueueXLS = function (request) {
        return this._connection.send("WUClusterJobQueueXLS", request, "json", false, undefined, "WUClusterJobQueueXLSResponse");
    };
    WorkunitsServiceBase.prototype.WUClusterJobSummaryXLS = function (request) {
        return this._connection.send("WUClusterJobSummaryXLS", request, "json", false, undefined, "WUClusterJobSummaryXLSResponse");
    };
    WorkunitsServiceBase.prototype.WUClusterJobXLS = function (request) {
        return this._connection.send("WUClusterJobXLS", request, "json", false, undefined, "WUClusterJobXLSResponse");
    };
    WorkunitsServiceBase.prototype.WUCompileECL = function (request) {
        return this._connection.send("WUCompileECL", request, "json", false, undefined, "WUCompileECLResponse");
    };
    WorkunitsServiceBase.prototype.WUCopyLogicalFiles = function (request) {
        return this._connection.send("WUCopyLogicalFiles", request, "json", false, undefined, "WUCopyLogicalFilesResponse");
    };
    WorkunitsServiceBase.prototype.WUCopyQuerySet = function (request) {
        return this._connection.send("WUCopyQuerySet", request, "json", false, undefined, "WUCopyQuerySetResponse");
    };
    WorkunitsServiceBase.prototype.WUCreate = function (request) {
        return this._connection.send("WUCreate", request, "json", false, undefined, "WUCreateResponse");
    };
    WorkunitsServiceBase.prototype.WUCreateAndUpdate = function (request) {
        return this._connection.send("WUCreateAndUpdate", request, "json", false, undefined, "WUUpdateResponse");
    };
    WorkunitsServiceBase.prototype.WUCreateZAPInfo = function (request) {
        return this._connection.send("WUCreateZAPInfo", request, "json", false, undefined, "WUCreateZAPInfoResponse");
    };
    WorkunitsServiceBase.prototype.WUDelete = function (request) {
        return this._connection.send("WUDelete", request, "json", false, undefined, "WUDeleteResponse");
    };
    WorkunitsServiceBase.prototype.WUDeployWorkunit = function (request) {
        return this._connection.send("WUDeployWorkunit", request, "json", false, undefined, "WUDeployWorkunitResponse");
    };
    WorkunitsServiceBase.prototype.WUDetails = function (request) {
        return this._connection.send("WUDetails", request, "json", false, undefined, "WUDetailsResponse");
    };
    WorkunitsServiceBase.prototype.WUDetailsMeta = function (request) {
        return this._connection.send("WUDetailsMeta", request, "json", false, undefined, "WUDetailsMetaResponse");
    };
    WorkunitsServiceBase.prototype.WUEclDefinitionAction = function (request) {
        return this._connection.send("WUEclDefinitionAction", request, "json", false, undefined, "WUEclDefinitionActionResponse");
    };
    WorkunitsServiceBase.prototype.WUExport = function (request) {
        return this._connection.send("WUExport", request, "json", false, undefined, "WUExportResponse");
    };
    WorkunitsServiceBase.prototype.WUFile = function (request) {
        return this._connection.send("WUFile", request, "json", false, undefined, "WULogFileResponse");
    };
    WorkunitsServiceBase.prototype.WUFullResult = function (request) {
        return this._connection.send("WUFullResult", request, "json", false, undefined, "WUFullResultResponse");
    };
    WorkunitsServiceBase.prototype.WUGVCGraphInfo = function (request) {
        return this._connection.send("WUGVCGraphInfo", request, "json", false, undefined, "WUGVCGraphInfoResponse");
    };
    WorkunitsServiceBase.prototype.WUGetArchiveFile = function (request) {
        return this._connection.send("WUGetArchiveFile", request, "json", false, undefined, "WUGetArchiveFileResponse");
    };
    WorkunitsServiceBase.prototype.WUGetDependancyTrees = function (request) {
        return this._connection.send("WUGetDependancyTrees", request, "json", false, undefined, "WUGetDependancyTreesResponse");
    };
    WorkunitsServiceBase.prototype.WUGetGraph = function (request) {
        return this._connection.send("WUGetGraph", request, "json", false, undefined, "WUGetGraphResponse");
    };
    WorkunitsServiceBase.prototype.WUGetGraphNameAndTypes = function (request) {
        return this._connection.send("WUGetGraphNameAndTypes", request, "json", false, undefined, "WUGetGraphNameAndTypesResponse");
    };
    WorkunitsServiceBase.prototype.WUGetNumFileToCopy = function (request) {
        return this._connection.send("WUGetNumFileToCopy", request, "json", false, undefined, "WUGetNumFileToCopyResponse");
    };
    WorkunitsServiceBase.prototype.WUGetPlugins = function (request) {
        return this._connection.send("WUGetPlugins", request, "json", false, undefined, "WUGetPluginsResponse");
    };
    WorkunitsServiceBase.prototype.WUGetStats = function (request) {
        return this._connection.send("WUGetStats", request, "json", false, undefined, "WUGetStatsResponse");
    };
    WorkunitsServiceBase.prototype.WUGetThorJobList = function (request) {
        return this._connection.send("WUGetThorJobList", request, "json", false, undefined, "WUGetThorJobListResponse");
    };
    WorkunitsServiceBase.prototype.WUGetThorJobQueue = function (request) {
        return this._connection.send("WUGetThorJobQueue", request, "json", false, undefined, "WUGetThorJobQueueResponse");
    };
    WorkunitsServiceBase.prototype.WUGetZAPInfo = function (request) {
        return this._connection.send("WUGetZAPInfo", request, "json", false, undefined, "WUGetZAPInfoResponse");
    };
    WorkunitsServiceBase.prototype.WUGraphInfo = function (request) {
        return this._connection.send("WUGraphInfo", request, "json", false, undefined, "WUGraphInfoResponse");
    };
    WorkunitsServiceBase.prototype.WUGraphTiming = function (request) {
        return this._connection.send("WUGraphTiming", request, "json", false, undefined, "WUGraphTimingResponse");
    };
    WorkunitsServiceBase.prototype.WUInfo = function (request) {
        return this._connection.send("WUInfo", request, "json", false, undefined, "WUInfoResponse");
    };
    WorkunitsServiceBase.prototype.WUInfoDetails = function (request) {
        return this._connection.send("WUInfoDetails", request, "json", false, undefined, "WUInfoResponse");
    };
    WorkunitsServiceBase.prototype.WUJobList = function (request) {
        return this._connection.send("WUJobList", request, "json", false, undefined, "WUJobListResponse");
    };
    WorkunitsServiceBase.prototype.WULightWeightQuery = function (request) {
        return this._connection.send("WULightWeightQuery", request, "json", false, undefined, "WULightWeightQueryResponse");
    };
    WorkunitsServiceBase.prototype.WUListArchiveFiles = function (request) {
        return this._connection.send("WUListArchiveFiles", request, "json", false, undefined, "WUListArchiveFilesResponse");
    };
    WorkunitsServiceBase.prototype.WUListLocalFileRequired = function (request) {
        return this._connection.send("WUListLocalFileRequired", request, "json", false, undefined, "WUListLocalFileRequiredResponse");
    };
    WorkunitsServiceBase.prototype.WUListQueries = function (request) {
        return this._connection.send("WUListQueries", request, "json", false, undefined, "WUListQueriesResponse");
    };
    WorkunitsServiceBase.prototype.WUListQueriesUsingFile = function (request) {
        return this._connection.send("WUListQueriesUsingFile", request, "json", false, undefined, "WUListQueriesUsingFileResponse");
    };
    WorkunitsServiceBase.prototype.WUMultiQuerysetDetails = function (request) {
        return this._connection.send("WUMultiQuerysetDetails", request, "json", false, undefined, "WUMultiQuerySetDetailsResponse");
    };
    WorkunitsServiceBase.prototype.WUProcessGraph = function (request) {
        return this._connection.send("WUProcessGraph", request, "json", false, undefined, "WUProcessGraphResponse");
    };
    WorkunitsServiceBase.prototype.WUProtect = function (request) {
        return this._connection.send("WUProtect", request, "json", false, undefined, "WUProtectResponse");
    };
    WorkunitsServiceBase.prototype.WUPublishWorkunit = function (request) {
        return this._connection.send("WUPublishWorkunit", request, "json", false, undefined, "WUPublishWorkunitResponse");
    };
    WorkunitsServiceBase.prototype.WUPushEvent = function (request) {
        return this._connection.send("WUPushEvent", request, "json", false, undefined, "WUPushEventResponse");
    };
    WorkunitsServiceBase.prototype.WUQuery = function (request) {
        return this._connection.send("WUQuery", request, "json", false, undefined, "WUQueryResponse");
    };
    WorkunitsServiceBase.prototype.WUQueryConfig = function (request) {
        return this._connection.send("WUQueryConfig", request, "json", false, undefined, "WUQueryConfigResponse");
    };
    WorkunitsServiceBase.prototype.WUQueryDetails = function (request) {
        return this._connection.send("WUQueryDetails", request, "json", false, undefined, "WUQueryDetailsResponse");
    };
    WorkunitsServiceBase.prototype.WUQueryDetailsLightWeight = function (request) {
        return this._connection.send("WUQueryDetailsLightWeight", request, "json", false, undefined, "WUQueryDetailsResponse");
    };
    WorkunitsServiceBase.prototype.WUQueryFiles = function (request) {
        return this._connection.send("WUQueryFiles", request, "json", false, undefined, "WUQueryFilesResponse");
    };
    WorkunitsServiceBase.prototype.WUQueryGetGraph = function (request) {
        return this._connection.send("WUQueryGetGraph", request, "json", false, undefined, "WUQueryGetGraphResponse");
    };
    WorkunitsServiceBase.prototype.WUQueryGetSummaryStats = function (request) {
        return this._connection.send("WUQueryGetSummaryStats", request, "json", false, undefined, "WUQueryGetSummaryStatsResponse");
    };
    WorkunitsServiceBase.prototype.WUQuerysetAliasAction = function (request) {
        return this._connection.send("WUQuerysetAliasAction", request, "json", false, undefined, "WUQuerySetAliasActionResponse");
    };
    WorkunitsServiceBase.prototype.WUQuerysetCopyQuery = function (request) {
        return this._connection.send("WUQuerysetCopyQuery", request, "json", false, undefined, "WUQuerySetCopyQueryResponse");
    };
    WorkunitsServiceBase.prototype.WUQuerysetDetails = function (request) {
        return this._connection.send("WUQuerysetDetails", request, "json", false, undefined, "WUQuerySetDetailsResponse");
    };
    WorkunitsServiceBase.prototype.WUQuerysetExport = function (request) {
        return this._connection.send("WUQuerysetExport", request, "json", false, undefined, "WUQuerysetExportResponse");
    };
    WorkunitsServiceBase.prototype.WUQuerysetImport = function (request) {
        return this._connection.send("WUQuerysetImport", request, "json", false, undefined, "WUQuerysetImportResponse");
    };
    WorkunitsServiceBase.prototype.WUQuerysetQueryAction = function (request) {
        return this._connection.send("WUQuerysetQueryAction", request, "json", false, undefined, "WUQuerySetQueryActionResponse");
    };
    WorkunitsServiceBase.prototype.WUQuerysets = function (request) {
        return this._connection.send("WUQuerysets", request, "json", false, undefined, "WUQuerysetsResponse");
    };
    WorkunitsServiceBase.prototype.WURecreateQuery = function (request) {
        return this._connection.send("WURecreateQuery", request, "json", false, undefined, "WURecreateQueryResponse");
    };
    WorkunitsServiceBase.prototype.WUResubmit = function (request) {
        return this._connection.send("WUResubmit", request, "json", false, undefined, "WUResubmitResponse");
    };
    WorkunitsServiceBase.prototype.WUResult = function (request) {
        return this._connection.send("WUResult", request, "json", false, undefined, "WUResultResponse");
    };
    WorkunitsServiceBase.prototype.WUResultBin = function (request) {
        return this._connection.send("WUResultBin", request, "json", false, undefined, "WUResultBinResponse");
    };
    WorkunitsServiceBase.prototype.WUResultSummary = function (request) {
        return this._connection.send("WUResultSummary", request, "json", false, undefined, "WUResultSummaryResponse");
    };
    WorkunitsServiceBase.prototype.WUResultView = function (request) {
        return this._connection.send("WUResultView", request, "json", false, undefined, "WUResultViewResponse");
    };
    WorkunitsServiceBase.prototype.WURun = function (request) {
        return this._connection.send("WURun", request, "json", false, undefined, "WURunResponse");
    };
    WorkunitsServiceBase.prototype.WUSchedule = function (request) {
        return this._connection.send("WUSchedule", request, "json", false, undefined, "WUScheduleResponse");
    };
    WorkunitsServiceBase.prototype.WUShowScheduled = function (request) {
        return this._connection.send("WUShowScheduled", request, "json", false, undefined, "WUShowScheduledResponse");
    };
    WorkunitsServiceBase.prototype.WUSubmit = function (request) {
        return this._connection.send("WUSubmit", request, "json", false, undefined, "WUSubmitResponse");
    };
    WorkunitsServiceBase.prototype.WUSyntaxCheckECL = function (request) {
        return this._connection.send("WUSyntaxCheckECL", request, "json", false, undefined, "WUSyntaxCheckResponse");
    };
    WorkunitsServiceBase.prototype.WUUpdate = function (request) {
        return this._connection.send("WUUpdate", request, "json", false, undefined, "WUUpdateResponse");
    };
    WorkunitsServiceBase.prototype.WUUpdateQueryEntry = function (request) {
        return this._connection.send("WUUpdateQueryEntry", request, "json", false, undefined, "WUUpdateQueryEntryResponse");
    };
    WorkunitsServiceBase.prototype.WUWaitCompiled = function (request) {
        return this._connection.send("WUWaitCompiled", request, "json", false, undefined, "WUWaitResponse");
    };
    WorkunitsServiceBase.prototype.WUWaitComplete = function (request) {
        return this._connection.send("WUWaitComplete", request, "json", false, undefined, "WUWaitResponse");
    };
    return WorkunitsServiceBase;
}(Service));

var WUStateID;
(function (WUStateID) {
    WUStateID[WUStateID["Unknown"] = 0] = "Unknown";
    WUStateID[WUStateID["Compiled"] = 1] = "Compiled";
    WUStateID[WUStateID["Running"] = 2] = "Running";
    WUStateID[WUStateID["Completed"] = 3] = "Completed";
    WUStateID[WUStateID["Failed"] = 4] = "Failed";
    WUStateID[WUStateID["Archived"] = 5] = "Archived";
    WUStateID[WUStateID["Aborting"] = 6] = "Aborting";
    WUStateID[WUStateID["Aborted"] = 7] = "Aborted";
    WUStateID[WUStateID["Blocked"] = 8] = "Blocked";
    WUStateID[WUStateID["Submitted"] = 9] = "Submitted";
    WUStateID[WUStateID["Scheduled"] = 10] = "Scheduled";
    WUStateID[WUStateID["Compiling"] = 11] = "Compiling";
    WUStateID[WUStateID["Wait"] = 12] = "Wait";
    WUStateID[WUStateID["UploadingFiled"] = 13] = "UploadingFiled";
    WUStateID[WUStateID["DebugPaused"] = 14] = "DebugPaused";
    WUStateID[WUStateID["DebugRunning"] = 15] = "DebugRunning";
    WUStateID[WUStateID["Paused"] = 16] = "Paused";
    WUStateID[WUStateID["LAST"] = 17] = "LAST";
    WUStateID[WUStateID["NotFound"] = 999] = "NotFound";
})(WUStateID || (WUStateID = {}));
var WUUpdate;
(function (WUUpdate) {
    (function (Action) {
        Action[Action["Unknown"] = 0] = "Unknown";
        Action[Action["Compile"] = 1] = "Compile";
        Action[Action["Check"] = 2] = "Check";
        Action[Action["Run"] = 3] = "Run";
        Action[Action["ExecuteExisting"] = 4] = "ExecuteExisting";
        Action[Action["Pause"] = 5] = "Pause";
        Action[Action["PauseNow"] = 6] = "PauseNow";
        Action[Action["Resume"] = 7] = "Resume";
        Action[Action["Debug"] = 8] = "Debug";
        Action[Action["__size"] = 9] = "__size";
    })(WUUpdate.Action || (WUUpdate.Action = {}));
})(WUUpdate || (WUUpdate = {}));
function isECLResult(_) {
    return typeof _.Name === "string";
}
function isWUQueryECLWorkunit(_) {
    return _.TotalClusterTime !== undefined;
}
function isWUInfoWorkunit(_) {
    return _.StateEx !== undefined;
}
var WorkunitsService = /** @class */ (function (_super) {
    __extends(WorkunitsService, _super);
    function WorkunitsService(optsConnection) {
        return _super.call(this, optsConnection) || this;
    }
    WorkunitsService.prototype.opts = function () {
        return this._connection.opts();
    };
    WorkunitsService.prototype.connection = function () {
        return this._connection.clone();
    };
    WorkunitsService.prototype.Ping = function () {
        return this._connection.send("Ping", {}, "json", false, undefined, "WsWorkunitsPingResponse").then(function (response) {
            return { result: true };
        }).catch(function (e) {
            return { result: false, error: e };
        });
    };
    WorkunitsService.prototype.WUQuery = function (request, abortSignal) {
        if (request === void 0) { request = {}; }
        return this._connection.send("WUQuery", request, "json", false, abortSignal).then(function (response) {
            return deepMixin({ Workunits: { ECLWorkunit: [] } }, response);
        });
    };
    WorkunitsService.prototype.WUInfo = function (_request) {
        var request = __assign({ Wuid: "", TruncateEclTo64k: true, IncludeExceptions: false, IncludeGraphs: false, IncludeSourceFiles: false, IncludeResults: false, IncludeResultsViewNames: false, IncludeVariables: false, IncludeTimers: false, IncludeDebugValues: false, IncludeApplicationValues: false, IncludeWorkflows: false, IncludeXmlSchemas: false, IncludeResourceURLs: false, IncludeECL: false, IncludeHelpers: false, IncludeAllowedClusters: false, IncludeTotalClusterTime: false, IncludeServiceNames: false, SuppressResultSchemas: true }, _request);
        return _super.prototype.WUInfo.call(this, request);
    };
    WorkunitsService.prototype.WUCreate = function () {
        return _super.prototype.WUCreate.call(this, {});
    };
    WorkunitsService.prototype.WUUpdate = function (request) {
        return this._connection.send("WUUpdate", request, "json", true);
    };
    WorkunitsService.prototype.WUResubmit = function (request) {
        this._connection.toESPStringArray(request, "Wuids");
        return _super.prototype.WUResubmit.call(this, request);
    };
    WorkunitsService.prototype.WUAction = function (request) {
        request.ActionType = request.WUActionType; //  v5.x compatibility
        return _super.prototype.WUAction.call(this, request);
    };
    WorkunitsService.prototype.WUResult = function (request, abortSignal) {
        return this._connection.send("WUResult", request, "json", false, abortSignal);
    };
    WorkunitsService.prototype.WUFileEx = function (request) {
        return this._connection.send("WUFile", request, "text");
    };
    WorkunitsService.prototype.WUDetailsMeta = function (request) {
        if (!this._WUDetailsMetaPromise) {
            this._WUDetailsMetaPromise = _super.prototype.WUDetailsMeta.call(this, request);
        }
        return this._WUDetailsMetaPromise;
    };
    WorkunitsService.prototype.WUCDebugEx = function (request) {
        return this._connection.send("WUCDebug", request, undefined, undefined, undefined, "WUDebug").then(function (response) {
            var retVal = xml2json(response.Result);
            var children = retVal.children();
            if (children.length) {
                return children[0];
            }
            return null;
        });
    };
    return WorkunitsService;
}(WorkunitsServiceBase));
var WorkunitsServiceEx = /** @class */ (function (_super) {
    __extends(WorkunitsServiceEx, _super);
    function WorkunitsServiceEx() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    WorkunitsServiceEx.prototype.WUPublishWorkunitEx = function (request) {
        return this._connection.send("WUPublishWorkunit", request);
    };
    return WorkunitsServiceEx;
}(WorkunitsServiceBase));

function formatDecimal(x) {
  return Math.abs(x = Math.round(x)) >= 1e21
      ? x.toLocaleString("en").replace(/,/g, "")
      : x.toString(10);
}

// Computes the decimal coefficient and exponent of the specified number x with
// significant digits p, where x is positive and p is in [1, 21] or undefined.
// For example, formatDecimalParts(1.23) returns ["123", 0].
function formatDecimalParts(x, p) {
  if ((i = (x = p ? x.toExponential(p - 1) : x.toExponential()).indexOf("e")) < 0) return null; // NaN, ±Infinity
  var i, coefficient = x.slice(0, i);

  // The string returned by toExponential either has the form \d\.\d+e[-+]\d+
  // (e.g., 1.2e+3) or the form \de[-+]\d+ (e.g., 1e+3).
  return [
    coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient,
    +x.slice(i + 1)
  ];
}

function exponent(x) {
  return x = formatDecimalParts(Math.abs(x)), x ? x[1] : NaN;
}

function formatGroup(grouping, thousands) {
  return function(value, width) {
    var i = value.length,
        t = [],
        j = 0,
        g = grouping[0],
        length = 0;

    while (i > 0 && g > 0) {
      if (length + g + 1 > width) g = Math.max(1, width - length);
      t.push(value.substring(i -= g, i + g));
      if ((length += g + 1) > width) break;
      g = grouping[j = (j + 1) % grouping.length];
    }

    return t.reverse().join(thousands);
  };
}

function formatNumerals(numerals) {
  return function(value) {
    return value.replace(/[0-9]/g, function(i) {
      return numerals[+i];
    });
  };
}

// [[fill]align][sign][symbol][0][width][,][.precision][~][type]
var re = /^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;

function formatSpecifier(specifier) {
  if (!(match = re.exec(specifier))) throw new Error("invalid format: " + specifier);
  var match;
  return new FormatSpecifier({
    fill: match[1],
    align: match[2],
    sign: match[3],
    symbol: match[4],
    zero: match[5],
    width: match[6],
    comma: match[7],
    precision: match[8] && match[8].slice(1),
    trim: match[9],
    type: match[10]
  });
}

formatSpecifier.prototype = FormatSpecifier.prototype; // instanceof

function FormatSpecifier(specifier) {
  this.fill = specifier.fill === undefined ? " " : specifier.fill + "";
  this.align = specifier.align === undefined ? ">" : specifier.align + "";
  this.sign = specifier.sign === undefined ? "-" : specifier.sign + "";
  this.symbol = specifier.symbol === undefined ? "" : specifier.symbol + "";
  this.zero = !!specifier.zero;
  this.width = specifier.width === undefined ? undefined : +specifier.width;
  this.comma = !!specifier.comma;
  this.precision = specifier.precision === undefined ? undefined : +specifier.precision;
  this.trim = !!specifier.trim;
  this.type = specifier.type === undefined ? "" : specifier.type + "";
}

FormatSpecifier.prototype.toString = function() {
  return this.fill
      + this.align
      + this.sign
      + this.symbol
      + (this.zero ? "0" : "")
      + (this.width === undefined ? "" : Math.max(1, this.width | 0))
      + (this.comma ? "," : "")
      + (this.precision === undefined ? "" : "." + Math.max(0, this.precision | 0))
      + (this.trim ? "~" : "")
      + this.type;
};

// Trims insignificant zeros, e.g., replaces 1.2000k with 1.2k.
function formatTrim(s) {
  out: for (var n = s.length, i = 1, i0 = -1, i1; i < n; ++i) {
    switch (s[i]) {
      case ".": i0 = i1 = i; break;
      case "0": if (i0 === 0) i0 = i; i1 = i; break;
      default: if (!+s[i]) break out; if (i0 > 0) i0 = 0; break;
    }
  }
  return i0 > 0 ? s.slice(0, i0) + s.slice(i1 + 1) : s;
}

var prefixExponent;

function formatPrefixAuto(x, p) {
  var d = formatDecimalParts(x, p);
  if (!d) return x + "";
  var coefficient = d[0],
      exponent = d[1],
      i = exponent - (prefixExponent = Math.max(-8, Math.min(8, Math.floor(exponent / 3))) * 3) + 1,
      n = coefficient.length;
  return i === n ? coefficient
      : i > n ? coefficient + new Array(i - n + 1).join("0")
      : i > 0 ? coefficient.slice(0, i) + "." + coefficient.slice(i)
      : "0." + new Array(1 - i).join("0") + formatDecimalParts(x, Math.max(0, p + i - 1))[0]; // less than 1y!
}

function formatRounded(x, p) {
  var d = formatDecimalParts(x, p);
  if (!d) return x + "";
  var coefficient = d[0],
      exponent = d[1];
  return exponent < 0 ? "0." + new Array(-exponent).join("0") + coefficient
      : coefficient.length > exponent + 1 ? coefficient.slice(0, exponent + 1) + "." + coefficient.slice(exponent + 1)
      : coefficient + new Array(exponent - coefficient.length + 2).join("0");
}

var formatTypes = {
  "%": function(x, p) { return (x * 100).toFixed(p); },
  "b": function(x) { return Math.round(x).toString(2); },
  "c": function(x) { return x + ""; },
  "d": formatDecimal,
  "e": function(x, p) { return x.toExponential(p); },
  "f": function(x, p) { return x.toFixed(p); },
  "g": function(x, p) { return x.toPrecision(p); },
  "o": function(x) { return Math.round(x).toString(8); },
  "p": function(x, p) { return formatRounded(x * 100, p); },
  "r": formatRounded,
  "s": formatPrefixAuto,
  "X": function(x) { return Math.round(x).toString(16).toUpperCase(); },
  "x": function(x) { return Math.round(x).toString(16); }
};

function identity(x) {
  return x;
}

var map = Array.prototype.map,
    prefixes = ["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];

function formatLocale$1(locale) {
  var group = locale.grouping === undefined || locale.thousands === undefined ? identity : formatGroup(map.call(locale.grouping, Number), locale.thousands + ""),
      currencyPrefix = locale.currency === undefined ? "" : locale.currency[0] + "",
      currencySuffix = locale.currency === undefined ? "" : locale.currency[1] + "",
      decimal = locale.decimal === undefined ? "." : locale.decimal + "",
      numerals = locale.numerals === undefined ? identity : formatNumerals(map.call(locale.numerals, String)),
      percent = locale.percent === undefined ? "%" : locale.percent + "",
      minus = locale.minus === undefined ? "-" : locale.minus + "",
      nan = locale.nan === undefined ? "NaN" : locale.nan + "";

  function newFormat(specifier) {
    specifier = formatSpecifier(specifier);

    var fill = specifier.fill,
        align = specifier.align,
        sign = specifier.sign,
        symbol = specifier.symbol,
        zero = specifier.zero,
        width = specifier.width,
        comma = specifier.comma,
        precision = specifier.precision,
        trim = specifier.trim,
        type = specifier.type;

    // The "n" type is an alias for ",g".
    if (type === "n") comma = true, type = "g";

    // The "" type, and any invalid type, is an alias for ".12~g".
    else if (!formatTypes[type]) precision === undefined && (precision = 12), trim = true, type = "g";

    // If zero fill is specified, padding goes after sign and before digits.
    if (zero || (fill === "0" && align === "=")) zero = true, fill = "0", align = "=";

    // Compute the prefix and suffix.
    // For SI-prefix, the suffix is lazily computed.
    var prefix = symbol === "$" ? currencyPrefix : symbol === "#" && /[boxX]/.test(type) ? "0" + type.toLowerCase() : "",
        suffix = symbol === "$" ? currencySuffix : /[%p]/.test(type) ? percent : "";

    // What format function should we use?
    // Is this an integer type?
    // Can this type generate exponential notation?
    var formatType = formatTypes[type],
        maybeSuffix = /[defgprs%]/.test(type);

    // Set the default precision if not specified,
    // or clamp the specified precision to the supported range.
    // For significant precision, it must be in [1, 21].
    // For fixed precision, it must be in [0, 20].
    precision = precision === undefined ? 6
        : /[gprs]/.test(type) ? Math.max(1, Math.min(21, precision))
        : Math.max(0, Math.min(20, precision));

    function format(value) {
      var valuePrefix = prefix,
          valueSuffix = suffix,
          i, n, c;

      if (type === "c") {
        valueSuffix = formatType(value) + valueSuffix;
        value = "";
      } else {
        value = +value;

        // Determine the sign. -0 is not less than 0, but 1 / -0 is!
        var valueNegative = value < 0 || 1 / value < 0;

        // Perform the initial formatting.
        value = isNaN(value) ? nan : formatType(Math.abs(value), precision);

        // Trim insignificant zeros.
        if (trim) value = formatTrim(value);

        // If a negative value rounds to zero after formatting, and no explicit positive sign is requested, hide the sign.
        if (valueNegative && +value === 0 && sign !== "+") valueNegative = false;

        // Compute the prefix and suffix.
        valuePrefix = (valueNegative ? (sign === "(" ? sign : minus) : sign === "-" || sign === "(" ? "" : sign) + valuePrefix;
        valueSuffix = (type === "s" ? prefixes[8 + prefixExponent / 3] : "") + valueSuffix + (valueNegative && sign === "(" ? ")" : "");

        // Break the formatted value into the integer “value” part that can be
        // grouped, and fractional or exponential “suffix” part that is not.
        if (maybeSuffix) {
          i = -1, n = value.length;
          while (++i < n) {
            if (c = value.charCodeAt(i), 48 > c || c > 57) {
              valueSuffix = (c === 46 ? decimal + value.slice(i + 1) : value.slice(i)) + valueSuffix;
              value = value.slice(0, i);
              break;
            }
          }
        }
      }

      // If the fill character is not "0", grouping is applied before padding.
      if (comma && !zero) value = group(value, Infinity);

      // Compute the padding.
      var length = valuePrefix.length + value.length + valueSuffix.length,
          padding = length < width ? new Array(width - length + 1).join(fill) : "";

      // If the fill character is "0", grouping is applied after padding.
      if (comma && zero) value = group(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = "";

      // Reconstruct the final output based on the desired alignment.
      switch (align) {
        case "<": value = valuePrefix + value + valueSuffix + padding; break;
        case "=": value = valuePrefix + padding + value + valueSuffix; break;
        case "^": value = padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length); break;
        default: value = padding + valuePrefix + value + valueSuffix; break;
      }

      return numerals(value);
    }

    format.toString = function() {
      return specifier + "";
    };

    return format;
  }

  function formatPrefix(specifier, value) {
    var f = newFormat((specifier = formatSpecifier(specifier), specifier.type = "f", specifier)),
        e = Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3,
        k = Math.pow(10, -e),
        prefix = prefixes[8 + e / 3];
    return function(value) {
      return f(k * value) + prefix;
    };
  }

  return {
    format: newFormat,
    formatPrefix: formatPrefix
  };
}

var locale$1;
var format;

defaultLocale$1({
  decimal: ".",
  thousands: ",",
  grouping: [3],
  currency: ["$", ""],
  minus: "-"
});

function defaultLocale$1(definition) {
  locale$1 = formatLocale$1(definition);
  format = locale$1.format;
  locale$1.formatPrefix;
  return locale$1;
}

var t0 = new Date,
    t1 = new Date;

function newInterval(floori, offseti, count, field) {

  function interval(date) {
    return floori(date = arguments.length === 0 ? new Date : new Date(+date)), date;
  }

  interval.floor = function(date) {
    return floori(date = new Date(+date)), date;
  };

  interval.ceil = function(date) {
    return floori(date = new Date(date - 1)), offseti(date, 1), floori(date), date;
  };

  interval.round = function(date) {
    var d0 = interval(date),
        d1 = interval.ceil(date);
    return date - d0 < d1 - date ? d0 : d1;
  };

  interval.offset = function(date, step) {
    return offseti(date = new Date(+date), step == null ? 1 : Math.floor(step)), date;
  };

  interval.range = function(start, stop, step) {
    var range = [], previous;
    start = interval.ceil(start);
    step = step == null ? 1 : Math.floor(step);
    if (!(start < stop) || !(step > 0)) return range; // also handles Invalid Date
    do range.push(previous = new Date(+start)), offseti(start, step), floori(start);
    while (previous < start && start < stop);
    return range;
  };

  interval.filter = function(test) {
    return newInterval(function(date) {
      if (date >= date) while (floori(date), !test(date)) date.setTime(date - 1);
    }, function(date, step) {
      if (date >= date) {
        if (step < 0) while (++step <= 0) {
          while (offseti(date, -1), !test(date)) {} // eslint-disable-line no-empty
        } else while (--step >= 0) {
          while (offseti(date, +1), !test(date)) {} // eslint-disable-line no-empty
        }
      }
    });
  };

  if (count) {
    interval.count = function(start, end) {
      t0.setTime(+start), t1.setTime(+end);
      floori(t0), floori(t1);
      return Math.floor(count(t0, t1));
    };

    interval.every = function(step) {
      step = Math.floor(step);
      return !isFinite(step) || !(step > 0) ? null
          : !(step > 1) ? interval
          : interval.filter(field
              ? function(d) { return field(d) % step === 0; }
              : function(d) { return interval.count(0, d) % step === 0; });
    };
  }

  return interval;
}

var durationMinute = 6e4;
var durationDay = 864e5;
var durationWeek = 6048e5;

var day = newInterval(function(date) {
  date.setHours(0, 0, 0, 0);
}, function(date, step) {
  date.setDate(date.getDate() + step);
}, function(start, end) {
  return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationDay;
}, function(date) {
  return date.getDate() - 1;
});
day.range;

function weekday(i) {
  return newInterval(function(date) {
    date.setDate(date.getDate() - (date.getDay() + 7 - i) % 7);
    date.setHours(0, 0, 0, 0);
  }, function(date, step) {
    date.setDate(date.getDate() + step * 7);
  }, function(start, end) {
    return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationWeek;
  });
}

var sunday = weekday(0);
var monday = weekday(1);
var tuesday = weekday(2);
var wednesday = weekday(3);
var thursday = weekday(4);
var friday = weekday(5);
var saturday = weekday(6);

sunday.range;
monday.range;
tuesday.range;
wednesday.range;
thursday.range;
friday.range;
saturday.range;

var year = newInterval(function(date) {
  date.setMonth(0, 1);
  date.setHours(0, 0, 0, 0);
}, function(date, step) {
  date.setFullYear(date.getFullYear() + step);
}, function(start, end) {
  return end.getFullYear() - start.getFullYear();
}, function(date) {
  return date.getFullYear();
});

// An optimized implementation for this simple case.
year.every = function(k) {
  return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : newInterval(function(date) {
    date.setFullYear(Math.floor(date.getFullYear() / k) * k);
    date.setMonth(0, 1);
    date.setHours(0, 0, 0, 0);
  }, function(date, step) {
    date.setFullYear(date.getFullYear() + step * k);
  });
};
year.range;

var utcDay = newInterval(function(date) {
  date.setUTCHours(0, 0, 0, 0);
}, function(date, step) {
  date.setUTCDate(date.getUTCDate() + step);
}, function(start, end) {
  return (end - start) / durationDay;
}, function(date) {
  return date.getUTCDate() - 1;
});
utcDay.range;

function utcWeekday(i) {
  return newInterval(function(date) {
    date.setUTCDate(date.getUTCDate() - (date.getUTCDay() + 7 - i) % 7);
    date.setUTCHours(0, 0, 0, 0);
  }, function(date, step) {
    date.setUTCDate(date.getUTCDate() + step * 7);
  }, function(start, end) {
    return (end - start) / durationWeek;
  });
}

var utcSunday = utcWeekday(0);
var utcMonday = utcWeekday(1);
var utcTuesday = utcWeekday(2);
var utcWednesday = utcWeekday(3);
var utcThursday = utcWeekday(4);
var utcFriday = utcWeekday(5);
var utcSaturday = utcWeekday(6);

utcSunday.range;
utcMonday.range;
utcTuesday.range;
utcWednesday.range;
utcThursday.range;
utcFriday.range;
utcSaturday.range;

var utcYear = newInterval(function(date) {
  date.setUTCMonth(0, 1);
  date.setUTCHours(0, 0, 0, 0);
}, function(date, step) {
  date.setUTCFullYear(date.getUTCFullYear() + step);
}, function(start, end) {
  return end.getUTCFullYear() - start.getUTCFullYear();
}, function(date) {
  return date.getUTCFullYear();
});

// An optimized implementation for this simple case.
utcYear.every = function(k) {
  return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : newInterval(function(date) {
    date.setUTCFullYear(Math.floor(date.getUTCFullYear() / k) * k);
    date.setUTCMonth(0, 1);
    date.setUTCHours(0, 0, 0, 0);
  }, function(date, step) {
    date.setUTCFullYear(date.getUTCFullYear() + step * k);
  });
};
utcYear.range;

function localDate(d) {
  if (0 <= d.y && d.y < 100) {
    var date = new Date(-1, d.m, d.d, d.H, d.M, d.S, d.L);
    date.setFullYear(d.y);
    return date;
  }
  return new Date(d.y, d.m, d.d, d.H, d.M, d.S, d.L);
}

function utcDate(d) {
  if (0 <= d.y && d.y < 100) {
    var date = new Date(Date.UTC(-1, d.m, d.d, d.H, d.M, d.S, d.L));
    date.setUTCFullYear(d.y);
    return date;
  }
  return new Date(Date.UTC(d.y, d.m, d.d, d.H, d.M, d.S, d.L));
}

function newDate(y, m, d) {
  return {y: y, m: m, d: d, H: 0, M: 0, S: 0, L: 0};
}

function formatLocale(locale) {
  var locale_dateTime = locale.dateTime,
      locale_date = locale.date,
      locale_time = locale.time,
      locale_periods = locale.periods,
      locale_weekdays = locale.days,
      locale_shortWeekdays = locale.shortDays,
      locale_months = locale.months,
      locale_shortMonths = locale.shortMonths;

  var periodRe = formatRe(locale_periods),
      periodLookup = formatLookup(locale_periods),
      weekdayRe = formatRe(locale_weekdays),
      weekdayLookup = formatLookup(locale_weekdays),
      shortWeekdayRe = formatRe(locale_shortWeekdays),
      shortWeekdayLookup = formatLookup(locale_shortWeekdays),
      monthRe = formatRe(locale_months),
      monthLookup = formatLookup(locale_months),
      shortMonthRe = formatRe(locale_shortMonths),
      shortMonthLookup = formatLookup(locale_shortMonths);

  var formats = {
    "a": formatShortWeekday,
    "A": formatWeekday,
    "b": formatShortMonth,
    "B": formatMonth,
    "c": null,
    "d": formatDayOfMonth,
    "e": formatDayOfMonth,
    "f": formatMicroseconds,
    "g": formatYearISO,
    "G": formatFullYearISO,
    "H": formatHour24,
    "I": formatHour12,
    "j": formatDayOfYear,
    "L": formatMilliseconds,
    "m": formatMonthNumber,
    "M": formatMinutes,
    "p": formatPeriod,
    "q": formatQuarter,
    "Q": formatUnixTimestamp,
    "s": formatUnixTimestampSeconds,
    "S": formatSeconds,
    "u": formatWeekdayNumberMonday,
    "U": formatWeekNumberSunday,
    "V": formatWeekNumberISO,
    "w": formatWeekdayNumberSunday,
    "W": formatWeekNumberMonday,
    "x": null,
    "X": null,
    "y": formatYear,
    "Y": formatFullYear,
    "Z": formatZone,
    "%": formatLiteralPercent
  };

  var utcFormats = {
    "a": formatUTCShortWeekday,
    "A": formatUTCWeekday,
    "b": formatUTCShortMonth,
    "B": formatUTCMonth,
    "c": null,
    "d": formatUTCDayOfMonth,
    "e": formatUTCDayOfMonth,
    "f": formatUTCMicroseconds,
    "g": formatUTCYearISO,
    "G": formatUTCFullYearISO,
    "H": formatUTCHour24,
    "I": formatUTCHour12,
    "j": formatUTCDayOfYear,
    "L": formatUTCMilliseconds,
    "m": formatUTCMonthNumber,
    "M": formatUTCMinutes,
    "p": formatUTCPeriod,
    "q": formatUTCQuarter,
    "Q": formatUnixTimestamp,
    "s": formatUnixTimestampSeconds,
    "S": formatUTCSeconds,
    "u": formatUTCWeekdayNumberMonday,
    "U": formatUTCWeekNumberSunday,
    "V": formatUTCWeekNumberISO,
    "w": formatUTCWeekdayNumberSunday,
    "W": formatUTCWeekNumberMonday,
    "x": null,
    "X": null,
    "y": formatUTCYear,
    "Y": formatUTCFullYear,
    "Z": formatUTCZone,
    "%": formatLiteralPercent
  };

  var parses = {
    "a": parseShortWeekday,
    "A": parseWeekday,
    "b": parseShortMonth,
    "B": parseMonth,
    "c": parseLocaleDateTime,
    "d": parseDayOfMonth,
    "e": parseDayOfMonth,
    "f": parseMicroseconds,
    "g": parseYear,
    "G": parseFullYear,
    "H": parseHour24,
    "I": parseHour24,
    "j": parseDayOfYear,
    "L": parseMilliseconds,
    "m": parseMonthNumber,
    "M": parseMinutes,
    "p": parsePeriod,
    "q": parseQuarter,
    "Q": parseUnixTimestamp,
    "s": parseUnixTimestampSeconds,
    "S": parseSeconds,
    "u": parseWeekdayNumberMonday,
    "U": parseWeekNumberSunday,
    "V": parseWeekNumberISO,
    "w": parseWeekdayNumberSunday,
    "W": parseWeekNumberMonday,
    "x": parseLocaleDate,
    "X": parseLocaleTime,
    "y": parseYear,
    "Y": parseFullYear,
    "Z": parseZone,
    "%": parseLiteralPercent
  };

  // These recursive directive definitions must be deferred.
  formats.x = newFormat(locale_date, formats);
  formats.X = newFormat(locale_time, formats);
  formats.c = newFormat(locale_dateTime, formats);
  utcFormats.x = newFormat(locale_date, utcFormats);
  utcFormats.X = newFormat(locale_time, utcFormats);
  utcFormats.c = newFormat(locale_dateTime, utcFormats);

  function newFormat(specifier, formats) {
    return function(date) {
      var string = [],
          i = -1,
          j = 0,
          n = specifier.length,
          c,
          pad,
          format;

      if (!(date instanceof Date)) date = new Date(+date);

      while (++i < n) {
        if (specifier.charCodeAt(i) === 37) {
          string.push(specifier.slice(j, i));
          if ((pad = pads[c = specifier.charAt(++i)]) != null) c = specifier.charAt(++i);
          else pad = c === "e" ? " " : "0";
          if (format = formats[c]) c = format(date, pad);
          string.push(c);
          j = i + 1;
        }
      }

      string.push(specifier.slice(j, i));
      return string.join("");
    };
  }

  function newParse(specifier, Z) {
    return function(string) {
      var d = newDate(1900, undefined, 1),
          i = parseSpecifier(d, specifier, string += "", 0),
          week, day$1;
      if (i != string.length) return null;

      // If a UNIX timestamp is specified, return it.
      if ("Q" in d) return new Date(d.Q);
      if ("s" in d) return new Date(d.s * 1000 + ("L" in d ? d.L : 0));

      // If this is utcParse, never use the local timezone.
      if (Z && !("Z" in d)) d.Z = 0;

      // The am-pm flag is 0 for AM, and 1 for PM.
      if ("p" in d) d.H = d.H % 12 + d.p * 12;

      // If the month was not specified, inherit from the quarter.
      if (d.m === undefined) d.m = "q" in d ? d.q : 0;

      // Convert day-of-week and week-of-year to day-of-year.
      if ("V" in d) {
        if (d.V < 1 || d.V > 53) return null;
        if (!("w" in d)) d.w = 1;
        if ("Z" in d) {
          week = utcDate(newDate(d.y, 0, 1)), day$1 = week.getUTCDay();
          week = day$1 > 4 || day$1 === 0 ? utcMonday.ceil(week) : utcMonday(week);
          week = utcDay.offset(week, (d.V - 1) * 7);
          d.y = week.getUTCFullYear();
          d.m = week.getUTCMonth();
          d.d = week.getUTCDate() + (d.w + 6) % 7;
        } else {
          week = localDate(newDate(d.y, 0, 1)), day$1 = week.getDay();
          week = day$1 > 4 || day$1 === 0 ? monday.ceil(week) : monday(week);
          week = day.offset(week, (d.V - 1) * 7);
          d.y = week.getFullYear();
          d.m = week.getMonth();
          d.d = week.getDate() + (d.w + 6) % 7;
        }
      } else if ("W" in d || "U" in d) {
        if (!("w" in d)) d.w = "u" in d ? d.u % 7 : "W" in d ? 1 : 0;
        day$1 = "Z" in d ? utcDate(newDate(d.y, 0, 1)).getUTCDay() : localDate(newDate(d.y, 0, 1)).getDay();
        d.m = 0;
        d.d = "W" in d ? (d.w + 6) % 7 + d.W * 7 - (day$1 + 5) % 7 : d.w + d.U * 7 - (day$1 + 6) % 7;
      }

      // If a time zone is specified, all fields are interpreted as UTC and then
      // offset according to the specified time zone.
      if ("Z" in d) {
        d.H += d.Z / 100 | 0;
        d.M += d.Z % 100;
        return utcDate(d);
      }

      // Otherwise, all fields are in local time.
      return localDate(d);
    };
  }

  function parseSpecifier(d, specifier, string, j) {
    var i = 0,
        n = specifier.length,
        m = string.length,
        c,
        parse;

    while (i < n) {
      if (j >= m) return -1;
      c = specifier.charCodeAt(i++);
      if (c === 37) {
        c = specifier.charAt(i++);
        parse = parses[c in pads ? specifier.charAt(i++) : c];
        if (!parse || ((j = parse(d, string, j)) < 0)) return -1;
      } else if (c != string.charCodeAt(j++)) {
        return -1;
      }
    }

    return j;
  }

  function parsePeriod(d, string, i) {
    var n = periodRe.exec(string.slice(i));
    return n ? (d.p = periodLookup[n[0].toLowerCase()], i + n[0].length) : -1;
  }

  function parseShortWeekday(d, string, i) {
    var n = shortWeekdayRe.exec(string.slice(i));
    return n ? (d.w = shortWeekdayLookup[n[0].toLowerCase()], i + n[0].length) : -1;
  }

  function parseWeekday(d, string, i) {
    var n = weekdayRe.exec(string.slice(i));
    return n ? (d.w = weekdayLookup[n[0].toLowerCase()], i + n[0].length) : -1;
  }

  function parseShortMonth(d, string, i) {
    var n = shortMonthRe.exec(string.slice(i));
    return n ? (d.m = shortMonthLookup[n[0].toLowerCase()], i + n[0].length) : -1;
  }

  function parseMonth(d, string, i) {
    var n = monthRe.exec(string.slice(i));
    return n ? (d.m = monthLookup[n[0].toLowerCase()], i + n[0].length) : -1;
  }

  function parseLocaleDateTime(d, string, i) {
    return parseSpecifier(d, locale_dateTime, string, i);
  }

  function parseLocaleDate(d, string, i) {
    return parseSpecifier(d, locale_date, string, i);
  }

  function parseLocaleTime(d, string, i) {
    return parseSpecifier(d, locale_time, string, i);
  }

  function formatShortWeekday(d) {
    return locale_shortWeekdays[d.getDay()];
  }

  function formatWeekday(d) {
    return locale_weekdays[d.getDay()];
  }

  function formatShortMonth(d) {
    return locale_shortMonths[d.getMonth()];
  }

  function formatMonth(d) {
    return locale_months[d.getMonth()];
  }

  function formatPeriod(d) {
    return locale_periods[+(d.getHours() >= 12)];
  }

  function formatQuarter(d) {
    return 1 + ~~(d.getMonth() / 3);
  }

  function formatUTCShortWeekday(d) {
    return locale_shortWeekdays[d.getUTCDay()];
  }

  function formatUTCWeekday(d) {
    return locale_weekdays[d.getUTCDay()];
  }

  function formatUTCShortMonth(d) {
    return locale_shortMonths[d.getUTCMonth()];
  }

  function formatUTCMonth(d) {
    return locale_months[d.getUTCMonth()];
  }

  function formatUTCPeriod(d) {
    return locale_periods[+(d.getUTCHours() >= 12)];
  }

  function formatUTCQuarter(d) {
    return 1 + ~~(d.getUTCMonth() / 3);
  }

  return {
    format: function(specifier) {
      var f = newFormat(specifier += "", formats);
      f.toString = function() { return specifier; };
      return f;
    },
    parse: function(specifier) {
      var p = newParse(specifier += "", false);
      p.toString = function() { return specifier; };
      return p;
    },
    utcFormat: function(specifier) {
      var f = newFormat(specifier += "", utcFormats);
      f.toString = function() { return specifier; };
      return f;
    },
    utcParse: function(specifier) {
      var p = newParse(specifier += "", true);
      p.toString = function() { return specifier; };
      return p;
    }
  };
}

var pads = {"-": "", "_": " ", "0": "0"},
    numberRe = /^\s*\d+/, // note: ignores next directive
    percentRe = /^%/,
    requoteRe = /[\\^$*+?|[\]().{}]/g;

function pad(value, fill, width) {
  var sign = value < 0 ? "-" : "",
      string = (sign ? -value : value) + "",
      length = string.length;
  return sign + (length < width ? new Array(width - length + 1).join(fill) + string : string);
}

function requote(s) {
  return s.replace(requoteRe, "\\$&");
}

function formatRe(names) {
  return new RegExp("^(?:" + names.map(requote).join("|") + ")", "i");
}

function formatLookup(names) {
  var map = {}, i = -1, n = names.length;
  while (++i < n) map[names[i].toLowerCase()] = i;
  return map;
}

function parseWeekdayNumberSunday(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 1));
  return n ? (d.w = +n[0], i + n[0].length) : -1;
}

function parseWeekdayNumberMonday(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 1));
  return n ? (d.u = +n[0], i + n[0].length) : -1;
}

function parseWeekNumberSunday(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.U = +n[0], i + n[0].length) : -1;
}

function parseWeekNumberISO(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.V = +n[0], i + n[0].length) : -1;
}

function parseWeekNumberMonday(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.W = +n[0], i + n[0].length) : -1;
}

function parseFullYear(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 4));
  return n ? (d.y = +n[0], i + n[0].length) : -1;
}

function parseYear(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.y = +n[0] + (+n[0] > 68 ? 1900 : 2000), i + n[0].length) : -1;
}

function parseZone(d, string, i) {
  var n = /^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(string.slice(i, i + 6));
  return n ? (d.Z = n[1] ? 0 : -(n[2] + (n[3] || "00")), i + n[0].length) : -1;
}

function parseQuarter(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 1));
  return n ? (d.q = n[0] * 3 - 3, i + n[0].length) : -1;
}

function parseMonthNumber(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.m = n[0] - 1, i + n[0].length) : -1;
}

function parseDayOfMonth(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.d = +n[0], i + n[0].length) : -1;
}

function parseDayOfYear(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 3));
  return n ? (d.m = 0, d.d = +n[0], i + n[0].length) : -1;
}

function parseHour24(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.H = +n[0], i + n[0].length) : -1;
}

function parseMinutes(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.M = +n[0], i + n[0].length) : -1;
}

function parseSeconds(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.S = +n[0], i + n[0].length) : -1;
}

function parseMilliseconds(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 3));
  return n ? (d.L = +n[0], i + n[0].length) : -1;
}

function parseMicroseconds(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 6));
  return n ? (d.L = Math.floor(n[0] / 1000), i + n[0].length) : -1;
}

function parseLiteralPercent(d, string, i) {
  var n = percentRe.exec(string.slice(i, i + 1));
  return n ? i + n[0].length : -1;
}

function parseUnixTimestamp(d, string, i) {
  var n = numberRe.exec(string.slice(i));
  return n ? (d.Q = +n[0], i + n[0].length) : -1;
}

function parseUnixTimestampSeconds(d, string, i) {
  var n = numberRe.exec(string.slice(i));
  return n ? (d.s = +n[0], i + n[0].length) : -1;
}

function formatDayOfMonth(d, p) {
  return pad(d.getDate(), p, 2);
}

function formatHour24(d, p) {
  return pad(d.getHours(), p, 2);
}

function formatHour12(d, p) {
  return pad(d.getHours() % 12 || 12, p, 2);
}

function formatDayOfYear(d, p) {
  return pad(1 + day.count(year(d), d), p, 3);
}

function formatMilliseconds(d, p) {
  return pad(d.getMilliseconds(), p, 3);
}

function formatMicroseconds(d, p) {
  return formatMilliseconds(d, p) + "000";
}

function formatMonthNumber(d, p) {
  return pad(d.getMonth() + 1, p, 2);
}

function formatMinutes(d, p) {
  return pad(d.getMinutes(), p, 2);
}

function formatSeconds(d, p) {
  return pad(d.getSeconds(), p, 2);
}

function formatWeekdayNumberMonday(d) {
  var day = d.getDay();
  return day === 0 ? 7 : day;
}

function formatWeekNumberSunday(d, p) {
  return pad(sunday.count(year(d) - 1, d), p, 2);
}

function dISO(d) {
  var day = d.getDay();
  return (day >= 4 || day === 0) ? thursday(d) : thursday.ceil(d);
}

function formatWeekNumberISO(d, p) {
  d = dISO(d);
  return pad(thursday.count(year(d), d) + (year(d).getDay() === 4), p, 2);
}

function formatWeekdayNumberSunday(d) {
  return d.getDay();
}

function formatWeekNumberMonday(d, p) {
  return pad(monday.count(year(d) - 1, d), p, 2);
}

function formatYear(d, p) {
  return pad(d.getFullYear() % 100, p, 2);
}

function formatYearISO(d, p) {
  d = dISO(d);
  return pad(d.getFullYear() % 100, p, 2);
}

function formatFullYear(d, p) {
  return pad(d.getFullYear() % 10000, p, 4);
}

function formatFullYearISO(d, p) {
  var day = d.getDay();
  d = (day >= 4 || day === 0) ? thursday(d) : thursday.ceil(d);
  return pad(d.getFullYear() % 10000, p, 4);
}

function formatZone(d) {
  var z = d.getTimezoneOffset();
  return (z > 0 ? "-" : (z *= -1, "+"))
      + pad(z / 60 | 0, "0", 2)
      + pad(z % 60, "0", 2);
}

function formatUTCDayOfMonth(d, p) {
  return pad(d.getUTCDate(), p, 2);
}

function formatUTCHour24(d, p) {
  return pad(d.getUTCHours(), p, 2);
}

function formatUTCHour12(d, p) {
  return pad(d.getUTCHours() % 12 || 12, p, 2);
}

function formatUTCDayOfYear(d, p) {
  return pad(1 + utcDay.count(utcYear(d), d), p, 3);
}

function formatUTCMilliseconds(d, p) {
  return pad(d.getUTCMilliseconds(), p, 3);
}

function formatUTCMicroseconds(d, p) {
  return formatUTCMilliseconds(d, p) + "000";
}

function formatUTCMonthNumber(d, p) {
  return pad(d.getUTCMonth() + 1, p, 2);
}

function formatUTCMinutes(d, p) {
  return pad(d.getUTCMinutes(), p, 2);
}

function formatUTCSeconds(d, p) {
  return pad(d.getUTCSeconds(), p, 2);
}

function formatUTCWeekdayNumberMonday(d) {
  var dow = d.getUTCDay();
  return dow === 0 ? 7 : dow;
}

function formatUTCWeekNumberSunday(d, p) {
  return pad(utcSunday.count(utcYear(d) - 1, d), p, 2);
}

function UTCdISO(d) {
  var day = d.getUTCDay();
  return (day >= 4 || day === 0) ? utcThursday(d) : utcThursday.ceil(d);
}

function formatUTCWeekNumberISO(d, p) {
  d = UTCdISO(d);
  return pad(utcThursday.count(utcYear(d), d) + (utcYear(d).getUTCDay() === 4), p, 2);
}

function formatUTCWeekdayNumberSunday(d) {
  return d.getUTCDay();
}

function formatUTCWeekNumberMonday(d, p) {
  return pad(utcMonday.count(utcYear(d) - 1, d), p, 2);
}

function formatUTCYear(d, p) {
  return pad(d.getUTCFullYear() % 100, p, 2);
}

function formatUTCYearISO(d, p) {
  d = UTCdISO(d);
  return pad(d.getUTCFullYear() % 100, p, 2);
}

function formatUTCFullYear(d, p) {
  return pad(d.getUTCFullYear() % 10000, p, 4);
}

function formatUTCFullYearISO(d, p) {
  var day = d.getUTCDay();
  d = (day >= 4 || day === 0) ? utcThursday(d) : utcThursday.ceil(d);
  return pad(d.getUTCFullYear() % 10000, p, 4);
}

function formatUTCZone() {
  return "+0000";
}

function formatLiteralPercent() {
  return "%";
}

function formatUnixTimestamp(d) {
  return +d;
}

function formatUnixTimestampSeconds(d) {
  return Math.floor(+d / 1000);
}

var locale;
var utcFormat;
var utcParse;

defaultLocale({
  dateTime: "%x, %X",
  date: "%-m/%-d/%Y",
  time: "%-I:%M:%S %p",
  periods: ["AM", "PM"],
  days: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
  shortDays: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
  months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
  shortMonths: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
});

function defaultLocale(definition) {
  locale = formatLocale(definition);
  locale.format;
  locale.parse;
  utcFormat = locale.utcFormat;
  utcParse = locale.utcParse;
  return locale;
}

var ECLGraph = /** @class */ (function (_super) {
    __extends(ECLGraph, _super);
    function ECLGraph(wu, eclGraph, eclTimers) {
        var _this = _super.call(this) || this;
        _this.wu = wu;
        var duration = 0;
        for (var _i = 0, eclTimers_1 = eclTimers; _i < eclTimers_1.length; _i++) {
            var eclTimer = eclTimers_1[_i];
            if (eclTimer.GraphName === eclGraph.Name && !eclTimer.HasSubGraphId) {
                duration = Math.round(eclTimer.Seconds * 1000) / 1000;
                break;
            }
        }
        _this.set(__assign({ Time: duration }, eclGraph));
        return _this;
    }
    Object.defineProperty(ECLGraph.prototype, "properties", {
        get: function () { return this.get(); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ECLGraph.prototype, "Name", {
        get: function () { return this.get("Name"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ECLGraph.prototype, "Label", {
        get: function () { return this.get("Label"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ECLGraph.prototype, "Type", {
        get: function () { return this.get("Type"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ECLGraph.prototype, "Complete", {
        get: function () { return this.get("Complete"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ECLGraph.prototype, "WhenStarted", {
        get: function () { return this.get("WhenStarted"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ECLGraph.prototype, "WhenFinished", {
        get: function () { return this.get("WhenFinished"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ECLGraph.prototype, "Time", {
        get: function () { return this.get("Time"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ECLGraph.prototype, "Running", {
        get: function () { return this.get("Running"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ECLGraph.prototype, "RunningId", {
        get: function () { return this.get("RunningId"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ECLGraph.prototype, "Failed", {
        get: function () { return this.get("Failed"); },
        enumerable: false,
        configurable: true
    });
    ECLGraph.prototype.fetchScopeGraph = function (subgraphID) {
        if (subgraphID) {
            return this.wu.fetchGraphDetails([subgraphID], ["subgraph"]).then(function (scopes) {
                return createGraph(scopes);
            });
        }
        return this.wu.fetchGraphDetails([this.Name], ["graph"]).then(function (scopes) {
            return createGraph(scopes);
        });
    };
    return ECLGraph;
}(StateObject));
var GraphCache = /** @class */ (function (_super) {
    __extends(GraphCache, _super);
    function GraphCache() {
        return _super.call(this, function (obj) {
            return Cache.hash([obj.Name]);
        }) || this;
    }
    return GraphCache;
}(Cache));
function walkXmlJson$1(node, callback, stack) {
    stack = stack || [];
    stack.push(node);
    callback(node.name, node.$, node.children(), stack);
    node.children().forEach(function (childNode) {
        walkXmlJson$1(childNode, callback, stack);
    });
    stack.pop();
}
function flattenAtt(nodes) {
    var retVal = {};
    nodes.forEach(function (node) {
        if (node.name === "att") {
            retVal[node.$["name"]] = node.$["value"];
        }
    });
    return retVal;
}
var XGMMLGraph = /** @class */ (function (_super) {
    __extends(XGMMLGraph, _super);
    function XGMMLGraph() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return XGMMLGraph;
}(Graph));
var XGMMLSubgraph = /** @class */ (function (_super) {
    __extends(XGMMLSubgraph, _super);
    function XGMMLSubgraph() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return XGMMLSubgraph;
}(Subgraph$1));
var XGMMLVertex = /** @class */ (function (_super) {
    __extends(XGMMLVertex, _super);
    function XGMMLVertex() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return XGMMLVertex;
}(Vertex$1));
var XGMMLEdge = /** @class */ (function (_super) {
    __extends(XGMMLEdge, _super);
    function XGMMLEdge() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return XGMMLEdge;
}(Edge$1));
function createXGMMLGraph(id, graphs) {
    var subgraphs = {};
    var vertices = {};
    var edges = {};
    var graph = new XGMMLGraph(function (item) {
        return item._["id"];
    });
    var stack = [graph.root];
    walkXmlJson$1(graphs, function (tag, attributes, childNodes, _stack) {
        var top = stack[stack.length - 1];
        switch (tag) {
            case "graph":
                break;
            case "node":
                if (childNodes.length && childNodes[0].children().length && childNodes[0].children()[0].name === "graph") {
                    var subgraph = top.createSubgraph(flattenAtt(childNodes));
                    stack.push(subgraph);
                    subgraphs[attributes["id"]] = subgraph;
                }
                // TODO:  Is this really a node when its also a subgraph?
                var vertex = top.createVertex(flattenAtt(childNodes));
                vertices[attributes["id"]] = vertex;
                break;
            case "edge":
                var edge = top.createEdge(vertices[attributes["source"]], vertices[attributes["target"]], flattenAtt(childNodes));
                edges[attributes["id"]] = edge;
                break;
        }
    });
    return graph;
}
var ScopeGraph = /** @class */ (function (_super) {
    __extends(ScopeGraph, _super);
    function ScopeGraph() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return ScopeGraph;
}(Graph));
var ScopeSubgraph = /** @class */ (function (_super) {
    __extends(ScopeSubgraph, _super);
    function ScopeSubgraph() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return ScopeSubgraph;
}(Subgraph$1));
var ScopeVertex = /** @class */ (function (_super) {
    __extends(ScopeVertex, _super);
    function ScopeVertex() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return ScopeVertex;
}(Vertex$1));
var ScopeEdge = /** @class */ (function (_super) {
    __extends(ScopeEdge, _super);
    function ScopeEdge() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return ScopeEdge;
}(Edge$1));
function createGraph(scopes) {
    var subgraphs = {};
    var edges = {};
    var vertices = {};
    var graph;
    for (var _i = 0, scopes_1 = scopes; _i < scopes_1.length; _i++) {
        var scope = scopes_1[_i];
        switch (scope.ScopeType) {
            case "graph":
                graph = new ScopeGraph(function (item) { return item._.Id; }, scope);
                subgraphs[scope.ScopeName] = graph.root;
                break;
            case "subgraph":
                if (!graph) {
                    graph = new ScopeGraph(function (item) { return item._.Id; }, scope);
                    subgraphs[scope.ScopeName] = graph.root;
                }
                var scopeStack = scope.parentScope().split(":");
                var scopeParent1 = subgraphs[scope.parentScope()];
                while (scopeStack.length && !scopeParent1) {
                    scopeParent1 = subgraphs[scopeStack.join(":")];
                    scopeStack.pop();
                }
                if (!scopeParent1) {
                    console.warn("Missing SG:Parent (".concat(scope.Id, "): ").concat(scope.parentScope()));
                }
                else {
                    var parent1 = scopeParent1;
                    subgraphs[scope.ScopeName] = parent1.createSubgraph(scope);
                }
                break;
            case "activity":
                var scopeParent2 = subgraphs[scope.parentScope()];
                if (!scopeParent2) {
                    console.warn("Missing A:Parent (".concat(scope.Id, "): ").concat(scope.parentScope()));
                }
                else {
                    vertices[scope.ScopeName] = scopeParent2.createVertex(scope);
                }
                break;
            case "edge":
                edges[scope.ScopeName] = scope;
                break;
            case "function":
                var scopeParent3 = vertices[scope.parentScope()];
                if (!scopeParent3) {
                    console.warn("Missing F:Parent (".concat(scope.Id, "): ").concat(scope.parentScope()));
                }
                else {
                    scopeParent3._.children().push(scope);
                }
                break;
        }
    }
    for (var id in edges) {
        var scope = edges[id];
        var scopeParent3 = subgraphs[scope.parentScope()];
        if (!scopeParent3) {
            console.warn("Missing E:Parent (".concat(scope.Id, "): ").concat(scope.parentScope()));
        }
        else {
            var parent3 = scopeParent3;
            try {
                var source = graph.vertex(scope.attr("IdSource").RawValue);
                var target = graph.vertex(scope.attr("IdTarget").RawValue);
                parent3.createEdge(source, target, scope);
            }
            catch (e) {
                // const sourceIndex = scope.attr("SourceIndex").RawValue;
                // const targetIndex = scope.attr("TargetIndex").RawValue;
                console.warn("Invalid Edge: ".concat(id));
            }
        }
    }
    return graph;
}

var Resource = /** @class */ (function (_super) {
    __extends(Resource, _super);
    function Resource(wu, url) {
        var _this = _super.call(this) || this;
        _this.wu = wu;
        var cleanedURL = url.split("\\").join("/");
        var urlParts = cleanedURL.split("/");
        var matchStr = "res/" + _this.wu.Wuid + "/";
        var displayPath = "";
        var displayName = "";
        if (cleanedURL.indexOf(matchStr) === 0) {
            displayPath = cleanedURL.substr(matchStr.length);
            displayName = urlParts[urlParts.length - 1];
        }
        _this.set({
            URL: url,
            DisplayName: displayName,
            DisplayPath: displayPath
        });
        return _this;
    }
    Object.defineProperty(Resource.prototype, "properties", {
        get: function () { return this.get(); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Resource.prototype, "URL", {
        get: function () { return this.get("URL"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Resource.prototype, "DisplayName", {
        get: function () { return this.get("DisplayName"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Resource.prototype, "DisplayPath", {
        get: function () { return this.get("DisplayPath"); },
        enumerable: false,
        configurable: true
    });
    return Resource;
}(StateObject));

var XSDNode = /** @class */ (function () {
    function XSDNode(e) {
        this.e = e;
    }
    XSDNode.prototype.fix = function () {
        delete this.e;
    };
    return XSDNode;
}());
var XSDXMLNode = /** @class */ (function (_super) {
    __extends(XSDXMLNode, _super);
    function XSDXMLNode(e) {
        var _this = _super.call(this, e) || this;
        _this.isSet = false;
        _this.attrs = {};
        _this._children = [];
        return _this;
    }
    XSDXMLNode.prototype.append = function (child) {
        this._children.push(child);
        if (!this.type) {
            this.type = "hpcc:childDataset";
        }
    };
    XSDXMLNode.prototype.fix = function () {
        var _a;
        this.name = this.e.$["name"];
        this.type = this.e.$["type"];
        for (var i = this._children.length - 1; i >= 0; --i) {
            var row = this._children[i];
            if (row.name === "Row" && row.type === undefined) {
                (_a = this._children).push.apply(_a, row._children);
                this._children.splice(i, 1);
            }
        }
        var setOfType = this.setOfType();
        if (setOfType) {
            this.type = setOfType;
            this.isSet = true;
            this._children = [];
        }
    };
    XSDXMLNode.prototype.children = function () {
        return this._children;
    };
    XSDXMLNode.prototype.isAll = function (node) {
        return node.name === "All" && node.type === undefined;
    };
    XSDXMLNode.prototype.setOfType = function () {
        var children = this.children();
        if (this.type === undefined && children.length === 2) {
            if (this.isAll(children[0])) {
                return children[1].type;
            }
            else if (this.isAll(children[1])) {
                return children[0].type;
            }
        }
        return undefined;
    };
    XSDXMLNode.prototype.charWidth = function () {
        var retVal = -1;
        switch (this.type) {
            case "xs:boolean":
                retVal = 5;
                break;
            case "xs:integer":
                retVal = 8;
                break;
            case "xs:nonNegativeInteger":
                retVal = 8;
                break;
            case "xs:double":
                retVal = 8;
                break;
            case "xs:string":
                retVal = 32;
                break;
            default:
                var numStr = "0123456789";
                var underbarPos = this.type.lastIndexOf("_");
                var length_1 = underbarPos > 0 ? underbarPos : this.type.length;
                var i = length_1 - 1;
                for (; i >= 0; --i) {
                    if (numStr.indexOf(this.type.charAt(i)) === -1)
                        break;
                }
                if (i + 1 < length_1) {
                    retVal = parseInt(this.type.substring(i + 1, length_1), 10);
                }
                if (this.type.indexOf("data") === 0) {
                    retVal *= 2;
                }
                break;
        }
        if (retVal < this.name.length)
            retVal = this.name.length;
        return retVal;
    };
    return XSDXMLNode;
}(XSDNode));
var XSDSimpleType = /** @class */ (function (_super) {
    __extends(XSDSimpleType, _super);
    function XSDSimpleType(e) {
        return _super.call(this, e) || this;
    }
    XSDSimpleType.prototype.append = function (e) {
        switch (e.name) {
            case "xs:restriction":
                this._restricition = e;
                break;
            case "xs:maxLength":
                this._maxLength = e;
                break;
        }
    };
    XSDSimpleType.prototype.fix = function () {
        this.name = this.e.$["name"];
        this.type = this._restricition.$["base"];
        this.maxLength = this._maxLength ? +this._maxLength.$["value"] : undefined;
        delete this._restricition;
        delete this._maxLength;
        _super.prototype.fix.call(this);
    };
    return XSDSimpleType;
}(XSDNode));
var XSDSchema = /** @class */ (function () {
    function XSDSchema() {
        this.simpleTypes = {};
    }
    XSDSchema.prototype.fields = function () {
        return this.root.children();
    };
    return XSDSchema;
}());
var XSDParser = /** @class */ (function (_super) {
    __extends(XSDParser, _super);
    function XSDParser() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.schema = new XSDSchema();
        _this.simpleTypes = {};
        _this.xsdStack = new Stack();
        return _this;
    }
    XSDParser.prototype.startXMLNode = function (e) {
        _super.prototype.startXMLNode.call(this, e);
        switch (e.name) {
            case "xs:element":
                var xsdXMLNode = new XSDXMLNode(e);
                if (!this.schema.root) {
                    this.schema.root = xsdXMLNode;
                }
                else if (this.xsdStack.depth()) {
                    this.xsdStack.top().append(xsdXMLNode);
                }
                this.xsdStack.push(xsdXMLNode);
                break;
            case "xs:simpleType":
                this.simpleType = new XSDSimpleType(e);
                break;
        }
    };
    XSDParser.prototype.endXMLNode = function (e) {
        switch (e.name) {
            case "xs:element":
                var xsdXMLNode = this.xsdStack.pop();
                xsdXMLNode.fix();
                break;
            case "xs:simpleType":
                this.simpleType.fix();
                this.simpleTypes[this.simpleType.name] = this.simpleType;
                delete this.simpleType;
                break;
            case "xs:appinfo":
                var xsdXMLNode2 = this.xsdStack.top();
                for (var key in e.$) {
                    xsdXMLNode2.attrs[key] = e.$[key];
                }
                break;
            default:
                if (this.simpleType) {
                    this.simpleType.append(e);
                }
        }
        _super.prototype.endXMLNode.call(this, e);
    };
    return XSDParser;
}(SAXStackParser));
function parseXSD(xml) {
    var saxParser = new XSDParser();
    saxParser.parse(xml);
    return saxParser.schema;
}
var XSDParser2 = /** @class */ (function (_super) {
    __extends(XSDParser2, _super);
    function XSDParser2(rootName) {
        var _this = _super.call(this) || this;
        _this.schema = new XSDSchema();
        _this.simpleTypes = {};
        _this.xsdStack = new Stack();
        _this._rootName = rootName;
        return _this;
    }
    XSDParser2.prototype.startXMLNode = function (e) {
        _super.prototype.startXMLNode.call(this, e);
        switch (e.name) {
            case "xsd:element":
                var xsdXMLNode = new XSDXMLNode(e);
                if (!this.schema.root && this._rootName === e.$.name) {
                    this.schema.root = xsdXMLNode;
                }
                if (this.xsdStack.depth()) {
                    this.xsdStack.top().append(xsdXMLNode);
                }
                this.xsdStack.push(xsdXMLNode);
                break;
            case "xsd:simpleType":
                this.simpleType = new XSDSimpleType(e);
                break;
        }
    };
    XSDParser2.prototype.endXMLNode = function (e) {
        switch (e.name) {
            case "xsd:element":
                var xsdXMLNode = this.xsdStack.pop();
                xsdXMLNode.fix();
                break;
        }
        _super.prototype.endXMLNode.call(this, e);
    };
    return XSDParser2;
}(XSDParser));
function parseXSD2(xml, rootName) {
    var saxParser = new XSDParser2(rootName);
    saxParser.parse(xml);
    return saxParser.schema;
}

var GlobalResultCache = /** @class */ (function (_super) {
    __extends(GlobalResultCache, _super);
    function GlobalResultCache() {
        return _super.call(this, function (obj) {
            return "".concat(obj.BaseUrl, "-").concat(obj.Wuid, "-").concat(obj.ResultName);
        }) || this;
    }
    return GlobalResultCache;
}(Cache));
var _results = new GlobalResultCache();
var Result = /** @class */ (function (_super) {
    __extends(Result, _super);
    function Result(optsConnection, wuid_NodeGroup, name_sequence_eclResult_logicalFile, resultViews_isLogicalFile) {
        var _this = _super.call(this) || this;
        if (optsConnection instanceof WorkunitsService) {
            _this.connection = optsConnection;
        }
        else {
            _this.connection = new WorkunitsService(optsConnection);
        }
        if (typeof resultViews_isLogicalFile === "boolean" && resultViews_isLogicalFile === true) {
            _this.set({
                NodeGroup: wuid_NodeGroup,
                LogicalFileName: name_sequence_eclResult_logicalFile
            });
        }
        else if (isECLResult(name_sequence_eclResult_logicalFile) && Array.isArray(resultViews_isLogicalFile)) {
            _this.set(__assign(__assign({}, name_sequence_eclResult_logicalFile), { Wuid: wuid_NodeGroup, ResultName: name_sequence_eclResult_logicalFile.Name, ResultViews: resultViews_isLogicalFile }));
        }
        else if (typeof resultViews_isLogicalFile === "undefined") {
            if (typeof name_sequence_eclResult_logicalFile === "number") {
                _this.set({
                    Wuid: wuid_NodeGroup,
                    ResultSequence: name_sequence_eclResult_logicalFile
                });
            }
            else if (typeof name_sequence_eclResult_logicalFile === "string") {
                _this.set({
                    Wuid: wuid_NodeGroup,
                    ResultName: name_sequence_eclResult_logicalFile
                });
            }
            else {
                console.warn("Unknown Result.attach (1)");
            }
        }
        else {
            console.warn("Unknown Result.attach (2)");
        }
        return _this;
    }
    Object.defineProperty(Result.prototype, "BaseUrl", {
        get: function () { return this.connection.baseUrl; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Result.prototype, "properties", {
        get: function () { return this.get(); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Result.prototype, "Wuid", {
        get: function () { return this.get("Wuid"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Result.prototype, "ResultName", {
        get: function () { return this.get("ResultName"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Result.prototype, "ResultSequence", {
        get: function () { return this.get("ResultSequence"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Result.prototype, "LogicalFileName", {
        get: function () { return this.get("LogicalFileName"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Result.prototype, "Name", {
        get: function () { return this.get("Name"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Result.prototype, "Sequence", {
        get: function () { return this.get("Sequence"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Result.prototype, "Value", {
        get: function () { return this.get("Value"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Result.prototype, "Link", {
        get: function () { return this.get("Link"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Result.prototype, "FileName", {
        get: function () { return this.get("FileName"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Result.prototype, "IsSupplied", {
        get: function () { return this.get("IsSupplied"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Result.prototype, "ShowFileContent", {
        get: function () { return this.get("ShowFileContent"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Result.prototype, "Total", {
        get: function () { return this.get("Total"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Result.prototype, "ECLSchemas", {
        get: function () { return this.get("ECLSchemas"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Result.prototype, "NodeGroup", {
        get: function () { return this.get("NodeGroup"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Result.prototype, "ResultViews", {
        get: function () { return this.get("ResultViews"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Result.prototype, "XmlSchema", {
        get: function () { return this.get("XmlSchema"); },
        enumerable: false,
        configurable: true
    });
    Result.attach = function (optsConnection, wuid, name_sequence_eclResult, resultViews) {
        var retVal;
        if (Array.isArray(resultViews)) {
            retVal = _results.get({ BaseUrl: optsConnection.baseUrl, Wuid: wuid, ResultName: name_sequence_eclResult.Name }, function () {
                return new Result(optsConnection, wuid, name_sequence_eclResult, resultViews);
            });
            retVal.set(name_sequence_eclResult);
        }
        else if (typeof resultViews === "undefined") {
            if (typeof name_sequence_eclResult === "number") {
                retVal = _results.get({ BaseUrl: optsConnection.baseUrl, Wuid: wuid, ResultName: "Sequence_" + name_sequence_eclResult }, function () {
                    return new Result(optsConnection, wuid, name_sequence_eclResult);
                });
            }
            else if (typeof name_sequence_eclResult === "string") {
                retVal = _results.get({ BaseUrl: optsConnection.baseUrl, Wuid: wuid, ResultName: name_sequence_eclResult }, function () {
                    return new Result(optsConnection, wuid, name_sequence_eclResult);
                });
            }
        }
        return retVal;
    };
    Result.attachLogicalFile = function (optsConnection, nodeGroup, logicalFile) {
        return _results.get({ BaseUrl: optsConnection.baseUrl, Wuid: nodeGroup, ResultName: logicalFile }, function () {
            return new Result(optsConnection, nodeGroup, logicalFile, true);
        });
    };
    Result.prototype.isComplete = function () {
        return this.Total !== -1;
    };
    Result.prototype.fetchXMLSchema = function (refresh) {
        var _this = this;
        if (refresh === void 0) { refresh = false; }
        if (!this._fetchXMLSchemaPromise || refresh) {
            this._fetchXMLSchemaPromise = this.WUResult().then(function (response) {
                var _a, _b;
                if ((_b = (_a = response.Result) === null || _a === void 0 ? void 0 : _a.XmlSchema) === null || _b === void 0 ? void 0 : _b.xml) {
                    _this.xsdSchema = parseXSD(response.Result.XmlSchema.xml);
                    return _this.xsdSchema;
                }
                return null;
            });
        }
        return this._fetchXMLSchemaPromise;
    };
    Result.prototype.refresh = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.fetchRows(0, 1, true)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, this];
                }
            });
        });
    };
    Result.prototype.fetchRows = function (from, count, includeSchema, filter, abortSignal) {
        var _this = this;
        if (from === void 0) { from = 0; }
        if (count === void 0) { count = -1; }
        if (includeSchema === void 0) { includeSchema = false; }
        if (filter === void 0) { filter = {}; }
        return this.WUResult(from, count, !includeSchema, filter, abortSignal).then(function (response) {
            var result = response.Result;
            delete response.Result; //  Do not want it in "set"
            _this.set(__assign({}, response));
            if (exists("XmlSchema.xml", result)) {
                _this.xsdSchema = parseXSD(result.XmlSchema.xml);
            }
            if (exists("Row", result)) {
                return result.Row;
            }
            else if (_this.ResultName && exists(_this.ResultName, result)) {
                return result[_this.ResultName].Row;
            }
            return [];
        });
    };
    Result.prototype.rootField = function () {
        if (!this.xsdSchema)
            return null;
        return this.xsdSchema.root;
    };
    Result.prototype.fields = function () {
        if (!this.xsdSchema)
            return [];
        return this.xsdSchema.root.children();
    };
    Result.prototype.WUResult = function (start, count, suppressXmlSchema, filter, abortSignal) {
        if (start === void 0) { start = 0; }
        if (count === void 0) { count = 1; }
        if (suppressXmlSchema === void 0) { suppressXmlSchema = false; }
        if (filter === void 0) { filter = {}; }
        var FilterBy = {
            NamedValue: {
                itemcount: 0
            }
        };
        for (var key in filter) {
            FilterBy.NamedValue[FilterBy.NamedValue.itemcount++] = {
                Name: key,
                Value: filter[key]
            };
        }
        var request = { FilterBy: FilterBy };
        if (this.Wuid && this.ResultName !== undefined) {
            request.Wuid = this.Wuid;
            request.ResultName = this.ResultName;
        }
        else if (this.Wuid && this.ResultSequence !== undefined) {
            request.Wuid = this.Wuid;
            request.Sequence = this.ResultSequence;
        }
        else if (this.LogicalFileName && this.NodeGroup) {
            request.LogicalName = this.LogicalFileName;
            request.Cluster = this.NodeGroup;
        }
        else if (this.LogicalFileName) {
            request.LogicalName = this.LogicalFileName;
        }
        request.Start = start;
        request.Count = count;
        request.SuppressXmlSchema = suppressXmlSchema;
        return this.connection.WUResult(request, abortSignal).then(function (response) {
            return response;
        });
    };
    return Result;
}(StateObject));
var ResultCache = /** @class */ (function (_super) {
    __extends(ResultCache, _super);
    function ResultCache() {
        return _super.call(this, function (obj) {
            return Cache.hash([obj.Sequence, obj.Name, obj.Value, obj.FileName]);
        }) || this;
    }
    return ResultCache;
}(Cache));

var Attribute = /** @class */ (function (_super) {
    __extends(Attribute, _super);
    function Attribute(scope, attribute) {
        var _this = _super.call(this) || this;
        _this.scope = scope;
        _this.set(attribute);
        return _this;
    }
    Object.defineProperty(Attribute.prototype, "properties", {
        get: function () { return this.get(); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Attribute.prototype, "Name", {
        get: function () { return this.get("Name"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Attribute.prototype, "RawValue", {
        get: function () { return this.get("RawValue"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Attribute.prototype, "Formatted", {
        get: function () { return this.get("Formatted"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Attribute.prototype, "FormattedEnd", {
        get: function () { return this.get("FormattedEnd"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Attribute.prototype, "Measure", {
        get: function () { return this.get("Measure"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Attribute.prototype, "Creator", {
        get: function () { return this.get("Creator"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Attribute.prototype, "CreatorType", {
        get: function () { return this.get("CreatorType"); },
        enumerable: false,
        configurable: true
    });
    return Attribute;
}(StateObject));
var BaseScope = /** @class */ (function (_super) {
    __extends(BaseScope, _super);
    function BaseScope(scope) {
        var _this = _super.call(this) || this;
        _this._attributeMap = {};
        _this._children = [];
        _this.update(scope);
        return _this;
    }
    Object.defineProperty(BaseScope.prototype, "properties", {
        get: function () { return this.get(); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BaseScope.prototype, "ScopeName", {
        get: function () { return this.get("ScopeName"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BaseScope.prototype, "Id", {
        get: function () { return this.get("Id"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BaseScope.prototype, "ScopeType", {
        get: function () { return this.get("ScopeType"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BaseScope.prototype, "Properties", {
        get: function () { return this.get("Properties", { Property: [] }); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BaseScope.prototype, "Notes", {
        get: function () { return this.get("Notes", { Note: [] }); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BaseScope.prototype, "SinkActivity", {
        get: function () { return this.get("SinkActivity"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BaseScope.prototype, "CAttributes", {
        get: function () {
            var _this = this;
            //  Match "started" and time elapsed
            var retVal = [];
            var timeElapsed = {
                start: null,
                end: null
            };
            this.Properties.Property.forEach(function (scopeAttr) {
                if (scopeAttr.Measure === "ts" && scopeAttr.Name.indexOf("Started") >= 0) {
                    timeElapsed.start = scopeAttr;
                }
                else if (_this.ScopeName && scopeAttr.Measure === "ts" && scopeAttr.Name.indexOf("Finished") >= 0) {
                    timeElapsed.end = scopeAttr;
                }
                else {
                    retVal.push(new Attribute(_this, scopeAttr));
                }
            });
            if (timeElapsed.start && timeElapsed.end) {
                // const endTime = parser(timeElapsed.start.Formatted);
                // endTime!.setMilliseconds(endTime!.getMilliseconds() + (+timeElapsed.elapsed.RawValue) / 1000000);
                // timeElapsed.start.FormattedEnd = formatter(endTime!);
                timeElapsed.start.FormattedEnd = timeElapsed.end.Formatted;
                retVal.push(new Attribute(this, timeElapsed.start));
            }
            else if (timeElapsed.start) {
                retVal.push(new Attribute(this, timeElapsed.start));
            }
            else if (timeElapsed.end) {
                retVal.push(new Attribute(this, timeElapsed.end)); //  Should not happen?
            }
            return retVal;
        },
        enumerable: false,
        configurable: true
    });
    BaseScope.prototype.update = function (scope) {
        var _this = this;
        this.set(scope);
        this.CAttributes.forEach(function (attr) {
            _this._attributeMap[attr.Name] = attr;
        });
        this.Properties.Property = [];
        for (var key in this._attributeMap) {
            if (this._attributeMap.hasOwnProperty(key)) {
                this.Properties.Property.push(this._attributeMap[key].properties);
            }
        }
    };
    BaseScope.prototype.parentScope = function () {
        var scopeParts = this.ScopeName.split(":");
        scopeParts.pop();
        return scopeParts.join(":");
    };
    BaseScope.prototype.children = function (_) {
        if (!arguments.length)
            return this._children;
        this._children = _;
        return this;
    };
    BaseScope.prototype.walk = function (visitor) {
        if (visitor.start(this))
            return true;
        for (var _i = 0, _a = this.children(); _i < _a.length; _i++) {
            var scope = _a[_i];
            if (scope.walk(visitor)) {
                return true;
            }
        }
        return visitor.end(this);
    };
    BaseScope.prototype.formattedAttrs = function () {
        var retVal = {};
        for (var attr in this._attributeMap) {
            retVal[attr] = this._attributeMap[attr].Formatted || this._attributeMap[attr].RawValue;
        }
        return retVal;
    };
    BaseScope.prototype.rawAttrs = function () {
        var retVal = {};
        for (var attr in this._attributeMap) {
            retVal[attr] = this._attributeMap[attr].RawValue;
        }
        return retVal;
    };
    BaseScope.prototype.hasAttr = function (name) {
        return this._attributeMap[name] !== undefined;
    };
    BaseScope.prototype.attr = function (name) {
        return this._attributeMap[name] || new Attribute(this, {
            Creator: "",
            CreatorType: "",
            Formatted: "",
            Measure: "",
            Name: "",
            RawValue: ""
        });
    };
    BaseScope.prototype.attrMeasure = function (name) {
        return this._attributeMap[name].Measure;
    };
    BaseScope.prototype.calcTooltip = function (parentScope) {
        var label = "";
        var rows = [];
        label = this.Id;
        rows.push("<tr><td class=\"key\">ID:</td><td class=\"value\">".concat(this.Id, "</td></tr>"));
        if (parentScope) {
            rows.push("<tr><td class=\"key\">Parent ID:</td><td class=\"value\">".concat(parentScope.Id, "</td></tr>"));
        }
        rows.push("<tr><td class=\"key\">Scope:</td><td class=\"value\">".concat(this.ScopeName, "</td></tr>"));
        var attrs = this.formattedAttrs();
        for (var key in attrs) {
            if (key === "Label") {
                label = attrs[key];
            }
            else {
                rows.push("<tr><td class=\"key\">".concat(key, "</td><td class=\"value\">").concat(attrs[key], "</td></tr>"));
            }
        }
        return "<div class=\"eclwatch_WUGraph_Tooltip\" style=\"max-width:480px\">\n            <h4 align=\"center\">".concat(label, "</h4>\n            <table>\n                ").concat(rows.join(""), "\n            </table>\n        </div>");
    };
    return BaseScope;
}(StateObject));
var Scope = /** @class */ (function (_super) {
    __extends(Scope, _super);
    function Scope(wu, scope) {
        var _this = _super.call(this, scope) || this;
        _this.wu = wu;
        return _this;
    }
    return Scope;
}(BaseScope));

var SourceFile = /** @class */ (function (_super) {
    __extends(SourceFile, _super);
    function SourceFile(optsConnection, wuid, eclSourceFile) {
        var _this = _super.call(this) || this;
        if (optsConnection instanceof WorkunitsService) {
            _this.connection = optsConnection;
        }
        else {
            _this.connection = new WorkunitsService(optsConnection);
        }
        _this.set(__assign({ Wuid: wuid }, eclSourceFile));
        return _this;
    }
    Object.defineProperty(SourceFile.prototype, "properties", {
        get: function () { return this.get(); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SourceFile.prototype, "Wuid", {
        get: function () { return this.get("Wuid"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SourceFile.prototype, "FileCluster", {
        get: function () { return this.get("FileCluster"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SourceFile.prototype, "Name", {
        get: function () { return this.get("Name"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SourceFile.prototype, "IsSuperFile", {
        get: function () { return this.get("IsSuperFile"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SourceFile.prototype, "Subs", {
        get: function () { return this.get("Subs"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SourceFile.prototype, "Count", {
        get: function () { return this.get("Count"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SourceFile.prototype, "ECLSourceFiles", {
        get: function () { return this.get("ECLSourceFiles"); },
        enumerable: false,
        configurable: true
    });
    return SourceFile;
}(StateObject));

var Timer = /** @class */ (function (_super) {
    __extends(Timer, _super);
    function Timer(optsConnection, wuid, eclTimer) {
        var _this = _super.call(this) || this;
        if (optsConnection instanceof WorkunitsService) {
            _this.connection = optsConnection;
        }
        else {
            _this.connection = new WorkunitsService(optsConnection);
        }
        var secs = espTime2Seconds$1(eclTimer.Value);
        _this.set(__assign({ Wuid: wuid, Seconds: Math.round(secs * 1000) / 1000, HasSubGraphId: eclTimer.SubGraphId !== undefined }, eclTimer));
        return _this;
    }
    Object.defineProperty(Timer.prototype, "properties", {
        get: function () { return this.get(); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Timer.prototype, "Wuid", {
        get: function () { return this.get("Wuid"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Timer.prototype, "Name", {
        get: function () { return this.get("Name"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Timer.prototype, "Value", {
        get: function () { return this.get("Value"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Timer.prototype, "Seconds", {
        get: function () { return this.get("Seconds"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Timer.prototype, "GraphName", {
        get: function () { return this.get("GraphName"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Timer.prototype, "SubGraphId", {
        get: function () { return this.get("SubGraphId"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Timer.prototype, "HasSubGraphId", {
        get: function () { return this.get("HasSubGraphId"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Timer.prototype, "count", {
        get: function () { return this.get("count"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Timer.prototype, "Timestamp", {
        get: function () { return this.get("Timestamp"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Timer.prototype, "When", {
        get: function () { return this.get("When"); },
        enumerable: false,
        configurable: true
    });
    return Timer;
}(StateObject));

var formatter = utcFormat("%Y-%m-%dT%H:%M:%S.%LZ");
var parser = utcParse("%Y-%m-%dT%H:%M:%S.%LZ");
var d3FormatNum = format(",");
function formatNum(num) {
    if (num && !isNaN(+num)) {
        return d3FormatNum(+num);
    }
    return num;
}
function safeDelete(obj, key, prop) {
    if (obj[key] === undefined || obj[key][prop] === undefined)
        return;
    if (key === "__proto__" || key === "constructor" || key === "prototype")
        return;
    delete obj[key][prop];
}
var DEFINITION_LIST = "DefinitionList";
var definitionRegex = /([a-zA-Z]:)?(.*[\\\/])(.*)(\((\d+),(\d+)\))/;
var PropertyType = ["Avg", "Min", "Max", "Delta", "StdDev"];
var RelatedProperty = ["SkewMin", "SkewMax", "NodeMin", "NodeMax"];
var metricKeyRegex = /[A-Z][a-z]*/g;
function _splitMetric(fullLabel) {
    // Related properties  ---
    for (var _i = 0, RelatedProperty_1 = RelatedProperty; _i < RelatedProperty_1.length; _i++) {
        var relProp = RelatedProperty_1[_i];
        var index = fullLabel.indexOf(relProp);
        if (index === 0) {
            var measure = "";
            var label = fullLabel.slice(index + relProp.length);
            return { measure: measure, ext: relProp, label: label };
        }
    }
    // Primary properties  ---
    var labelParts = fullLabel.match(metricKeyRegex);
    if (labelParts === null || labelParts === void 0 ? void 0 : labelParts.length) {
        var measure = labelParts.shift();
        var label = labelParts.join("");
        for (var _a = 0, PropertyType_1 = PropertyType; _a < PropertyType_1.length; _a++) {
            var ext = PropertyType_1[_a];
            var index = label.indexOf(ext);
            if (index === 0) {
                label = label.slice(index + ext.length);
                return { measure: measure, ext: ext, label: label };
            }
        }
        // Not an aggregate property  ---
        return { measure: measure, ext: "", label: label };
    }
    // No match found  ---
    return { measure: "", ext: "", label: fullLabel };
}
var splitLabelCache = {};
function splitMetric(key) {
    var retVal = splitLabelCache[key];
    if (!retVal) {
        retVal = _splitMetric(key);
        splitLabelCache[key] = retVal;
    }
    return retVal;
}
function formatValue(item, key) {
    var _a, _b;
    return (_b = (_a = item.__formattedProps) === null || _a === void 0 ? void 0 : _a[key]) !== null && _b !== void 0 ? _b : item[key];
}
function safeParseFloat(val) {
    if (val === undefined)
        return undefined;
    var retVal = parseFloat(val);
    return isNaN(retVal) ? undefined : retVal;
}
function formatValues(item, key, dedup) {
    var keyParts = splitMetric(key);
    if (!dedup[keyParts.measure]) {
        dedup[keyParts.label] = true;
        var avg = safeParseFloat(item["".concat(keyParts.measure, "Avg").concat(keyParts.label)]);
        var min = safeParseFloat(item["".concat(keyParts.measure, "Min").concat(keyParts.label)]);
        var max = safeParseFloat(item["".concat(keyParts.measure, "Max").concat(keyParts.label)]);
        var stdDev = safeParseFloat(item["".concat(keyParts.measure, "StdDev").concat(keyParts.label)]);
        var StdDevs = Math.max((avg - min) / stdDev, (max - avg) / stdDev);
        return {
            Key: "".concat(keyParts.measure).concat(keyParts.label),
            Value: formatValue(item, "".concat(keyParts.measure).concat(keyParts.label)),
            //  Extended properties  ---
            Avg: formatValue(item, "".concat(keyParts.measure, "Avg").concat(keyParts.label)),
            Min: formatValue(item, "".concat(keyParts.measure, "Min").concat(keyParts.label)),
            Max: formatValue(item, "".concat(keyParts.measure, "Max").concat(keyParts.label)),
            Delta: formatValue(item, "".concat(keyParts.measure, "Delta").concat(keyParts.label)),
            StdDev: formatValue(item, "".concat(keyParts.measure, "StdDev").concat(keyParts.label)),
            StdDevs: isNaN(StdDevs) ? undefined : StdDevs,
            // Related properties  ---
            SkewMin: formatValue(item, "SkewMin".concat(keyParts.label)),
            SkewMax: formatValue(item, "SkewMax".concat(keyParts.label)),
            NodeMin: formatValue(item, "NodeMin".concat(keyParts.label)),
            NodeMax: formatValue(item, "NodeMax".concat(keyParts.label))
        };
    }
    return null;
}
var logger$4 = scopedLogger("workunit.ts");
var WorkunitCache = /** @class */ (function (_super) {
    __extends(WorkunitCache, _super);
    function WorkunitCache() {
        return _super.call(this, function (obj) {
            return "".concat(obj.BaseUrl, "-").concat(obj.Wuid);
        }) || this;
    }
    return WorkunitCache;
}(Cache));
var _workunits$1 = new WorkunitCache();
var Workunit = /** @class */ (function (_super) {
    __extends(Workunit, _super);
    //  ---  ---  ---
    function Workunit(optsConnection, wuid) {
        var _this = _super.call(this) || this;
        _this._debugMode = false;
        _this._resultCache = new ResultCache();
        _this._graphCache = new GraphCache();
        _this.connection = new WorkunitsService(optsConnection);
        _this.topologyConnection = new TopologyService(optsConnection);
        _this.clearState(wuid);
        return _this;
    }
    Object.defineProperty(Workunit.prototype, "BaseUrl", {
        get: function () { return this.connection.baseUrl; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Workunit.prototype, "properties", {
        //  Accessors  ---
        get: function () { return this.get(); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Workunit.prototype, "Wuid", {
        get: function () { return this.get("Wuid"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Workunit.prototype, "Owner", {
        get: function () { return this.get("Owner", ""); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Workunit.prototype, "Cluster", {
        get: function () { return this.get("Cluster", ""); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Workunit.prototype, "Jobname", {
        get: function () { return this.get("Jobname", ""); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Workunit.prototype, "Description", {
        get: function () { return this.get("Description", ""); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Workunit.prototype, "ActionEx", {
        get: function () { return this.get("ActionEx", ""); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Workunit.prototype, "StateID", {
        get: function () { return this.get("StateID", WUStateID.Unknown); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Workunit.prototype, "State", {
        get: function () { return this.get("State") || WUStateID[this.StateID]; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Workunit.prototype, "Protected", {
        get: function () { return this.get("Protected", false); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Workunit.prototype, "Exceptions", {
        get: function () { return this.get("Exceptions", { ECLException: [] }); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Workunit.prototype, "ResultViews", {
        get: function () { return this.get("ResultViews", { View: [] }); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Workunit.prototype, "ResultCount", {
        get: function () { return this.get("ResultCount", 0); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Workunit.prototype, "Results", {
        get: function () { return this.get("Results", { ECLResult: [] }); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Workunit.prototype, "CResults", {
        get: function () {
            var _this = this;
            return this.Results.ECLResult.map(function (eclResult) {
                return _this._resultCache.get(eclResult, function () {
                    return Result.attach(_this.connection, _this.Wuid, eclResult, _this.ResultViews.View);
                });
            });
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Workunit.prototype, "SequenceResults", {
        get: function () {
            var retVal = {};
            this.CResults.forEach(function (result) {
                retVal[result.Sequence] = result;
            });
            return retVal;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Workunit.prototype, "Timers", {
        get: function () { return this.get("Timers", { ECLTimer: [] }); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Workunit.prototype, "CTimers", {
        get: function () {
            var _this = this;
            return this.Timers.ECLTimer.map(function (eclTimer) {
                return new Timer(_this.connection, _this.Wuid, eclTimer);
            });
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Workunit.prototype, "GraphCount", {
        get: function () { return this.get("GraphCount", 0); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Workunit.prototype, "Graphs", {
        get: function () { return this.get("Graphs", { ECLGraph: [] }); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Workunit.prototype, "CGraphs", {
        get: function () {
            var _this = this;
            return this.Graphs.ECLGraph.map(function (eclGraph) {
                return _this._graphCache.get(eclGraph, function () {
                    return new ECLGraph(_this, eclGraph, _this.CTimers);
                });
            });
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Workunit.prototype, "ThorLogList", {
        get: function () { return this.get("ThorLogList"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Workunit.prototype, "ResourceURLCount", {
        get: function () { return this.get("ResourceURLCount", 0); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Workunit.prototype, "ResourceURLs", {
        get: function () { return this.get("ResourceURLs", { URL: [] }); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Workunit.prototype, "CResourceURLs", {
        get: function () {
            var _this = this;
            return this.ResourceURLs.URL.map(function (url) {
                return new Resource(_this, url);
            });
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Workunit.prototype, "TotalClusterTime", {
        get: function () { return this.get("TotalClusterTime", ""); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Workunit.prototype, "DateTimeScheduled", {
        get: function () { return this.get("DateTimeScheduled"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Workunit.prototype, "IsPausing", {
        get: function () { return this.get("IsPausing"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Workunit.prototype, "ThorLCR", {
        get: function () { return this.get("ThorLCR"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Workunit.prototype, "ApplicationValues", {
        get: function () { return this.get("ApplicationValues", { ApplicationValue: [] }); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Workunit.prototype, "HasArchiveQuery", {
        get: function () { return this.get("HasArchiveQuery"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Workunit.prototype, "StateEx", {
        get: function () { return this.get("StateEx"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Workunit.prototype, "PriorityClass", {
        get: function () { return this.get("PriorityClass"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Workunit.prototype, "PriorityLevel", {
        get: function () { return this.get("PriorityLevel"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Workunit.prototype, "Snapshot", {
        get: function () { return this.get("Snapshot"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Workunit.prototype, "ResultLimit", {
        get: function () { return this.get("ResultLimit"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Workunit.prototype, "EventSchedule", {
        get: function () { return this.get("EventSchedule"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Workunit.prototype, "Query", {
        get: function () { return this.get("Query"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Workunit.prototype, "HelpersCount", {
        get: function () { return this.get("HelpersCount", 0); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Workunit.prototype, "Helpers", {
        get: function () { return this.get("Helpers", { ECLHelpFile: [] }); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Workunit.prototype, "DebugValues", {
        get: function () { return this.get("DebugValues"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Workunit.prototype, "AllowedClusters", {
        get: function () { return this.get("AllowedClusters"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Workunit.prototype, "ErrorCount", {
        get: function () { return this.get("ErrorCount", 0); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Workunit.prototype, "WarningCount", {
        get: function () { return this.get("WarningCount", 0); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Workunit.prototype, "InfoCount", {
        get: function () { return this.get("InfoCount", 0); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Workunit.prototype, "AlertCount", {
        get: function () { return this.get("AlertCount", 0); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Workunit.prototype, "SourceFileCount", {
        get: function () { return this.get("SourceFileCount", 0); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Workunit.prototype, "SourceFiles", {
        get: function () { return this.get("SourceFiles", { ECLSourceFile: [] }); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Workunit.prototype, "CSourceFiles", {
        get: function () {
            var _this = this;
            return this.SourceFiles.ECLSourceFile.map(function (eclSourceFile) { return new SourceFile(_this.connection, _this.Wuid, eclSourceFile); });
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Workunit.prototype, "VariableCount", {
        get: function () { return this.get("VariableCount", 0); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Workunit.prototype, "Variables", {
        get: function () { return this.get("Variables", { ECLResult: [] }); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Workunit.prototype, "TimerCount", {
        get: function () { return this.get("TimerCount", 0); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Workunit.prototype, "HasDebugValue", {
        get: function () { return this.get("HasDebugValue"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Workunit.prototype, "ApplicationValueCount", {
        get: function () { return this.get("ApplicationValueCount", 0); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Workunit.prototype, "XmlParams", {
        get: function () { return this.get("XmlParams"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Workunit.prototype, "AccessFlag", {
        get: function () { return this.get("AccessFlag"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Workunit.prototype, "ClusterFlag", {
        get: function () { return this.get("ClusterFlag"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Workunit.prototype, "ResultViewCount", {
        get: function () { return this.get("ResultViewCount", 0); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Workunit.prototype, "DebugValueCount", {
        get: function () { return this.get("DebugValueCount", 0); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Workunit.prototype, "WorkflowCount", {
        get: function () { return this.get("WorkflowCount", 0); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Workunit.prototype, "Archived", {
        get: function () { return this.get("Archived"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Workunit.prototype, "RoxieCluster", {
        get: function () { return this.get("RoxieCluster"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Workunit.prototype, "DebugState", {
        get: function () { return this.get("DebugState", {}); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Workunit.prototype, "Queue", {
        get: function () { return this.get("Queue"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Workunit.prototype, "Active", {
        get: function () { return this.get("Active"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Workunit.prototype, "Action", {
        get: function () { return this.get("Action"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Workunit.prototype, "Scope", {
        get: function () { return this.get("Scope"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Workunit.prototype, "AbortBy", {
        get: function () { return this.get("AbortBy"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Workunit.prototype, "AbortTime", {
        get: function () { return this.get("AbortTime"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Workunit.prototype, "Workflows", {
        get: function () { return this.get("Workflows"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Workunit.prototype, "TimingData", {
        get: function () { return this.get("TimingData"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Workunit.prototype, "HelpersDesc", {
        get: function () { return this.get("HelpersDesc"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Workunit.prototype, "GraphsDesc", {
        get: function () { return this.get("GraphsDesc"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Workunit.prototype, "SourceFilesDesc", {
        get: function () { return this.get("SourceFilesDesc"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Workunit.prototype, "ResultsDesc", {
        get: function () { return this.get("ResultsDesc"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Workunit.prototype, "VariablesDesc", {
        get: function () { return this.get("VariablesDesc"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Workunit.prototype, "TimersDesc", {
        get: function () { return this.get("TimersDesc"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Workunit.prototype, "DebugValuesDesc", {
        get: function () { return this.get("DebugValuesDesc"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Workunit.prototype, "ApplicationValuesDesc", {
        get: function () { return this.get("ApplicationValuesDesc"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Workunit.prototype, "WorkflowsDesc", {
        get: function () { return this.get("WorkflowsDesc"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Workunit.prototype, "ServiceNames", {
        get: function () { return this.get("ServiceNames"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Workunit.prototype, "CompileCost", {
        get: function () { return this.get("CompileCost"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Workunit.prototype, "ExecuteCost", {
        get: function () { return this.get("ExecuteCost"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Workunit.prototype, "FileAccessCost", {
        get: function () { return this.get("FileAccessCost"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Workunit.prototype, "NoAccess", {
        get: function () { return this.get("NoAccess"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Workunit.prototype, "ECLWUProcessList", {
        get: function () { return this.get("ECLWUProcessList"); },
        enumerable: false,
        configurable: true
    });
    //  Factories  ---
    Workunit.create = function (optsConnection) {
        var retVal = new Workunit(optsConnection);
        return retVal.connection.WUCreate().then(function (response) {
            _workunits$1.set(retVal);
            retVal.set(response.Workunit);
            return retVal;
        });
    };
    Workunit.attach = function (optsConnection, wuid, state) {
        var retVal = _workunits$1.get({ BaseUrl: optsConnection.baseUrl, Wuid: wuid }, function () {
            return new Workunit(optsConnection, wuid);
        });
        if (state) {
            retVal.set(state);
        }
        return retVal;
    };
    Workunit.existsLocal = function (baseUrl, wuid) {
        return _workunits$1.has({ BaseUrl: baseUrl, Wuid: wuid });
    };
    Workunit.submit = function (server, target, ecl, compileOnly) {
        if (compileOnly === void 0) { compileOnly = false; }
        return Workunit.create(server).then(function (wu) {
            return wu.update({ QueryText: ecl });
        }).then(function (wu) {
            return compileOnly ? wu.submit(target, WUUpdate.Action.Compile) : wu.submit(target);
        });
    };
    Workunit.compile = function (server, target, ecl) {
        return Workunit.submit(server, target, ecl, true);
    };
    Workunit.query = function (server, opts) {
        var wsWorkunits = new WorkunitsService(server);
        return wsWorkunits.WUQuery(opts).then(function (response) {
            return response.Workunits.ECLWorkunit.map(function (wu) {
                return Workunit.attach(server, wu.Wuid, wu);
            });
        });
    };
    Workunit.prototype.clearState = function (wuid) {
        this.clear({
            Wuid: wuid,
            StateID: WUStateID.Unknown
        });
    };
    Workunit.prototype.update = function (request) {
        var _this = this;
        return this.connection.WUUpdate(__assign(__assign({}, request), {
            Wuid: this.Wuid,
            StateOrig: this.StateID,
            JobnameOrig: this.Jobname,
            DescriptionOrig: this.Description,
            ProtectedOrig: this.Protected,
            ClusterOrig: this.Cluster
        })).then(function (response) {
            _this.set(response.Workunit);
            return _this;
        });
    };
    Workunit.prototype.submit = function (_cluster, action, resultLimit) {
        var _this = this;
        if (action === void 0) { action = WUUpdate.Action.Run; }
        var clusterPromise;
        if (_cluster !== void 0) {
            clusterPromise = Promise.resolve(_cluster);
        }
        else {
            clusterPromise = this.topologyConnection.DefaultTpLogicalClusterQuery().then(function (response) {
                return response.Name;
            });
        }
        this._debugMode = false;
        if (action === WUUpdate.Action.Debug) {
            action = WUUpdate.Action.Run;
            this._debugMode = true;
        }
        return clusterPromise.then(function (cluster) {
            return _this.connection.WUUpdate({
                Wuid: _this.Wuid,
                Action: action,
                ResultLimit: resultLimit,
                DebugValues: {
                    DebugValue: [
                        {
                            Name: "Debug",
                            Value: _this._debugMode ? "1" : ""
                        }
                    ]
                }
            }).then(function (response) {
                _this.set(response.Workunit);
                _this._submitAction = action;
                return _this.connection.WUSubmit({ Wuid: _this.Wuid, Cluster: cluster });
            });
        }).then(function () {
            return _this;
        });
    };
    Workunit.prototype.isComplete = function () {
        switch (this.StateID) {
            case WUStateID.Compiled:
                return this.ActionEx === "compile" || this._submitAction === WUUpdate.Action.Compile;
            case WUStateID.Completed:
            case WUStateID.Failed:
            case WUStateID.Aborted:
            case WUStateID.NotFound:
                return true;
        }
        return false;
    };
    Workunit.prototype.isFailed = function () {
        switch (this.StateID) {
            case WUStateID.Aborted:
            case WUStateID.Failed:
                return true;
        }
        return false;
    };
    Workunit.prototype.isDeleted = function () {
        switch (this.StateID) {
            case WUStateID.NotFound:
                return true;
        }
        return false;
    };
    Workunit.prototype.isDebugging = function () {
        switch (this.StateID) {
            case WUStateID.DebugPaused:
            case WUStateID.DebugRunning:
                return true;
        }
        return this._debugMode;
    };
    Workunit.prototype.isRunning = function () {
        switch (this.StateID) {
            case WUStateID.Compiled:
            case WUStateID.Running:
            case WUStateID.Aborting:
            case WUStateID.Blocked:
            case WUStateID.DebugPaused:
            case WUStateID.DebugRunning:
                return true;
        }
        return false;
    };
    Workunit.prototype.setToFailed = function () {
        return this.WUAction(WsWorkunits.ECLWUActions.SetToFailed);
    };
    Workunit.prototype.pause = function () {
        return this.WUAction(WsWorkunits.ECLWUActions.Pause);
    };
    Workunit.prototype.pauseNow = function () {
        return this.WUAction(WsWorkunits.ECLWUActions.PauseNow);
    };
    Workunit.prototype.resume = function () {
        return this.WUAction(WsWorkunits.ECLWUActions.Resume);
    };
    Workunit.prototype.abort = function () {
        return this.WUAction(WsWorkunits.ECLWUActions.Abort);
    };
    Workunit.prototype.protect = function () {
        return this.WUAction(WsWorkunits.ECLWUActions.Protect);
    };
    Workunit.prototype.unprotect = function () {
        return this.WUAction(WsWorkunits.ECLWUActions.Unprotect);
    };
    Workunit.prototype.delete = function () {
        return this.WUAction(WsWorkunits.ECLWUActions.Delete);
    };
    Workunit.prototype.restore = function () {
        return this.WUAction(WsWorkunits.ECLWUActions.Restore);
    };
    Workunit.prototype.deschedule = function () {
        return this.WUAction(WsWorkunits.ECLWUActions.Deschedule);
    };
    Workunit.prototype.reschedule = function () {
        return this.WUAction(WsWorkunits.ECLWUActions.Reschedule);
    };
    Workunit.prototype.resubmit = function () {
        var _this = this;
        return this.WUResubmit({
            CloneWorkunit: false,
            ResetWorkflow: false
        }).then(function () {
            _this.clearState(_this.Wuid);
            return _this.refresh().then(function () {
                _this._monitor();
                return _this;
            });
        });
    };
    Workunit.prototype.clone = function () {
        var _this = this;
        return this.WUResubmit({
            CloneWorkunit: true,
            ResetWorkflow: false
        }).then(function (response) {
            return Workunit.attach(_this.connection.opts(), response.WUs.WU[0].WUID)
                .refresh();
        });
    };
    Workunit.prototype.refreshState = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.WUQuery()];
                    case 1:
                        _a.sent();
                        if (!(this.StateID === WUStateID.Compiled && !this.ActionEx && !this._submitAction)) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.refreshInfo()];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3: return [2 /*return*/, this];
                }
            });
        });
    };
    Workunit.prototype.refreshInfo = function (request) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.WUInfo(request)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, this];
                }
            });
        });
    };
    Workunit.prototype.refreshDebug = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.debugStatus()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, this];
                }
            });
        });
    };
    Workunit.prototype.refresh = function () {
        return __awaiter(this, arguments, void 0, function (full, request) {
            if (full === void 0) { full = false; }
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!full) return [3 /*break*/, 2];
                        return [4 /*yield*/, Promise.all([this.refreshInfo(request), this.refreshDebug()])];
                    case 1:
                        _a.sent();
                        return [3 /*break*/, 4];
                    case 2: return [4 /*yield*/, this.refreshState()];
                    case 3:
                        _a.sent();
                        _a.label = 4;
                    case 4: return [2 /*return*/, this];
                }
            });
        });
    };
    Workunit.prototype.eclExceptions = function () {
        return this.Exceptions.ECLException;
    };
    Workunit.prototype.fetchArchive = function () {
        return this.connection.WUFileEx({
            Wuid: this.Wuid,
            Type: "ArchiveQuery"
        });
    };
    Workunit.prototype.fetchECLExceptions = function () {
        var _this = this;
        return this.WUInfo({ IncludeExceptions: true }).then(function () {
            return _this.eclExceptions();
        });
    };
    Workunit.prototype.fetchResults = function () {
        var _this = this;
        return this.WUInfo({ IncludeResults: true }).then(function () {
            return _this.CResults;
        });
    };
    Workunit.prototype.fetchGraphs = function () {
        var _this = this;
        return this.WUInfo({ IncludeGraphs: true }).then(function () {
            return _this.CGraphs;
        });
    };
    Workunit.prototype.fetchQuery = function () {
        var _this = this;
        return this.WUInfo({ IncludeECL: true, TruncateEclTo64k: false }).then(function () {
            return _this.Query;
        });
    };
    Workunit.prototype.fetchHelpers = function () {
        var _this = this;
        return this.WUInfo({ IncludeHelpers: true }).then(function () {
            var _a;
            return ((_a = _this.Helpers) === null || _a === void 0 ? void 0 : _a.ECLHelpFile) || [];
        });
    };
    Workunit.prototype.fetchAllowedClusters = function () {
        var _this = this;
        return this.WUInfo({ IncludeAllowedClusters: true }).then(function () {
            var _a;
            return ((_a = _this.AllowedClusters) === null || _a === void 0 ? void 0 : _a.AllowedCluster) || [];
        });
    };
    Workunit.prototype.fetchTotalClusterTime = function () {
        var _this = this;
        return this.WUInfo({ IncludeTotalClusterTime: true }).then(function () {
            return _this.TotalClusterTime;
        });
    };
    Workunit.prototype.fetchServiceNames = function () {
        var _this = this;
        return this.WUInfo({ IncludeServiceNames: true }).then(function () {
            var _a;
            return (_a = _this.ServiceNames) === null || _a === void 0 ? void 0 : _a.Item;
        });
    };
    Workunit.prototype.fetchDetailsMeta = function (request) {
        if (request === void 0) { request = {}; }
        return this.WUDetailsMeta(request);
    };
    Workunit.prototype.fetchDetailsRaw = function (request) {
        if (request === void 0) { request = {}; }
        return this.WUDetails(request).then(function (response) { return response.Scopes.Scope; });
    };
    Workunit.prototype.normalizeDetails = function (meta, scopes) {
        var _a;
        var columns = {
            id: {
                Measure: "label"
            },
            name: {
                Measure: "label"
            },
            type: {
                Measure: "label"
            }
        };
        var data = [];
        var _loop_1 = function (scope) {
            var props = {};
            var formattedProps = {};
            if (scope && scope.Id && scope.Properties && scope.Properties.Property) {
                for (var key in scope.Properties.Property) {
                    var scopeProperty = scope.Properties.Property[key];
                    if (scopeProperty.Measure === "ns") {
                        scopeProperty.Measure = "s";
                    }
                    columns[scopeProperty.Name] = __assign({}, scopeProperty);
                    safeDelete(columns, scopeProperty.Name, "RawValue");
                    safeDelete(columns, scopeProperty.Name, "Formatted");
                    switch (scopeProperty.Measure) {
                        case "bool":
                            props[scopeProperty.Name] = !!+scopeProperty.RawValue;
                            break;
                        case "sz":
                            props[scopeProperty.Name] = +scopeProperty.RawValue;
                            break;
                        case "s":
                            props[scopeProperty.Name] = +scopeProperty.RawValue / 1000000000;
                            break;
                        case "ns":
                            props[scopeProperty.Name] = +scopeProperty.RawValue;
                            break;
                        case "ts":
                            props[scopeProperty.Name] = new Date(+scopeProperty.RawValue / 1000).toISOString();
                            break;
                        case "cnt":
                            props[scopeProperty.Name] = +scopeProperty.RawValue;
                            break;
                        case "cost":
                            props[scopeProperty.Name] = +scopeProperty.RawValue / 1000000;
                            break;
                        case "cpu":
                        case "skw":
                        case "node":
                        case "ppm":
                        case "ip":
                        case "cy":
                        case "en":
                        case "txt":
                        case "id":
                        case "fname":
                        default:
                            props[scopeProperty.Name] = scopeProperty.RawValue;
                    }
                    formattedProps[scopeProperty.Name] = formatNum((_a = scopeProperty.Formatted) !== null && _a !== void 0 ? _a : props[scopeProperty.Name]);
                }
                //  Other properties  ---
            }
            var normalizedScope = __assign({ id: scope.Id, name: scope.ScopeName, type: scope.ScopeType, Kind: scope["Kind"], Label: scope["Label"], __formattedProps: formattedProps, __groupedProps: {}, __groupedRawProps: {}, __StdDevs: 0, __StdDevsSource: "" }, props);
            if (normalizedScope[DEFINITION_LIST]) {
                try {
                    var definitionList = JSON.parse(normalizedScope[DEFINITION_LIST].split("\\").join("\\\\"));
                    normalizedScope[DEFINITION_LIST] = [];
                    definitionList.forEach(function (definition, idx) {
                        var _a;
                        var matches = definition.match(definitionRegex);
                        if (matches) {
                            var filePath = ((_a = matches[1]) !== null && _a !== void 0 ? _a : "") + matches[2] + matches[3];
                            var line = parseInt(matches[5]);
                            var col = parseInt(matches[6]);
                            normalizedScope[DEFINITION_LIST].push({ filePath: filePath, line: line, col: col });
                        }
                    });
                }
                catch (e) {
                    logger$4.error("Unexpected \"DefinitionList\":  ".concat(normalizedScope[DEFINITION_LIST]));
                }
            }
            var dedup = {};
            for (var key in normalizedScope) {
                if (key.indexOf("__") !== 0) {
                    var row = formatValues(normalizedScope, key, dedup);
                    if (row) {
                        normalizedScope.__groupedProps[row.Key] = row;
                        if (!isNaN(row.StdDevs) && normalizedScope.__StdDevs < row.StdDevs) {
                            normalizedScope.__StdDevs = row.StdDevs;
                            normalizedScope.__StdDevsSource = row.Key;
                        }
                    }
                }
            }
            data.push(normalizedScope);
        };
        for (var _i = 0, scopes_1 = scopes; _i < scopes_1.length; _i++) {
            var scope = scopes_1[_i];
            _loop_1(scope);
        }
        return {
            meta: meta,
            columns: columns,
            data: data
        };
    };
    Workunit.prototype.fetchDetailsNormalized = function (request) {
        var _this = this;
        if (request === void 0) { request = {}; }
        return Promise.all([this.fetchDetailsMeta(), this.fetchDetailsRaw(request)]).then(function (promises) {
            return _this.normalizeDetails(promises[0], promises[1]);
        });
    };
    Workunit.prototype.fetchInfo = function (request) {
        if (request === void 0) { request = {}; }
        return this.WUInfo(request);
    };
    Workunit.prototype.fetchDetails = function (request) {
        var _this = this;
        if (request === void 0) { request = {}; }
        return this.WUDetails(request).then(function (response) {
            return response.Scopes.Scope.map(function (rawScope) {
                return new Scope(_this, rawScope);
            });
        });
    };
    Workunit.prototype.fetchDetailsHierarchy = function (request) {
        var _this = this;
        if (request === void 0) { request = {}; }
        return this.WUDetails(request).then(function (response) {
            var retVal = [];
            //  Recreate Scope Hierarchy and dedup  ---
            var scopeMap = {};
            response.Scopes.Scope.forEach(function (rawScope) {
                if (scopeMap[rawScope.ScopeName]) {
                    scopeMap[rawScope.ScopeName].update(rawScope);
                    return null;
                }
                else {
                    var scope = new Scope(_this, rawScope);
                    scopeMap[scope.ScopeName] = scope;
                    return scope;
                }
            });
            for (var key in scopeMap) {
                if (scopeMap.hasOwnProperty(key)) {
                    var scope = scopeMap[key];
                    var parentScopeID = scope.parentScope();
                    if (parentScopeID && scopeMap[parentScopeID]) {
                        scopeMap[parentScopeID].children().push(scope);
                    }
                    else {
                        retVal.push(scope);
                    }
                }
            }
            return retVal;
        });
    };
    Workunit.prototype.fetchGraphDetails = function (graphIDs, rootTypes) {
        if (graphIDs === void 0) { graphIDs = []; }
        return this.fetchDetails({
            ScopeFilter: {
                MaxDepth: 999999,
                Ids: graphIDs,
                ScopeTypes: rootTypes,
            },
            NestedFilter: {
                Depth: 999999,
                ScopeTypes: ["graph", "subgraph", "activity", "edge", "function"]
            },
            PropertiesToReturn: {
                AllStatistics: true,
                AllAttributes: true,
                AllHints: true,
                AllProperties: true,
                AllScopes: true
            },
            ScopeOptions: {
                IncludeId: true,
                IncludeScope: true,
                IncludeScopeType: true
            },
            PropertyOptions: {
                IncludeName: true,
                IncludeRawValue: true,
                IncludeFormatted: true,
                IncludeMeasure: true,
                IncludeCreator: false,
                IncludeCreatorType: false
            }
        });
    };
    Workunit.prototype.fetchScopeGraphs = function (graphIDs) {
        if (graphIDs === void 0) { graphIDs = []; }
        return this.fetchGraphDetails(graphIDs, ["graph"]).then(function (scopes) {
            return createGraph(scopes);
        });
    };
    Workunit.prototype.fetchTimeElapsed = function () {
        return this.fetchDetails({
            ScopeFilter: {
                PropertyFilters: {
                    PropertyFilter: [{ Name: "TimeElapsed" }]
                }
            }
        }).then(function (scopes) {
            var scopeInfo = {};
            scopes.forEach(function (scope) {
                scopeInfo[scope.ScopeName] = scopeInfo[scope.ScopeName] || {
                    scope: scope.ScopeName,
                    start: null,
                    elapsed: null,
                    finish: null
                };
                scope.CAttributes.forEach(function (attr) {
                    if (attr.Name === "TimeElapsed") {
                        scopeInfo[scope.ScopeName].elapsed = +attr.RawValue;
                    }
                    else if (attr.Measure === "ts" && attr.Name.indexOf("Started") >= 0) {
                        scopeInfo[scope.ScopeName].start = attr.Formatted;
                    }
                });
            });
            // Workaround duplicate scope responses
            var retVal = [];
            for (var key in scopeInfo) {
                var scope = scopeInfo[key];
                if (scope.start && scope.elapsed) {
                    var endTime = parser(scope.start);
                    endTime.setMilliseconds(endTime.getMilliseconds() + scope.elapsed / 1000000);
                    scope.finish = formatter(endTime);
                    retVal.push(scope);
                }
            }
            retVal.sort(function (l, r) {
                if (l.start < r.start)
                    return -1;
                if (l.start > r.start)
                    return 1;
                return 0;
            });
            return retVal;
        });
    };
    //  Monitoring  ---
    Workunit.prototype._monitor = function () {
        if (this.isComplete()) {
            this._monitorTickCount = 0;
            return;
        }
        _super.prototype._monitor.call(this);
    };
    Workunit.prototype._monitorTimeoutDuration = function () {
        var retVal = _super.prototype._monitorTimeoutDuration.call(this);
        if (this._monitorTickCount <= 1) { //  Once
            return 1000;
        }
        else if (this._monitorTickCount <= 3) { //  Twice
            return 3000;
        }
        else if (this._monitorTickCount <= 5) { //  Twice
            return 5000;
        }
        else if (this._monitorTickCount <= 7) { //  Twice
            return 10000;
        }
        return retVal;
    };
    //  Events  ---
    Workunit.prototype.on = function (eventID, propIDorCallback, callback) {
        var _this = this;
        if (this.isCallback(propIDorCallback)) {
            switch (eventID) {
                case "completed":
                    _super.prototype.on.call(this, "propChanged", "StateID", function (changeInfo) {
                        if (_this.isComplete()) {
                            propIDorCallback([changeInfo]);
                        }
                    });
                    break;
                case "changed":
                    _super.prototype.on.call(this, eventID, propIDorCallback);
                    break;
            }
        }
        else {
            switch (eventID) {
                case "changed":
                    _super.prototype.on.call(this, eventID, propIDorCallback, callback);
                    break;
            }
        }
        this._monitor();
        return this;
    };
    Workunit.prototype.watchUntilComplete = function (callback) {
        var _this = this;
        return new Promise(function (resolve, _) {
            var watchHandle = _this.watch(function (changes) {
                if (callback) {
                    callback(changes);
                }
                if (_this.isComplete()) {
                    watchHandle.release();
                    resolve(_this);
                }
            });
        });
    };
    Workunit.prototype.watchUntilRunning = function (callback) {
        var _this = this;
        return new Promise(function (resolve, _) {
            var watchHandle = _this.watch(function (changes) {
                if (callback) {
                    callback(changes);
                }
                if (_this.isComplete() || _this.isRunning()) {
                    watchHandle.release();
                    resolve(_this);
                }
            });
        });
    };
    //  WsWorkunits passthroughs  ---
    Workunit.prototype.WUQuery = function (_request) {
        var _this = this;
        if (_request === void 0) { _request = {}; }
        return this.connection.WUQuery(__assign(__assign({}, _request), { Wuid: this.Wuid })).then(function (response) {
            _this.set(response.Workunits.ECLWorkunit[0]);
            return response;
        }).catch(function (e) {
            //  deleted  ---
            var wuMissing = e.Exception.some(function (exception) {
                if (exception.Code === 20081) {
                    _this.clearState(_this.Wuid);
                    _this.set("StateID", WUStateID.NotFound);
                    return true;
                }
                return false;
            });
            if (!wuMissing) {
                logger$4.warning("Unexpected exception:  ");
                throw e;
            }
            return {};
        });
    };
    Workunit.prototype.WUCreate = function () {
        var _this = this;
        return this.connection.WUCreate().then(function (response) {
            _this.set(response.Workunit);
            _workunits$1.set(_this);
            return response;
        });
    };
    Workunit.prototype.WUInfo = function (_request) {
        var _this = this;
        if (_request === void 0) { _request = {}; }
        var includeResults = _request.IncludeResults || _request.IncludeResultsViewNames;
        return this.connection.WUInfo(__assign(__assign({}, _request), { Wuid: this.Wuid, IncludeResults: includeResults, IncludeResultsViewNames: includeResults, SuppressResultSchemas: false })).then(function (response) {
            _this.set(response.Workunit);
            if (includeResults) {
                _this.set({
                    ResultViews: response.ResultViews
                });
            }
            return response;
        }).catch(function (e) {
            //  deleted  ---
            var wuMissing = e.Exception.some(function (exception) {
                if (exception.Code === 20080) {
                    _this.clearState(_this.Wuid);
                    _this.set("StateID", WUStateID.NotFound);
                    return true;
                }
                return false;
            });
            if (!wuMissing) {
                logger$4.warning("Unexpected exception:  ");
                throw e;
            }
            return {};
        });
    };
    Workunit.prototype.WUResubmit = function (request) {
        return this.connection.WUResubmit(deepMixinT({}, request, {
            Wuids: { Item: [this.Wuid] }
        }));
    };
    Workunit.prototype.WUDetailsMeta = function (request) {
        return this.connection.WUDetailsMeta(request);
    };
    Workunit.prototype.WUDetails = function (request) {
        return this.connection.WUDetails(deepMixinT({
            ScopeFilter: {
                MaxDepth: 9999
            },
            ScopeOptions: {
                IncludeMatchedScopesInResults: true,
                IncludeScope: true,
                IncludeId: false,
                IncludeScopeType: false
            },
            PropertyOptions: {
                IncludeName: true,
                IncludeRawValue: false,
                IncludeFormatted: true,
                IncludeMeasure: true,
                IncludeCreator: false,
                IncludeCreatorType: false
            }
        }, request, { WUID: this.Wuid })).then(function (response) {
            return deepMixinT({
                Scopes: {
                    Scope: []
                }
            }, response);
        });
    };
    Workunit.prototype.WUAction = function (actionType) {
        var _this = this;
        return this.connection.WUAction({
            Wuids: { Item: [this.Wuid] },
            WUActionType: actionType
        }).then(function (response) {
            return _this.refresh().then(function () {
                _this._monitor();
                return response;
            });
        });
    };
    Workunit.prototype.publish = function (name) {
        return this.connection.WUPublishWorkunit({
            Wuid: this.Wuid,
            Cluster: this.Cluster,
            JobName: name || this.Jobname,
            AllowForeignFiles: true,
            Activate: WsWorkunits.WUQueryActivationMode.ActivateQuery,
            Wait: 5000
        });
    };
    Workunit.prototype.publishEx = function (request) {
        var service = new WorkunitsServiceEx({ baseUrl: "" });
        var publishRequest = __assign({ Wuid: this.Wuid, Cluster: this.Cluster, JobName: this.Jobname, AllowForeignFiles: true, Activate: 1, Wait: 5000 }, request);
        return service.WUPublishWorkunitEx(publishRequest);
    };
    Workunit.prototype.WUCDebug = function (command, opts) {
        if (opts === void 0) { opts = {}; }
        var optsStr = "";
        for (var key in opts) {
            if (opts.hasOwnProperty(key)) {
                optsStr += " ".concat(key, "='").concat(opts[key], "'");
            }
        }
        return this.connection.WUCDebugEx({
            Wuid: this.Wuid,
            Command: "<debug:".concat(command, " uid='").concat(this.Wuid, "'").concat(optsStr, "/>")
        }).then(function (response) {
            return response;
        });
    };
    Workunit.prototype.debug = function (command, opts) {
        if (!this.isDebugging()) {
            return Promise.resolve(new XMLNode(command));
        }
        return this.WUCDebug(command, opts).then(function (response) {
            var retVal = response.children(command);
            if (retVal.length) {
                return retVal[0];
            }
            return new XMLNode(command);
        }).catch(function (_) {
            logger$4.error(_);
            return Promise.resolve(new XMLNode(command));
        });
    };
    Workunit.prototype.debugStatus = function () {
        var _this = this;
        if (!this.isDebugging()) {
            return Promise.resolve({
                DebugState: { state: "unknown" }
            });
        }
        return this.debug("status").then(function (response) {
            var debugState = __assign(__assign({}, _this.DebugState), response.$);
            _this.set({
                DebugState: debugState
            });
            return response;
        });
    };
    Workunit.prototype.debugContinue = function (mode) {
        if (mode === void 0) { mode = ""; }
        return this.debug("continue", {
            mode: mode
        });
    };
    Workunit.prototype.debugStep = function (mode) {
        return this.debug("step", {
            mode: mode
        });
    };
    Workunit.prototype.debugPause = function () {
        return this.debug("interrupt");
    };
    Workunit.prototype.debugQuit = function () {
        return this.debug("quit");
    };
    Workunit.prototype.debugDeleteAllBreakpoints = function () {
        return this.debug("delete", {
            idx: 0
        });
    };
    Workunit.prototype.debugBreakpointResponseParser = function (rootNode) {
        return rootNode.children().map(function (childNode) {
            if (childNode.name === "break") {
                return childNode.$;
            }
        });
    };
    Workunit.prototype.debugBreakpointAdd = function (id, mode, action) {
        var _this = this;
        return this.debug("breakpoint", {
            id: id,
            mode: mode,
            action: action
        }).then(function (rootNode) {
            return _this.debugBreakpointResponseParser(rootNode);
        });
    };
    Workunit.prototype.debugBreakpointList = function () {
        var _this = this;
        return this.debug("list").then(function (rootNode) {
            return _this.debugBreakpointResponseParser(rootNode);
        });
    };
    Workunit.prototype.debugGraph = function () {
        var _this = this;
        if (this._debugAllGraph && this.DebugState["_prevGraphSequenceNum"] === this.DebugState["graphSequenceNum"]) {
            return Promise.resolve(this._debugAllGraph);
        }
        return this.debug("graph", { name: "all" }).then(function (response) {
            _this.DebugState["_prevGraphSequenceNum"] = _this.DebugState["graphSequenceNum"];
            _this._debugAllGraph = createXGMMLGraph(_this.Wuid, response);
            return _this._debugAllGraph;
        });
    };
    Workunit.prototype.debugBreakpointValid = function (path) {
        return this.debugGraph().then(function (graph) {
            return breakpointLocations(graph, path);
        });
    };
    Workunit.prototype.debugPrint = function (edgeID, startRow, numRows) {
        if (startRow === void 0) { startRow = 0; }
        if (numRows === void 0) { numRows = 10; }
        return this.debug("print", {
            edgeID: edgeID,
            startRow: startRow,
            numRows: numRows
        }).then(function (response) {
            return response.children().map(function (rowNode) {
                var retVal = {};
                rowNode.children().forEach(function (cellNode) {
                    retVal[cellNode.name] = cellNode.content;
                });
                return retVal;
            });
        });
    };
    return Workunit;
}(StateObject));
var ATTR_DEFINITION = "definition";
function hasECLDefinition(vertex) {
    return vertex._[ATTR_DEFINITION] !== undefined;
}
function getECLDefinition(vertex) {
    var match = /([a-z]:\\(?:[-\w\.\d]+\\)*(?:[-\w\.\d]+)?|(?:\/[\w\.\-]+)+)\((\d*),(\d*)\)/.exec(vertex._[ATTR_DEFINITION]);
    if (match) {
        var _file = match[1], _row = match[2], _col = match[3];
        _file.replace(/\/\.\//g, "/");
        return {
            id: vertex._["id"],
            file: _file,
            line: +_row,
            column: +_col
        };
    }
    throw new Error("Bad definition:  ".concat(vertex._[ATTR_DEFINITION]));
}
function breakpointLocations(graph, path) {
    var retVal = [];
    for (var _i = 0, _a = graph.vertices; _i < _a.length; _i++) {
        var vertex = _a[_i];
        if (hasECLDefinition(vertex)) {
            var definition = getECLDefinition(vertex);
            if (definition && !path || path === definition.file) {
                retVal.push(definition);
            }
        }
    }
    return retVal.sort(function (l, r) {
        return l.line - r.line;
    });
}

var _activity;
var Activity = /** @class */ (function (_super) {
    __extends(Activity, _super);
    function Activity(optsConnection) {
        var _this = _super.call(this) || this;
        _this.lazyRefresh = debounce(function () { return __awaiter(_this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.connection.Activity({})];
                    case 1:
                        response = _a.sent();
                        this.set(response);
                        return [2 /*return*/, this];
                }
            });
        }); });
        if (optsConnection instanceof SMCService) {
            _this.connection = optsConnection;
        }
        else {
            _this.connection = new SMCService(optsConnection);
        }
        _this.clear({});
        return _this;
    }
    Object.defineProperty(Activity.prototype, "properties", {
        get: function () { return this.get(); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Activity.prototype, "Exceptions", {
        get: function () { return this.get("Exceptions"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Activity.prototype, "Build", {
        get: function () { return this.get("Build"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Activity.prototype, "ThorClusterList", {
        get: function () { return this.get("ThorClusterList"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Activity.prototype, "RoxieClusterList", {
        get: function () { return this.get("RoxieClusterList"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Activity.prototype, "HThorClusterList", {
        get: function () { return this.get("HThorClusterList"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Activity.prototype, "DFUJobs", {
        get: function () { return this.get("DFUJobs"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Activity.prototype, "Running", {
        get: function () { return this.get("Running", { ActiveWorkunit: [] }); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Activity.prototype, "BannerContent", {
        get: function () { return this.get("BannerContent"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Activity.prototype, "BannerColor", {
        get: function () { return this.get("BannerColor"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Activity.prototype, "BannerSize", {
        get: function () { return this.get("BannerSize"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Activity.prototype, "BannerScroll", {
        get: function () { return this.get("BannerScroll"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Activity.prototype, "ChatURL", {
        get: function () { return this.get("ChatURL"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Activity.prototype, "ShowBanner", {
        get: function () { return this.get("ShowBanner"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Activity.prototype, "ShowChatURL", {
        get: function () { return this.get("ShowChatURL"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Activity.prototype, "SortBy", {
        get: function () { return this.get("SortBy"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Activity.prototype, "Descending", {
        get: function () { return this.get("Descending"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Activity.prototype, "SuperUser", {
        get: function () { return this.get("SuperUser"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Activity.prototype, "AccessRight", {
        get: function () { return this.get("AccessRight"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Activity.prototype, "ServerJobQueues", {
        get: function () { return this.get("ServerJobQueues"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Activity.prototype, "ActivityTime", {
        get: function () { return this.get("ActivityTime"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Activity.prototype, "DaliDetached", {
        get: function () { return this.get("DaliDetached"); },
        enumerable: false,
        configurable: true
    });
    Activity.attach = function (optsConnection, state) {
        if (!_activity) {
            _activity = new Activity(optsConnection);
        }
        if (state) {
            _activity.set(__assign({}, state));
        }
        return _activity;
    };
    Activity.prototype.runningWorkunits = function (clusterName) {
        var _this = this;
        if (clusterName === void 0) { clusterName = ""; }
        return this.Running.ActiveWorkunit.filter(function (awu) { return clusterName === "" || awu.ClusterName === clusterName; }).map(function (awu) { return Workunit.attach(_this.connection.connectionOptions(), awu.Wuid, awu); });
    };
    Activity.prototype.setBanner = function (request) {
        var _this = this;
        return this.connection.SetBanner(__assign({}, request)).then(function (response) {
            _this.set(response);
            return _this;
        });
    };
    Activity.prototype.refresh = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.lazyRefresh()];
            });
        });
    };
    return Activity;
}(StateObject));

var logger$3 = scopedLogger("logicalFile.ts");
var LogicalFileCache = /** @class */ (function (_super) {
    __extends(LogicalFileCache, _super);
    function LogicalFileCache() {
        return _super.call(this, function (obj) {
            return "".concat(obj.BaseUrl, "-").concat(obj.Cluster, "-").concat(obj.Name);
        }) || this;
    }
    return LogicalFileCache;
}(Cache));
var _store$1 = new LogicalFileCache();
var LogicalFile = /** @class */ (function (_super) {
    __extends(LogicalFile, _super);
    function LogicalFile(optsConnection, Cluster, Name) {
        var _this = _super.call(this) || this;
        if (optsConnection instanceof DFUService) {
            _this.connection = optsConnection;
        }
        else {
            _this.connection = new DFUService(optsConnection);
        }
        _this.clear({
            Cluster: Cluster,
            Name: Name
        });
        return _this;
    }
    Object.defineProperty(LogicalFile.prototype, "BaseUrl", {
        get: function () { return this.connection.baseUrl; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(LogicalFile.prototype, "Cluster", {
        get: function () { return this.get("Cluster"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(LogicalFile.prototype, "Name", {
        get: function () { return this.get("Name"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(LogicalFile.prototype, "Filename", {
        get: function () { return this.get("Filename"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(LogicalFile.prototype, "Prefix", {
        get: function () { return this.get("Prefix"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(LogicalFile.prototype, "NodeGroup", {
        get: function () { return this.get("NodeGroup"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(LogicalFile.prototype, "NumParts", {
        get: function () { return this.get("NumParts"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(LogicalFile.prototype, "Description", {
        get: function () { return this.get("Description"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(LogicalFile.prototype, "Dir", {
        get: function () { return this.get("Dir"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(LogicalFile.prototype, "PathMask", {
        get: function () { return this.get("PathMask"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(LogicalFile.prototype, "Filesize", {
        get: function () { return this.get("Filesize"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(LogicalFile.prototype, "FileSizeInt64", {
        get: function () { return this.get("FileSizeInt64"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(LogicalFile.prototype, "RecordSize", {
        get: function () { return this.get("RecordSize"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(LogicalFile.prototype, "RecordCount", {
        get: function () { return this.get("RecordCount"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(LogicalFile.prototype, "RecordSizeInt64", {
        get: function () { return this.get("RecordSizeInt64"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(LogicalFile.prototype, "RecordCountInt64", {
        get: function () { return this.get("RecordCountInt64"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(LogicalFile.prototype, "Wuid", {
        get: function () { return this.get("Wuid"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(LogicalFile.prototype, "Owner", {
        get: function () { return this.get("Owner"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(LogicalFile.prototype, "JobName", {
        get: function () { return this.get("JobName"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(LogicalFile.prototype, "Persistent", {
        get: function () { return this.get("Persistent"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(LogicalFile.prototype, "Format", {
        get: function () { return this.get("Format"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(LogicalFile.prototype, "MaxRecordSize", {
        get: function () { return this.get("MaxRecordSize"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(LogicalFile.prototype, "CsvSeparate", {
        get: function () { return this.get("CsvSeparate"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(LogicalFile.prototype, "CsvQuote", {
        get: function () { return this.get("CsvQuote"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(LogicalFile.prototype, "CsvTerminate", {
        get: function () { return this.get("CsvTerminate"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(LogicalFile.prototype, "CsvEscape", {
        get: function () { return this.get("CsvEscape"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(LogicalFile.prototype, "Modified", {
        get: function () { return this.get("Modified"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(LogicalFile.prototype, "Ecl", {
        get: function () { return this.get("Ecl"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(LogicalFile.prototype, "Stat", {
        get: function () { return this.get("Stat"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(LogicalFile.prototype, "DFUFilePartsOnClusters", {
        get: function () { return this.get("DFUFilePartsOnClusters"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(LogicalFile.prototype, "isSuperfile", {
        get: function () { return this.get("isSuperfile"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(LogicalFile.prototype, "ShowFileContent", {
        get: function () { return this.get("ShowFileContent"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(LogicalFile.prototype, "subfiles", {
        get: function () { return this.get("subfiles"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(LogicalFile.prototype, "Superfiles", {
        get: function () { return this.get("Superfiles"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(LogicalFile.prototype, "ProtectList", {
        get: function () { return this.get("ProtectList"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(LogicalFile.prototype, "FromRoxieCluster", {
        get: function () { return this.get("FromRoxieCluster"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(LogicalFile.prototype, "Graphs", {
        get: function () { return this.get("Graphs"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(LogicalFile.prototype, "UserPermission", {
        get: function () { return this.get("UserPermission"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(LogicalFile.prototype, "ContentType", {
        get: function () { return this.get("ContentType"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(LogicalFile.prototype, "CompressedFileSize", {
        get: function () { return this.get("CompressedFileSize"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(LogicalFile.prototype, "PercentCompressed", {
        get: function () { return this.get("PercentCompressed"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(LogicalFile.prototype, "IsCompressed", {
        get: function () { return this.get("IsCompressed"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(LogicalFile.prototype, "BrowseData", {
        get: function () { return this.get("BrowseData"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(LogicalFile.prototype, "jsonInfo", {
        get: function () { return this.get("jsonInfo"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(LogicalFile.prototype, "binInfo", {
        get: function () { return this.get("binInfo"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(LogicalFile.prototype, "PackageID", {
        get: function () { return this.get("PackageID"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(LogicalFile.prototype, "Partition", {
        get: function () { return this.get("Partition"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(LogicalFile.prototype, "Blooms", {
        get: function () { return this.get("Blooms"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(LogicalFile.prototype, "ExpireDays", {
        get: function () { return this.get("ExpireDays"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(LogicalFile.prototype, "KeyType", {
        get: function () { return this.get("KeyType"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(LogicalFile.prototype, "IsRestricted", {
        get: function () { return this.get("IsRestricted"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(LogicalFile.prototype, "AtRestCost", {
        get: function () { return this.get("AtRestCost"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(LogicalFile.prototype, "AccessCost", {
        get: function () { return this.get("AccessCost"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(LogicalFile.prototype, "StateID", {
        get: function () { return this.get("StateID"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(LogicalFile.prototype, "ExpirationDate", {
        get: function () { return this.get("ExpirationDate"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(LogicalFile.prototype, "ExtendedIndexInfo", {
        get: function () { return this.get("ExtendedIndexInfo"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(LogicalFile.prototype, "properties", {
        get: function () { return this.get(); },
        enumerable: false,
        configurable: true
    });
    LogicalFile.attach = function (optsConnection, Cluster, Name) {
        var retVal = _store$1.get({ BaseUrl: optsConnection.baseUrl, Cluster: Cluster, Name: Name }, function () {
            return new LogicalFile(optsConnection, Cluster, Name);
        });
        return retVal;
    };
    LogicalFile.prototype.filePartsOnCluster = function () {
        var _a;
        return __spreadArray([], (((_a = this.DFUFilePartsOnClusters) === null || _a === void 0 ? void 0 : _a.DFUFilePartsOnCluster) || []), true);
    };
    LogicalFile.prototype.fileParts = function () {
        var _a, _b;
        var retVal = [];
        for (var _i = 0, _c = ((_a = this.DFUFilePartsOnClusters) === null || _a === void 0 ? void 0 : _a.DFUFilePartsOnCluster) || []; _i < _c.length; _i++) {
            var poc = _c[_i];
            for (var _d = 0, _e = ((_b = poc === null || poc === void 0 ? void 0 : poc.DFUFileParts) === null || _b === void 0 ? void 0 : _b.DFUPart) || []; _d < _e.length; _d++) {
                var part = _e[_d];
                var row = __assign(__assign({}, poc), part);
                delete row.DFUFileParts;
                retVal.push(row);
            }
        }
        return retVal;
    };
    LogicalFile.prototype.update = function (request) {
        var _this = this;
        return this.connection.DFUInfo(__assign(__assign({}, request), {
            Cluster: this.Cluster,
            Name: this.Name
        })).then(function (response) {
            _this.set(__assign({ Cluster: _this.Cluster }, response.FileDetail));
            return response;
        });
    };
    LogicalFile.prototype.fetchInfo = function () {
        var _this = this;
        return this.connection.DFUInfo({ Cluster: this.Cluster, Name: this.Name }).then(function (response) {
            _this.set(__assign({ Cluster: _this.Cluster }, response.FileDetail));
            return response.FileDetail;
        }).catch(function (e) {
            //  deleted  ---
            var fileMissing = e.Exception.some(function (exception) {
                if (exception.Code === 20038) {
                    _this.set("Name", _this.Name + " (Deleted)");
                    _this.set("StateID", 999);
                    return true;
                }
                return false;
            });
            if (!fileMissing) {
                logger$3.warning("Unexpected exception:  ");
                throw e;
            }
            return {};
        });
    };
    LogicalFile.prototype.fetchDefFile = function (format) {
        return this.connection.DFUFile({ Name: this.Name, Format: format });
    };
    LogicalFile.prototype.fetchListHistory = function () {
        return this.connection.ListHistory({ Name: this.Name }).then(function (response) {
            var _a;
            return ((_a = response === null || response === void 0 ? void 0 : response.History) === null || _a === void 0 ? void 0 : _a.Origin) || [];
        });
    };
    LogicalFile.prototype.eraseHistory = function () {
        return this.connection.EraseHistory({ Name: this.Name }).then(function (response) {
            var _a;
            return ((_a = response === null || response === void 0 ? void 0 : response.History) === null || _a === void 0 ? void 0 : _a.Origin) || [];
        });
    };
    return LogicalFile;
}(StateObject));

var MachineCache = /** @class */ (function (_super) {
    __extends(MachineCache, _super);
    function MachineCache() {
        return _super.call(this, function (obj) {
            return obj.Address;
        }) || this;
    }
    return MachineCache;
}(Cache));
var _machines = new MachineCache();
var Machine = /** @class */ (function (_super) {
    __extends(Machine, _super);
    function Machine(optsConnection) {
        var _this = _super.call(this) || this;
        if (optsConnection instanceof MachineService) {
            _this.connection = optsConnection;
        }
        else {
            _this.connection = new MachineService(optsConnection);
        }
        return _this;
    }
    Object.defineProperty(Machine.prototype, "Address", {
        get: function () { return this.get("Address"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Machine.prototype, "ConfigAddress", {
        get: function () { return this.get("ConfigAddress"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Machine.prototype, "Name", {
        get: function () { return this.get("Name"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Machine.prototype, "ProcessType", {
        get: function () { return this.get("ProcessType"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Machine.prototype, "DisplayType", {
        get: function () { return this.get("DisplayType"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Machine.prototype, "Description", {
        get: function () { return this.get("Description"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Machine.prototype, "AgentVersion", {
        get: function () { return this.get("AgentVersion"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Machine.prototype, "Contact", {
        get: function () { return this.get("Contact"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Machine.prototype, "Location", {
        get: function () { return this.get("Location"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Machine.prototype, "UpTime", {
        get: function () { return this.get("UpTime"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Machine.prototype, "ComponentName", {
        get: function () { return this.get("ComponentName"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Machine.prototype, "ComponentPath", {
        get: function () { return this.get("ComponentPath"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Machine.prototype, "RoxieState", {
        get: function () { return this.get("RoxieState"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Machine.prototype, "RoxieStateDetails", {
        get: function () { return this.get("RoxieStateDetails"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Machine.prototype, "OS", {
        get: function () { return this.get("OS"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Machine.prototype, "ProcessNumber", {
        get: function () { return this.get("ProcessNumber"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Machine.prototype, "Channels", {
        get: function () { return this.get("Channels"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Machine.prototype, "Processors", {
        get: function () { return this.get("Processors"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Machine.prototype, "Storage", {
        get: function () { return this.get("Storage"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Machine.prototype, "Running", {
        get: function () { return this.get("Running"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Machine.prototype, "PhysicalMemory", {
        get: function () { return this.get("PhysicalMemory"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Machine.prototype, "VirtualMemory", {
        get: function () { return this.get("VirtualMemory"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Machine.prototype, "ComponentInfo", {
        get: function () { return this.get("ComponentInfo"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Machine.prototype, "Exception", {
        get: function () { return this.get("Exception"); },
        enumerable: false,
        configurable: true
    });
    Machine.attach = function (optsConnection, address, state) {
        var retVal = _machines.get({ Address: address }, function () {
            return new Machine(optsConnection);
        });
        if (state) {
            retVal.set(state);
        }
        return retVal;
    };
    return Machine;
}(StateObject));

var TargetClusterCache = /** @class */ (function (_super) {
    __extends(TargetClusterCache, _super);
    function TargetClusterCache() {
        return _super.call(this, function (obj) {
            return "".concat(obj.BaseUrl, "-").concat(obj.Name);
        }) || this;
    }
    return TargetClusterCache;
}(Cache));
var _targetCluster = new TargetClusterCache();
var TargetCluster = /** @class */ (function (_super) {
    __extends(TargetCluster, _super);
    function TargetCluster(optsConnection, name) {
        var _this = _super.call(this) || this;
        if (optsConnection instanceof TopologyService) {
            _this.connection = optsConnection;
            _this.machineConnection = new MachineService(optsConnection.connectionOptions());
        }
        else {
            _this.connection = new TopologyService(optsConnection);
            _this.machineConnection = new MachineService(optsConnection);
        }
        _this.clear({
            Name: name
        });
        return _this;
    }
    Object.defineProperty(TargetCluster.prototype, "BaseUrl", {
        get: function () { return this.connection.baseUrl; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TargetCluster.prototype, "Name", {
        get: function () { return this.get("Name"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TargetCluster.prototype, "Prefix", {
        get: function () { return this.get("Prefix"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TargetCluster.prototype, "Type", {
        get: function () { return this.get("Type"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TargetCluster.prototype, "IsDefault", {
        get: function () { return this.get("IsDefault"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TargetCluster.prototype, "TpClusters", {
        get: function () { return this.get("TpClusters"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TargetCluster.prototype, "TpEclCCServers", {
        get: function () { return this.get("TpEclCCServers"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TargetCluster.prototype, "TpEclServers", {
        get: function () { return this.get("TpEclServers"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TargetCluster.prototype, "TpEclAgents", {
        get: function () { return this.get("TpEclAgents"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TargetCluster.prototype, "TpEclSchedulers", {
        get: function () { return this.get("TpEclSchedulers"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TargetCluster.prototype, "MachineInfoEx", {
        get: function () { return this.get("MachineInfoEx", []); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TargetCluster.prototype, "CMachineInfoEx", {
        get: function () {
            var _this = this;
            return this.MachineInfoEx.map(function (machineInfoEx) { return Machine.attach(_this.machineConnection, machineInfoEx.Address, machineInfoEx); });
        },
        enumerable: false,
        configurable: true
    });
    TargetCluster.attach = function (optsConnection, name, state) {
        var retVal = _targetCluster.get({ BaseUrl: optsConnection.baseUrl, Name: name }, function () {
            return new TargetCluster(optsConnection, name);
        });
        if (state) {
            retVal.set(__assign({}, state));
        }
        return retVal;
    };
    TargetCluster.prototype.fetchMachines = function (request) {
        var _this = this;
        if (request === void 0) { request = {}; }
        return this.machineConnection.GetTargetClusterInfo(__assign({ TargetClusters: {
                Item: ["".concat(this.Type, ":").concat(this.Name)]
            } }, request)).then(function (response) {
            var retVal = [];
            for (var _i = 0, _a = response.TargetClusterInfoList.TargetClusterInfo; _i < _a.length; _i++) {
                var machineInfo = _a[_i];
                for (var _b = 0, _c = machineInfo.Processes.MachineInfoEx; _b < _c.length; _b++) {
                    var machineInfoEx = _c[_b];
                    retVal.push(machineInfoEx);
                }
            }
            _this.set("MachineInfoEx", retVal);
            return _this.CMachineInfoEx;
        });
    };
    TargetCluster.prototype.machineStats = function () {
        var maxDisk = 0;
        var totalFree = 0;
        var total = 0;
        for (var _i = 0, _a = this.CMachineInfoEx; _i < _a.length; _i++) {
            var machine = _a[_i];
            for (var _b = 0, _c = machine.Storage.StorageInfo; _b < _c.length; _b++) {
                var storageInfo = _c[_b];
                totalFree += storageInfo.Available;
                total += storageInfo.Total;
                var usage = 1 - storageInfo.Available / storageInfo.Total;
                if (usage > maxDisk) {
                    maxDisk = usage;
                }
            }
        }
        return {
            maxDisk: maxDisk,
            meanDisk: 1 - (total ? totalFree / total : 1)
        };
    };
    TargetCluster.prototype.fetchUsage = function () {
        return this.machineConnection.GetTargetClusterUsageEx([this.Name]);
    };
    return TargetCluster;
}(StateObject));
function targetClusters(optsConnection) {
    var connection;
    if (optsConnection instanceof TopologyService) {
        connection = optsConnection;
    }
    else {
        connection = new TopologyService(optsConnection);
    }
    return connection.TpListTargetClusters({}).then(function (response) {
        return response.TargetClusters.TpClusterNameType.map(function (item) { return TargetCluster.attach(optsConnection, item.Name, item); });
    });
}
var _defaultTargetCluster = {};
function defaultTargetCluster(optsConnection) {
    if (!_defaultTargetCluster[optsConnection.baseUrl]) {
        var connection = void 0;
        if (optsConnection instanceof TopologyService) {
            connection = optsConnection;
        }
        else {
            connection = new TopologyService(optsConnection);
        }
        _defaultTargetCluster[optsConnection.baseUrl] = connection.TpListTargetClusters({}).then(function (response) {
            var firstItem;
            var defaultItem;
            var hthorItem;
            response.TargetClusters.TpClusterNameType.forEach(function (item) {
                if (!firstItem) {
                    firstItem = item;
                }
                if (!defaultItem && item.IsDefault === true) {
                    defaultItem = item;
                }
                if (!hthorItem && item.Type === "hthor") {
                    hthorItem = item;
                }
            });
            var defItem = defaultItem || hthorItem || firstItem;
            return TargetCluster.attach(optsConnection, defItem.Name, defItem);
        });
    }
    return _defaultTargetCluster[optsConnection.baseUrl];
}

var TopologyCache = /** @class */ (function (_super) {
    __extends(TopologyCache, _super);
    function TopologyCache() {
        return _super.call(this, function (obj) {
            return obj.BaseUrl;
        }) || this;
    }
    return TopologyCache;
}(Cache));
var _topology = new TopologyCache();
var Topology = /** @class */ (function (_super) {
    __extends(Topology, _super);
    function Topology(optsConnection) {
        var _this = _super.call(this) || this;
        if (optsConnection instanceof TopologyService) {
            _this.connection = optsConnection;
        }
        else {
            _this.connection = new TopologyService(optsConnection);
        }
        return _this;
    }
    Object.defineProperty(Topology.prototype, "BaseUrl", {
        get: function () { return this.connection.baseUrl; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Topology.prototype, "properties", {
        //  Accessors  ---
        get: function () { return this.get(); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Topology.prototype, "TargetClusters", {
        get: function () { return this.get("TargetClusters"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Topology.prototype, "CTargetClusters", {
        get: function () {
            var _this = this;
            return this.TargetClusters.map(function (tc) { return TargetCluster.attach(_this.connection, tc.Name, tc); });
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Topology.prototype, "LogicalClusters", {
        get: function () { return this.get("LogicalClusters"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Topology.prototype, "Services", {
        get: function () { return this.get("Services"); },
        enumerable: false,
        configurable: true
    });
    Topology.attach = function (optsConnection) {
        var retVal = _topology.get({ BaseUrl: optsConnection.baseUrl }, function () {
            return new Topology(optsConnection);
        });
        return retVal;
    };
    Topology.prototype.GetESPServiceBaseURL = function (type) {
        var _this = this;
        if (type === void 0) { type = ""; }
        return this.connection.TpServiceQuery({}).then(function (response) {
            var rootProtocol = _this.connection.protocol();
            var ip = _this.connection.ip();
            var port = rootProtocol === "https:" ? "18002" : "8002";
            if (exists("ServiceList.TpEspServers.TpEspServer", response)) {
                for (var _i = 0, _a = response.ServiceList.TpEspServers.TpEspServer; _i < _a.length; _i++) {
                    var item = _a[_i];
                    if (exists("TpBindings.TpBinding", item)) {
                        for (var _b = 0, _c = item.TpBindings.TpBinding; _b < _c.length; _b++) {
                            var binding = _c[_b];
                            if (binding.Service === type && binding.Protocol + ":" === rootProtocol) {
                                port = binding.Port;
                            }
                        }
                    }
                }
            }
            return "".concat(rootProtocol, "//").concat(ip, ":").concat(port, "/");
        });
    };
    Topology.prototype.fetchTargetClusters = function () {
        var _this = this;
        return this.connection.TpTargetClusterQuery({ Type: "ROOT" }).then(function (response) {
            var _a, _b;
            _this.set({
                TargetClusters: (_b = (_a = response.TpTargetClusters) === null || _a === void 0 ? void 0 : _a.TpTargetCluster) !== null && _b !== void 0 ? _b : []
            });
            return _this.CTargetClusters;
        });
    };
    Topology.prototype.fetchLogicalClusters = function (request) {
        var _this = this;
        if (request === void 0) { request = {}; }
        return this.connection.TpLogicalClusterQuery(request).then(function (response) {
            _this.set({
                LogicalClusters: response.TpLogicalClusters.TpLogicalCluster
            });
            return _this.LogicalClusters;
        });
    };
    Topology.prototype.fetchServices = function (request) {
        var _this = this;
        if (request === void 0) { request = {}; }
        return this.connection.TpServiceQuery(request).then(function (response) {
            _this.set({
                Services: response.ServiceList
            });
            return _this.Services;
        });
    };
    Topology.prototype.refresh = function (force) {
        var _this = this;
        if (force === void 0) { force = false; }
        if (!this._prevRefresh || force) {
            this._prevRefresh = Promise.all([this.fetchTargetClusters(), this.fetchLogicalClusters(), this.fetchServices()]).then(function () {
                return _this;
            });
        }
        return this._prevRefresh;
    };
    //  Monitoring  ---
    //  Events  ---
    Topology.prototype.on = function (eventID, propIDorCallback, callback) {
        if (this.isCallback(propIDorCallback)) {
            switch (eventID) {
                case "changed":
                    _super.prototype.on.call(this, eventID, propIDorCallback);
                    break;
            }
        }
        else {
            switch (eventID) {
                case "changed":
                    _super.prototype.on.call(this, eventID, propIDorCallback, callback);
                    break;
            }
        }
        this._monitor();
        return this;
    };
    return Topology;
}(StateObject));

//  Ported from:  https://github.com/hpcc-systems/HPCC-Platform/blob/f0ed9dbeca49c39fb55aa28fec295c89407ac663/esp/src/src/ESPGraph.ts
function safeAssign(obj, key, value) {
    if (key === "__proto__" || key === "constructor" || key === "prototype")
        return;
    obj[key] = value;
}
function xmlEncode(str) {
    str = "" + str;
    return str.replace(/&/g, "&amp;")
        .replace(/"/g, "&quot;")
        .replace(/'/g, "&apos;")
        .replace(/</g, "&lt;")
        .replace(/>/g, "&gt;")
        .replace(/\n/g, "&#10;")
        .replace(/\r/g, "&#13;");
}
function espTime2Seconds(duration) {
    if (!duration) {
        return 0;
    }
    else if (!isNaN(+duration)) {
        return parseFloat(duration);
    }
    var re = /(?:(?:(\d+).days.)?(?:(\d+)h)?(?:(\d+)m)?(?:(\d+\.\d+|\d+)s))|(?:(\d+\.\d+|\d+)ms|(\d+\.\d+|\d+)us|(\d+\.\d+|\d+)ns)/;
    var match = re.exec(duration);
    if (!match)
        return 0;
    var days = +match[1] || 0;
    var hours = +match[2] || 0;
    var mins = +match[3] || 0;
    var secs = +match[4] || 0;
    var ms = +match[5] || 0;
    var us = +match[6] || 0;
    var ns = +match[7] || 0;
    return (days * 24 * 60 * 60) + (hours * 60 * 60) + (mins * 60) + secs + ms / 1000 + us / 1000000 + ns / 1000000000;
}
function unitTest(size, unit) {
    var nsIndex = size.indexOf(unit);
    if (nsIndex !== -1) {
        return parseFloat(size.substring(0, nsIndex));
    }
    return -1;
}
function espSize2Bytes(size) {
    if (!size) {
        return 0;
    }
    else if (!isNaN(+size)) {
        return parseFloat(size);
    }
    var retVal = unitTest(size, "Kb");
    if (retVal >= 0) {
        return retVal * 1024;
    }
    retVal = unitTest(size, "Mb");
    if (retVal >= 0) {
        return retVal * Math.pow(1024, 2);
    }
    retVal = unitTest(size, "Gb");
    if (retVal >= 0) {
        return retVal * Math.pow(1024, 3);
    }
    retVal = unitTest(size, "Tb");
    if (retVal >= 0) {
        return retVal * Math.pow(1024, 4);
    }
    retVal = unitTest(size, "Pb");
    if (retVal >= 0) {
        return retVal * Math.pow(1024, 5);
    }
    retVal = unitTest(size, "Eb");
    if (retVal >= 0) {
        return retVal * Math.pow(1024, 6);
    }
    retVal = unitTest(size, "Zb");
    if (retVal >= 0) {
        return retVal * Math.pow(1024, 7);
    }
    retVal = unitTest(size, "b");
    if (retVal >= 0) {
        return retVal;
    }
    return 0;
}
function espSkew2Number(skew) {
    if (!skew) {
        return 0;
    }
    return parseFloat(skew);
}
var GRAPH_TYPE;
(function (GRAPH_TYPE) {
    GRAPH_TYPE[GRAPH_TYPE["UNKNOWN"] = 0] = "UNKNOWN";
    GRAPH_TYPE[GRAPH_TYPE["GRAPH"] = 1] = "GRAPH";
    GRAPH_TYPE[GRAPH_TYPE["SUBGRAPH"] = 2] = "SUBGRAPH";
    GRAPH_TYPE[GRAPH_TYPE["VERTEX"] = 3] = "VERTEX";
    GRAPH_TYPE[GRAPH_TYPE["EDGE"] = 4] = "EDGE";
    GRAPH_TYPE[GRAPH_TYPE["LAST"] = 5] = "LAST";
})(GRAPH_TYPE || (GRAPH_TYPE = {}));
var GRAPH_TYPE_STRING;
(function (GRAPH_TYPE_STRING) {
    GRAPH_TYPE_STRING["UNKNOWN"] = "Unknown";
    GRAPH_TYPE_STRING["GRAPH"] = "Graph";
    GRAPH_TYPE_STRING["SUBGRAPH"] = "Cluster";
    GRAPH_TYPE_STRING["VERTEX"] = "Vertex";
    GRAPH_TYPE_STRING["EDGE"] = "Edge";
    GRAPH_TYPE_STRING["LAST"] = "Last";
})(GRAPH_TYPE_STRING || (GRAPH_TYPE_STRING = {}));
var LocalisedXGMMLWriter = /** @class */ (function () {
    function LocalisedXGMMLWriter(graph) {
        this.graph = graph;
        this.m_xgmml = "";
        this.m_visibleSubgraphs = {};
        this.m_visibleVertices = {};
        this.m_semiVisibleVertices = {};
        this.m_visibleEdges = {};
    }
    LocalisedXGMMLWriter.prototype.calcVisibility = function (items, localisationDepth, localisationDistance, noSpills) {
        var _this = this;
        this.noSpills = noSpills;
        items.forEach(function (item) {
            if (_this.graph.isVertex(item)) {
                _this.calcInVertexVisibility(item, localisationDistance);
                _this.calcOutVertexVisibility(item, localisationDistance);
            }
            else if (_this.graph.isEdge(item)) {
                _this.calcInVertexVisibility(item.getSource(), localisationDistance - 1);
                _this.calcOutVertexVisibility(item.getTarget(), localisationDistance - 1);
            }
            else if (_this.graph.isSubgraph(item)) {
                _this.m_visibleSubgraphs[item.__hpcc_id] = item;
                _this.calcSubgraphVisibility(item, localisationDepth - 1);
            }
        });
        this.calcVisibility2();
    };
    LocalisedXGMMLWriter.prototype.calcInVertexVisibility = function (vertex, localisationDistance) {
        var _this = this;
        if (this.noSpills && vertex.isSpill()) {
            localisationDistance++;
        }
        this.m_visibleVertices[vertex.__hpcc_id] = vertex;
        if (localisationDistance > 0) {
            vertex.getInEdges().forEach(function (edge) {
                _this.calcInVertexVisibility(edge.getSource(), localisationDistance - 1);
            });
        }
    };
    LocalisedXGMMLWriter.prototype.calcOutVertexVisibility = function (vertex, localisationDistance) {
        var _this = this;
        if (this.noSpills && vertex.isSpill()) {
            localisationDistance++;
        }
        this.m_visibleVertices[vertex.__hpcc_id] = vertex;
        if (localisationDistance > 0) {
            vertex.getOutEdges().forEach(function (edge) {
                _this.calcOutVertexVisibility(edge.getTarget(), localisationDistance - 1);
            });
        }
    };
    LocalisedXGMMLWriter.prototype.calcSubgraphVisibility = function (subgraph, localisationDepth) {
        var _this = this;
        if (localisationDepth < 0) {
            return;
        }
        if (localisationDepth > 0) {
            subgraph.__hpcc_subgraphs.forEach(function (subgraph, idx) {
                _this.calcSubgraphVisibility(subgraph, localisationDepth - 1);
            });
        }
        subgraph.__hpcc_subgraphs.forEach(function (subgraph, idx) {
            _this.m_visibleSubgraphs[subgraph.__hpcc_id] = subgraph;
        });
        subgraph.__hpcc_vertices.forEach(function (vertex, idx) {
            _this.m_visibleVertices[vertex.__hpcc_id] = vertex;
        });
        //  Calculate edges that pass through the subgraph  ---
        var dedupEdges = {};
        this.graph.edges.forEach(function (edge, idx) {
            if (edge.getSource().__hpcc_parent !== edge.getTarget().__hpcc_parent && subgraph === _this.getCommonAncestor(edge)) {
                //  Only include one unique edge between subgraphs  ---
                if (!dedupEdges[edge.getSource().__hpcc_parent.__hpcc_id + "::" + edge.getTarget().__hpcc_parent.__hpcc_id]) {
                    dedupEdges[edge.getSource().__hpcc_parent.__hpcc_id + "::" + edge.getTarget().__hpcc_parent.__hpcc_id] = true;
                    _this.m_visibleEdges[edge.__hpcc_id] = edge;
                }
            }
        });
    };
    LocalisedXGMMLWriter.prototype.buildVertexString = function (vertex, isPoint) {
        var attrStr = "";
        var propsStr = "";
        var props = vertex.getProperties();
        for (var key in props) {
            if (isPoint && key.indexOf("_kind") >= 0) {
                propsStr += "<att name=\"_kind\" value=\"point\"/>";
            }
            else if (key === "id" || key === "label") {
                attrStr += " " + key + "=\"" + xmlEncode(props[key]) + "\"";
            }
            else {
                propsStr += "<att name=\"" + key + "\" value=\"" + xmlEncode(props[key]) + "\"/>";
            }
        }
        return "<node" + attrStr + ">" + propsStr + "</node>";
    };
    LocalisedXGMMLWriter.prototype.buildEdgeString = function (edge) {
        var attrStr = "";
        var propsStr = "";
        var props = edge.getProperties();
        for (var key in props) {
            if (key.toLowerCase() === "id" ||
                key.toLowerCase() === "label" ||
                key.toLowerCase() === "source" ||
                key.toLowerCase() === "target") {
                attrStr += " " + key + "=\"" + xmlEncode(props[key]) + "\"";
            }
            else {
                propsStr += "<att name=\"" + key + "\" value=\"" + xmlEncode(props[key]) + "\"/>";
            }
        }
        return "<edge" + attrStr + ">" + propsStr + "</edge>";
    };
    LocalisedXGMMLWriter.prototype.getAncestors = function (v, ancestors) {
        var parent = v.__hpcc_parent;
        while (parent) {
            ancestors.push(parent);
            parent = parent.__hpcc_parent;
        }
    };
    LocalisedXGMMLWriter.prototype.getCommonAncestorV = function (v1, v2) {
        var v1_ancestors = [];
        var v2_ancestors = [];
        this.getAncestors(v1, v1_ancestors);
        this.getAncestors(v2, v2_ancestors);
        var finger1 = v1_ancestors.length - 1;
        var finger2 = v2_ancestors.length - 1;
        var retVal = null;
        while (finger1 >= 0 && finger2 >= 0 && v1_ancestors[finger1] === v2_ancestors[finger2]) {
            retVal = v1_ancestors[finger1];
            --finger1;
            --finger2;
        }
        return retVal;
    };
    LocalisedXGMMLWriter.prototype.getCommonAncestor = function (e) {
        return this.getCommonAncestorV(e.getSource(), e.getTarget());
    };
    LocalisedXGMMLWriter.prototype.calcAncestorVisibility = function (vertex) {
        var _this = this;
        var ancestors = [];
        this.getAncestors(vertex, ancestors);
        ancestors.forEach(function (item, idx) {
            _this.m_visibleSubgraphs[item.__hpcc_id] = item;
        });
    };
    LocalisedXGMMLWriter.prototype.calcVisibility2 = function () {
        var _this = this;
        for (var key in this.m_visibleVertices) {
            var vertex = this.m_visibleVertices[key];
            vertex.getInEdges().forEach(function (edge, idx) {
                _this.m_visibleEdges[edge.__hpcc_id] = edge;
            });
            vertex.getOutEdges().forEach(function (edge, idx) {
                _this.m_visibleEdges[edge.__hpcc_id] = edge;
            });
            this.calcAncestorVisibility(vertex);
        }
        this.calcSemiVisibleVertices();
    };
    LocalisedXGMMLWriter.prototype.addSemiVisibleEdge = function (edge) {
        if (edge && !this.m_visibleEdges[edge.__hpcc_id]) {
            this.m_visibleEdges[edge.__hpcc_id] = edge;
        }
    };
    LocalisedXGMMLWriter.prototype.addSemiVisibleVertex = function (vertex) {
        if (!this.m_visibleVertices[vertex.__hpcc_id]) {
            this.m_semiVisibleVertices[vertex.__hpcc_id] = vertex;
            this.calcAncestorVisibility(vertex);
        }
    };
    LocalisedXGMMLWriter.prototype.calcSemiVisibleVertices = function () {
        for (var key in this.m_visibleEdges) {
            var edge = this.m_visibleEdges[key];
            var source = edge.getSource();
            this.addSemiVisibleVertex(source);
            while (this.noSpills && source.isSpill()) {
                var inEdges = source.getInEdges();
                if (inEdges.length) {
                    this.addSemiVisibleEdge(inEdges[0]);
                    source = inEdges[0].getSource();
                    this.addSemiVisibleVertex(source);
                }
                else {
                    break;
                }
            }
            var target = edge.getTarget();
            this.addSemiVisibleVertex(target);
            while (this.noSpills && target.isSpill()) {
                var outEdges = target.getOutEdges();
                if (outEdges.length) {
                    this.addSemiVisibleEdge(outEdges[0]);
                    target = outEdges[0].getTarget();
                    this.addSemiVisibleVertex(target);
                }
                else {
                    break;
                }
            }
        }
    };
    LocalisedXGMMLWriter.prototype.writeXgmml = function () {
        var _this = this;
        this.subgraphVisited(this.graph.subgraphs[0], true);
        this.graph.edges.forEach(function (edge, idx) {
            _this.edgeVisited(edge);
        });
    };
    LocalisedXGMMLWriter.prototype.subgraphVisited = function (subgraph, root) {
        if (root === void 0) { root = false; }
        if (this.m_visibleSubgraphs[subgraph.__hpcc_id]) {
            var propsStr = "";
            this.m_xgmml += root ? "" : "<node id=\"" + subgraph.__hpcc_id + "\"><att><graph>";
            var xgmmlLen = this.m_xgmml.length;
            subgraph.walkSubgraphs(this);
            subgraph.walkVertices(this);
            if (xgmmlLen === this.m_xgmml.length) {
                //  Add at least one child otherwise subgraphs will render as a vertex  ---
                var vertex = subgraph.__hpcc_vertices[0];
                if (vertex) {
                    this.m_xgmml += this.buildVertexString(vertex, true);
                }
            }
            var props = subgraph.getProperties();
            for (var key in props) {
                propsStr += "<att name=\"" + key + "\" value=\"" + xmlEncode(props[key]) + "\"/>";
            }
            this.m_xgmml += root ? "" : "</graph></att>" + propsStr + "</node>";
        }
        return false;
    };
    LocalisedXGMMLWriter.prototype.vertexVisited = function (vertex) {
        if (this.m_visibleVertices[vertex.__hpcc_id]) {
            this.m_xgmml += this.buildVertexString(vertex, false);
        }
        else if (this.m_semiVisibleVertices[vertex.__hpcc_id]) {
            this.m_xgmml += this.buildVertexString(vertex, true);
        }
    };
    LocalisedXGMMLWriter.prototype.edgeVisited = function (edge) {
        if (this.m_visibleEdges[edge.__hpcc_id]) {
            this.m_xgmml += this.buildEdgeString(edge);
        }
    };
    return LocalisedXGMMLWriter;
}());
var GraphItem = /** @class */ (function () {
    function GraphItem(graph, id) {
        this.__hpcc_graph = graph;
        this.__hpcc_id = id;
        this._globalID = id;
    }
    GraphItem.prototype.getProperties = function () {
        var retVal = {};
        for (var key in this) {
            if (key.indexOf("__") !== 0 && this.hasOwnProperty(key)) {
                retVal[key] = this[key];
            }
        }
        return retVal;
    };
    return GraphItem;
}());
var Subgraph = /** @class */ (function (_super) {
    __extends(Subgraph, _super);
    function Subgraph(graph, id) {
        var _this = _super.call(this, graph, id) || this;
        _this._globalType = id === "0" ? "Graph" : "Cluster";
        _this.__hpcc_subgraphs = [];
        _this.__hpcc_vertices = [];
        _this.__hpcc_edges = [];
        _this.id = id;
        return _this;
    }
    Subgraph.prototype.addSubgraph = function (subgraph) {
        subgraph.__hpcc_parent = this;
        if (!this.__hpcc_subgraphs.some(function (subgraph2) { return subgraph === subgraph2; })) {
            this.__hpcc_subgraphs.push(subgraph);
        }
    };
    Subgraph.prototype.addVertex = function (vertex) {
        vertex.__hpcc_parent = this;
        if (!this.__hpcc_vertices.some(function (vertex2) { return vertex === vertex2; })) {
            this.__hpcc_vertices.push(vertex);
        }
    };
    Subgraph.prototype.removeVertex = function (vertex) {
        this.__hpcc_vertices = this.__hpcc_vertices.filter(function (vertex2) { return vertex !== vertex2; });
    };
    Subgraph.prototype.addEdge = function (edge) {
        edge.__hpcc_parent = this;
        if (!this.__hpcc_edges.some(function (edge2) { return edge === edge2; })) {
            this.__hpcc_edges.push(edge);
        }
    };
    Subgraph.prototype.removeEdge = function (edge) {
        this.__hpcc_edges = this.__hpcc_edges.filter(function (edge2) { return edge !== edge2; });
    };
    Subgraph.prototype.remove = function () {
        var _this = this;
        this.__hpcc_subgraphs.forEach(function (subgraph) { return subgraph.__hpcc_parent = _this.__hpcc_parent; });
        this.__hpcc_vertices.forEach(function (vertex) { return vertex.__hpcc_parent = _this.__hpcc_parent; });
        this.__hpcc_edges.forEach(function (edge) { return edge.__hpcc_parent = _this.__hpcc_parent; });
        delete this.__hpcc_parent;
        this.__hpcc_graph.removeItem(this);
    };
    Subgraph.prototype.walkSubgraphs = function (visitor) {
        this.__hpcc_subgraphs.forEach(function (subgraph, idx) {
            if (visitor.subgraphVisited(subgraph)) {
                subgraph.walkSubgraphs(visitor);
            }
        });
    };
    Subgraph.prototype.walkVertices = function (visitor) {
        this.__hpcc_vertices.forEach(function (vertex, idx) {
            visitor.vertexVisited(vertex);
        });
    };
    return Subgraph;
}(GraphItem));
var Vertex = /** @class */ (function (_super) {
    __extends(Vertex, _super);
    function Vertex(graph, id) {
        var _this = _super.call(this, graph, id) || this;
        _this._globalType = "Vertex";
        return _this;
    }
    Vertex.prototype.isSpill = function () {
        return this._isSpill;
    };
    Vertex.prototype.remove = function () {
        var _a;
        var inVertices = this.getInVertices();
        if (inVertices.length <= 1) {
            console.warn(this.__hpcc_id + ":  remove only supports single or zero inputs activities...");
        }
        this.getInEdges().forEach(function (edge) {
            edge.remove();
        });
        this.getOutEdges().forEach(function (edge) {
            edge.setSource(inVertices[0]);
        });
        (_a = this.__hpcc_parent) === null || _a === void 0 ? void 0 : _a.removeVertex(this);
        this.__hpcc_graph.removeItem(this);
    };
    Vertex.prototype.getInVertices = function () {
        return this.getInEdges().map(function (edge) {
            return edge.getSource();
        });
    };
    Vertex.prototype.getInEdges = function () {
        var _this = this;
        return this.__hpcc_graph.edges.filter(function (edge) {
            return edge.getTarget() === _this;
        });
    };
    Vertex.prototype.getOutVertices = function () {
        return this.getOutEdges().map(function (edge) {
            return edge.getTarget();
        });
    };
    Vertex.prototype.getOutEdges = function () {
        var _this = this;
        return this.__hpcc_graph.edges.filter(function (edge) {
            return edge.getSource() === _this;
        });
    };
    return Vertex;
}(GraphItem));
var Edge = /** @class */ (function (_super) {
    __extends(Edge, _super);
    function Edge(graph, id) {
        var _this = _super.call(this, graph, id) || this;
        _this._globalType = "Edge";
        _this._globalType = "Edge";
        return _this;
    }
    Edge.prototype.remove = function () {
        var _this = this;
        this.__hpcc_graph.subgraphs.forEach(function (subgraph) {
            subgraph.removeEdge(_this);
        });
        this.__hpcc_graph.removeItem(this);
    };
    Edge.prototype.getSource = function () {
        return this.__hpcc_graph.idx[this._sourceActivity || this.source];
    };
    Edge.prototype.setSource = function (source) {
        if (this._sourceActivity) {
            this._sourceActivity = source.__hpcc_id;
        }
        else if (this.source) {
            this.source = source.__hpcc_id;
        }
        if (this.__widget) {
            this.__widget.setSource(this.getSource().__widget);
        }
    };
    Edge.prototype.getTarget = function () {
        return this.__hpcc_graph.idx[this._targetActivity || this.target];
    };
    return Edge;
}(GraphItem));
var QueryGraph = /** @class */ (function () {
    function QueryGraph() {
        this.idx = {};
        this.subgraphs = [];
        this.vertices = [];
        this.edges = [];
        this.xgmml = "";
        this.clear();
    }
    QueryGraph.prototype.clear = function () {
        this.xgmml = "";
        this.idx = {};
        this.subgraphs = [];
        this.vertices = [];
        this.edges = [];
    };
    QueryGraph.prototype.load = function (xgmml) {
        this.clear();
        this.merge(xgmml);
    };
    QueryGraph.prototype.merge = function (xgmml) {
        this.xgmml = xgmml;
        var parser = new DOMParser();
        var dom = parser.parseFromString(xgmml, "text/xml");
        this.walkDocument(dom.documentElement, "0");
    };
    QueryGraph.prototype.isSubgraph = function (item) {
        return item instanceof Subgraph;
    };
    QueryGraph.prototype.isVertex = function (item) {
        return item instanceof Vertex;
    };
    QueryGraph.prototype.isEdge = function (item) {
        return item instanceof Edge;
    };
    QueryGraph.prototype.getGlobalType = function (item) {
        if (item instanceof Vertex) {
            return GRAPH_TYPE.VERTEX;
        }
        else if (item instanceof Edge) {
            return GRAPH_TYPE.EDGE;
        }
        else if (item instanceof Subgraph) {
            return GRAPH_TYPE.SUBGRAPH;
        }
        else if (item instanceof QueryGraph) {
            return GRAPH_TYPE.GRAPH;
        }
        return GRAPH_TYPE.UNKNOWN;
    };
    QueryGraph.prototype.getGlobalTypeString = function (item) {
        if (item instanceof Vertex) {
            return GRAPH_TYPE_STRING.VERTEX;
        }
        else if (item instanceof Edge) {
            return GRAPH_TYPE_STRING.EDGE;
        }
        else if (item instanceof Subgraph) {
            return GRAPH_TYPE_STRING.SUBGRAPH;
        }
        else if (item instanceof QueryGraph) {
            return GRAPH_TYPE_STRING.GRAPH;
        }
        return GRAPH_TYPE_STRING.UNKNOWN;
    };
    QueryGraph.prototype.getItem = function (docNode, id) {
        if (!this.idx[id]) {
            switch (docNode.tagName) {
                case "graph":
                    var subgraph = new Subgraph(this, id);
                    this.subgraphs.push(subgraph);
                    this.idx[id] = subgraph;
                    break;
                case "node":
                    var vertex = new Vertex(this, id);
                    this.vertices.push(vertex);
                    this.idx[id] = vertex;
                    break;
                case "edge":
                    var edge = new Edge(this, id);
                    this.edges.push(edge);
                    this.idx[id] = edge;
                    break;
                default:
                    console.warn("Graph.getItem - Unknown Node Type!");
                    break;
            }
        }
        var retVal = this.idx[id];
        Array.from(docNode.attributes).forEach(function (attr) {
            safeAssign(retVal, attr.name, attr.value);
        });
        return retVal;
    };
    QueryGraph.prototype.removeItem = function (item) {
        delete this.idx[item.__hpcc_id];
        if (item instanceof Subgraph) {
            this.subgraphs = this.subgraphs.filter(function (subgraph) {
                return item !== subgraph;
            });
        }
        else if (item instanceof Vertex) {
            this.vertices = this.vertices.filter(function (vertex) {
                return item !== vertex;
            });
        }
        else if (item instanceof Edge) {
            this.edges = this.edges.filter(function (edge) {
                return item !== edge;
            });
        }
    };
    QueryGraph.prototype.getChildByTagName = function (docNode, tagName) {
        var retVal = null;
        Array.from(docNode.childNodes).some(function (childNode, idx) {
            if (childNode.tagName === tagName) {
                retVal = childNode;
                return true;
            }
        });
        return retVal;
    };
    QueryGraph.prototype.walkDocument = function (docNode, id) {
        var _this = this;
        var retVal = this.getItem(docNode, id);
        docNode.childNodes.forEach(function (childNode, idx) {
            switch (childNode.nodeType) {
                case 1: // 	ELEMENT_NODE
                    switch (childNode.tagName) {
                        case "graph":
                            break;
                        case "node":
                            var isSubgraph = false;
                            var attNode = _this.getChildByTagName(childNode, "att");
                            if (attNode) {
                                var graphNode = _this.getChildByTagName(attNode, "graph");
                                if (graphNode) {
                                    isSubgraph = true;
                                    var subgraph = _this.walkDocument(graphNode, childNode.getAttribute("id"));
                                    retVal.addSubgraph(subgraph);
                                }
                            }
                            if (!isSubgraph) {
                                var vertex = _this.walkDocument(childNode, childNode.getAttribute("id"));
                                retVal.addVertex(vertex);
                            }
                            break;
                        case "att":
                            var name_1 = childNode.getAttribute("name");
                            var uname = "_" + name_1;
                            var value = childNode.getAttribute("value");
                            if (name_1.indexOf("Time") === 0) {
                                safeAssign(retVal, uname, value);
                                safeAssign(retVal, name_1, "" + espTime2Seconds(value));
                            }
                            else if (name_1.indexOf("Size") === 0) {
                                safeAssign(retVal, uname, value);
                                safeAssign(retVal, name_1, "" + espSize2Bytes(value));
                            }
                            else if (name_1.indexOf("Skew") === 0) {
                                safeAssign(retVal, uname, value);
                                safeAssign(retVal, name_1, "" + espSkew2Number(value));
                            }
                            else {
                                safeAssign(retVal, name_1, value);
                            }
                            break;
                        case "edge":
                            var edge = _this.walkDocument(childNode, childNode.getAttribute("id"));
                            if (edge.NumRowsProcessed !== undefined) {
                                edge._eclwatchCount = edge.NumRowsProcessed.replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                            }
                            else if (edge.Count !== undefined) {
                                edge._eclwatchCount = edge.Count.replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                            }
                            else if (edge.count !== undefined) {
                                edge._eclwatchCount = edge.count.replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                            }
                            if (edge.inputProgress) {
                                edge._eclwatchInputProgress = "[" + edge.inputProgress.replace(/\B(?=(\d{3})+(?!\d))/g, ",") + "]";
                            }
                            if (edge.SkewMaxRowsProcessed && edge.SkewMinRowsProcessed) {
                                edge._eclwatchSkew = "+" + edge.SkewMaxRowsProcessed + ", " + edge.SkewMinRowsProcessed;
                            }
                            if (edge._dependsOn) ;
                            else if (edge._childGraph) ;
                            else if (edge._sourceActivity || edge._targetActivity) {
                                edge._isSpill = true;
                                var source = edge.getSource();
                                source._isSpill = true;
                                var target = edge.getTarget();
                                target._isSpill = true;
                            }
                            retVal.addEdge(edge);
                            break;
                    }
                    break;
            }
        });
        return retVal;
    };
    QueryGraph.prototype.removeSubgraphs = function () {
        var subgraphs = __spreadArray([], this.subgraphs, true);
        subgraphs.forEach(function (subgraph) {
            if (subgraph.__hpcc_parent instanceof Subgraph) {
                subgraph.remove();
            }
        });
    };
    QueryGraph.prototype.removeSpillVertices = function () {
        var vertices = __spreadArray([], this.vertices, true);
        vertices.forEach(function (vertex) {
            if (vertex.isSpill()) {
                vertex.remove();
            }
        });
    };
    QueryGraph.prototype.getLocalisedXGMML = function (items, localisationDepth, localisationDistance, noSpills) {
        var xgmmlWriter = new LocalisedXGMMLWriter(this);
        xgmmlWriter.calcVisibility(items, localisationDepth, localisationDistance, noSpills);
        xgmmlWriter.writeXgmml();
        return "<graph>" + xgmmlWriter.m_xgmml + "</graph>";
    };
    return QueryGraph;
}());

var logger$2 = scopedLogger("@hpcc-js/comms/ecl/query.ts");
var siFormatter = format("~s");
function isNumber(n) {
    return !isNaN(parseFloat(n)) && !isNaN(n - 0);
}
var QueryCache = /** @class */ (function (_super) {
    __extends(QueryCache, _super);
    function QueryCache() {
        return _super.call(this, function (obj) {
            return Cache.hash([obj.QueryId, obj.QuerySet]);
        }) || this;
    }
    return QueryCache;
}(Cache));
var _queries = new QueryCache();
var Query = /** @class */ (function (_super) {
    __extends(Query, _super);
    function Query(optsConnection, querySet, queryID, queryDetails) {
        var _this = _super.call(this) || this;
        if (optsConnection instanceof WorkunitsService) {
            _this.wsWorkunitsService = optsConnection;
        }
        else {
            _this.wsWorkunitsService = new WorkunitsService(optsConnection);
        }
        _this.topology = Topology.attach(_this.wsWorkunitsService.opts());
        _this.set(__assign({ QuerySet: querySet, QueryId: queryID }, queryDetails));
        return _this;
    }
    Object.defineProperty(Query.prototype, "BaseUrl", {
        get: function () { return this.wsWorkunitsService.baseUrl; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Query.prototype, "properties", {
        get: function () { return this.get(); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Query.prototype, "Exceptions", {
        get: function () { return this.get("Exceptions"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Query.prototype, "QueryId", {
        get: function () { return this.get("QueryId"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Query.prototype, "QuerySet", {
        get: function () { return this.get("QuerySet"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Query.prototype, "QueryName", {
        get: function () { return this.get("QueryName"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Query.prototype, "Wuid", {
        get: function () { return this.get("Wuid"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Query.prototype, "Dll", {
        get: function () { return this.get("Dll"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Query.prototype, "Suspended", {
        get: function () { return this.get("Suspended"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Query.prototype, "Activated", {
        get: function () { return this.get("Activated"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Query.prototype, "SuspendedBy", {
        get: function () { return this.get("SuspendedBy"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Query.prototype, "Clusters", {
        get: function () { return this.get("Clusters"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Query.prototype, "PublishedBy", {
        get: function () { return this.get("PublishedBy"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Query.prototype, "Comment", {
        get: function () { return this.get("Comment"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Query.prototype, "LogicalFiles", {
        get: function () { return this.get("LogicalFiles"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Query.prototype, "SuperFiles", {
        get: function () { return this.get("SuperFiles"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Query.prototype, "IsLibrary", {
        get: function () { return this.get("IsLibrary"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Query.prototype, "Priority", {
        get: function () { return this.get("Priority"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Query.prototype, "WUSnapShot", {
        get: function () { return this.get("WUSnapShot"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Query.prototype, "CompileTime", {
        get: function () { return this.get("CompileTime"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Query.prototype, "LibrariesUsed", {
        get: function () { return this.get("LibrariesUsed"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Query.prototype, "CountGraphs", {
        get: function () { return this.get("CountGraphs"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Query.prototype, "ResourceURLCount", {
        get: function () { return this.get("ResourceURLCount"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Query.prototype, "WsEclAddresses", {
        get: function () { return this.get("WsEclAddresses"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Query.prototype, "WUGraphs", {
        get: function () { return this.get("WUGraphs"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Query.prototype, "WUTimers", {
        get: function () { return this.get("WUTimers"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Query.prototype, "PriorityID", {
        get: function () { return this.get("PriorityID"); },
        enumerable: false,
        configurable: true
    });
    Query.attach = function (optsConnection, querySet, queryId) {
        var retVal = _queries.get({ BaseUrl: optsConnection.baseUrl, QuerySet: querySet, QueryId: queryId }, function () {
            return new Query(optsConnection, querySet, queryId);
        });
        return retVal;
    };
    Query.prototype.wsEclService = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (!this._eclService) {
                    this._eclService = this.topology.fetchServices({}).then(function (services) {
                        var _a, _b, _c, _d;
                        for (var _i = 0, _e = (_b = (_a = services === null || services === void 0 ? void 0 : services.TpEspServers) === null || _a === void 0 ? void 0 : _a.TpEspServer) !== null && _b !== void 0 ? _b : []; _i < _e.length; _i++) {
                            var espServer = _e[_i];
                            for (var _f = 0, _g = (_d = (_c = espServer === null || espServer === void 0 ? void 0 : espServer.TpBindings) === null || _c === void 0 ? void 0 : _c.TpBinding) !== null && _d !== void 0 ? _d : []; _f < _g.length; _f++) {
                                var binding = _g[_f];
                                if ((binding === null || binding === void 0 ? void 0 : binding.Service) === "ws_ecl") {
                                    var baseUrl = "".concat(binding.Protocol, "://").concat(globalThis.location.hostname, ":").concat(binding.Port);
                                    return new EclService({ baseUrl: baseUrl });
                                }
                            }
                        }
                        return undefined;
                    });
                }
                return [2 /*return*/, this._eclService];
            });
        });
    };
    Query.prototype.fetchDetails = function () {
        return __awaiter(this, void 0, void 0, function () {
            var queryDetails;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.wsWorkunitsService.WUQueryDetails({
                            QuerySet: this.QuerySet,
                            QueryId: this.QueryId,
                            IncludeStateOnClusters: true,
                            IncludeSuperFiles: true,
                            IncludeWsEclAddresses: true,
                            CheckAllNodes: false
                        })];
                    case 1:
                        queryDetails = _a.sent();
                        this.set(__assign({}, queryDetails));
                        return [2 /*return*/];
                }
            });
        });
    };
    Query.prototype.fetchRequestSchema = function () {
        return __awaiter(this, void 0, void 0, function () {
            var wsEclService, _a, e_1;
            var _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0: return [4 /*yield*/, this.wsEclService()];
                    case 1:
                        wsEclService = _c.sent();
                        _c.label = 2;
                    case 2:
                        _c.trys.push([2, 4, , 5]);
                        _a = this;
                        return [4 /*yield*/, (wsEclService === null || wsEclService === void 0 ? void 0 : wsEclService.requestJson(this.QuerySet, this.QueryId))];
                    case 3:
                        _a._requestSchema = (_b = _c.sent()) !== null && _b !== void 0 ? _b : [];
                        return [3 /*break*/, 5];
                    case 4:
                        e_1 = _c.sent();
                        //  See:  https://track.hpccsystems.com/browse/HPCC-29827
                        logger$2.debug(e_1);
                        this._requestSchema = [];
                        return [3 /*break*/, 5];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    Query.prototype.fetchResponseSchema = function () {
        return __awaiter(this, void 0, void 0, function () {
            var wsEclService, _a, e_2;
            var _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0: return [4 /*yield*/, this.wsEclService()];
                    case 1:
                        wsEclService = _c.sent();
                        _c.label = 2;
                    case 2:
                        _c.trys.push([2, 4, , 5]);
                        _a = this;
                        return [4 /*yield*/, (wsEclService === null || wsEclService === void 0 ? void 0 : wsEclService.responseJson(this.QuerySet, this.QueryId))];
                    case 3:
                        _a._responseSchema = (_b = _c.sent()) !== null && _b !== void 0 ? _b : {};
                        return [3 /*break*/, 5];
                    case 4:
                        e_2 = _c.sent();
                        //  See:  https://track.hpccsystems.com/browse/HPCC-29827
                        logger$2.debug(e_2);
                        this._responseSchema = {};
                        return [3 /*break*/, 5];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    Query.prototype.fetchSchema = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, Promise.all([this.fetchRequestSchema(), this.fetchResponseSchema()])];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    Query.prototype.fetchSummaryStats = function () {
        return this.wsWorkunitsService.WUQueryGetSummaryStats({ Target: this.QuerySet, QueryId: this.QueryId });
    };
    Query.prototype.fetchGraph = function (GraphName, SubGraphId) {
        if (GraphName === void 0) { GraphName = ""; }
        if (SubGraphId === void 0) { SubGraphId = ""; }
        return this.wsWorkunitsService.WUQueryGetGraph({ Target: this.QuerySet, QueryId: this.QueryId, GraphName: GraphName, SubGraphId: SubGraphId }).then(function (response) {
            var _a;
            var graph = new QueryGraph();
            var first = true;
            for (var _i = 0, _b = ((_a = response === null || response === void 0 ? void 0 : response.Graphs) === null || _a === void 0 ? void 0 : _a.ECLGraphEx) || []; _i < _b.length; _i++) {
                var graphItem = _b[_i];
                if (first) {
                    graph.load(graphItem.Graph);
                    first = false;
                }
                else {
                    graph.merge(graphItem.Graph);
                }
            }
            return graph;
        });
    };
    Query.prototype.fetchDetailsNormalized = function (request) {
        if (request === void 0) { request = {}; }
        var wu = Workunit.attach(this.wsWorkunitsService, this.Wuid);
        if (wu) {
            return Promise.all([this.fetchGraph(), wu.fetchDetailsMeta(), wu.fetchDetailsRaw(request)]).then(function (promises) {
                var graph = promises[0];
                var meta = promises[1];
                var metrics = promises[2];
                var data = metrics.map(function (metric) {
                    if (metric.Id[0] === "a" || metric.Id[0] === "e") {
                        var item = graph.idx[metric.Id.substring(1)];
                        var _loop_1 = function (key) {
                            if (key.charAt(0) !== "_" && key.charAt(0) === key.charAt(0).toUpperCase() && (typeof item[key] === "string" || typeof item[key] === "number" || typeof item[key] === "boolean")) {
                                if (!metric.Properties.Property.some(function (row) { return row.Name === key; })) {
                                    var isNum = isNumber(item[key]);
                                    var rawValue = isNum ? parseFloat(item[key]) : item[key];
                                    var formatted = item[key];
                                    if (key.indexOf("Time") >= 0) {
                                        rawValue = rawValue / 1000000000;
                                        formatted = siFormatter(rawValue) + "s";
                                    }
                                    metric.Properties.Property.push({
                                        Name: key,
                                        RawValue: rawValue,
                                        Formatted: formatted
                                    });
                                }
                            }
                        };
                        for (var key in item) {
                            _loop_1(key);
                        }
                    }
                    return metric;
                });
                return wu.normalizeDetails(meta, data);
            });
        }
        return Promise.resolve({ meta: undefined, columns: undefined, data: undefined });
    };
    Query.prototype.submit = function (request) {
        return __awaiter(this, void 0, void 0, function () {
            var wsEclService;
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.wsEclService()];
                    case 1:
                        wsEclService = _b.sent();
                        try {
                            return [2 /*return*/, (_a = wsEclService === null || wsEclService === void 0 ? void 0 : wsEclService.submit(this.QuerySet, this.QueryId, request).then(function (results) {
                                    for (var key in results) {
                                        results[key] = results[key].Row;
                                    }
                                    return results;
                                })) !== null && _a !== void 0 ? _a : []];
                        }
                        catch (e) {
                            //  See:  https://track.hpccsystems.com/browse/HPCC-29827
                            logger$2.debug(e);
                            return [2 /*return*/, []];
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    Query.prototype.refresh = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, Promise.all([
                            this.fetchDetails(),
                            this.fetchSchema()
                        ])];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, this];
                }
            });
        });
    };
    Query.prototype.requestFields = function () {
        if (!this._requestSchema)
            return [];
        return this._requestSchema;
    };
    Query.prototype.responseFields = function () {
        if (!this._responseSchema)
            return {};
        return this._responseSchema;
    };
    Query.prototype.resultNames = function () {
        var retVal = [];
        for (var key in this.responseFields()) {
            retVal.push(key);
        }
        return retVal;
    };
    Query.prototype.resultFields = function (resultName) {
        if (!this._responseSchema[resultName])
            return [];
        return this._responseSchema[resultName];
    };
    return Query;
}(StateObject));

var StoreCache = /** @class */ (function (_super) {
    __extends(StoreCache, _super);
    function StoreCache() {
        return _super.call(this, function (obj) {
            return "".concat(obj.BaseUrl, "-").concat(obj.Name, ":").concat(obj.UserSpecific, "-").concat(obj.Namespace);
        }) || this;
    }
    return StoreCache;
}(Cache));
var _store = new StoreCache();
var ValueChangedMessage = /** @class */ (function (_super) {
    __extends(ValueChangedMessage, _super);
    function ValueChangedMessage(key, value, oldValue) {
        var _this = _super.call(this) || this;
        _this.key = key;
        _this.value = value;
        _this.oldValue = oldValue;
        return _this;
    }
    Object.defineProperty(ValueChangedMessage.prototype, "canConflate", {
        get: function () { return true; },
        enumerable: false,
        configurable: true
    });
    ValueChangedMessage.prototype.conflate = function (other) {
        if (this.key === other.key) {
            this.value = other.value;
            return true;
        }
        return false;
    };
    ValueChangedMessage.prototype.void = function () {
        return this.value === this.oldValue;
    };
    return ValueChangedMessage;
}(Message));
var Store = /** @class */ (function () {
    function Store(optsConnection, Name, Namespace, UserSpecific) {
        this._dispatch = new Dispatch();
        this._knownValues = {};
        if (optsConnection instanceof StoreService) {
            this.connection = optsConnection;
        }
        else {
            this.connection = new StoreService(optsConnection);
        }
        this.Name = Name;
        this.UserSpecific = UserSpecific;
        this.Namespace = Namespace;
    }
    Object.defineProperty(Store.prototype, "BaseUrl", {
        get: function () { return this.connection.baseUrl; },
        enumerable: false,
        configurable: true
    });
    Store.attach = function (optsConnection, Name, Namespace, UserSpecific) {
        if (Name === void 0) { Name = "HPCCApps"; }
        if (UserSpecific === void 0) { UserSpecific = true; }
        var retVal = _store.get({ BaseUrl: optsConnection.baseUrl, Name: Name, UserSpecific: UserSpecific, Namespace: Namespace }, function () {
            return new Store(optsConnection, Name, Namespace, UserSpecific);
        });
        return retVal;
    };
    Store.prototype.create = function () {
        this.connection.CreateStore({ Name: this.Name, UserSpecific: this.UserSpecific, Type: "", Description: "" });
    };
    Store.prototype.set = function (key, value, broadcast) {
        var _this = this;
        if (broadcast === void 0) { broadcast = true; }
        return this.connection.Set({
            StoreName: this.Name,
            UserSpecific: this.UserSpecific,
            Namespace: this.Namespace,
            Key: key,
            Value: value
        }).then(function (response) {
            var oldValue = _this._knownValues[key];
            _this._knownValues[key] = value;
            if (broadcast) {
                _this._dispatch.post(new ValueChangedMessage(key, value, oldValue));
            }
        }).catch(function (e) {
            console.error("Store.set(\"".concat(key, "\", \"").concat(value, "\") failed:"), e);
        });
    };
    Store.prototype.get = function (key, broadcast) {
        var _this = this;
        if (broadcast === void 0) { broadcast = true; }
        return this.connection.Fetch({
            StoreName: this.Name,
            UserSpecific: this.UserSpecific,
            Namespace: this.Namespace,
            Key: key
        }).then(function (response) {
            var oldValue = _this._knownValues[key];
            _this._knownValues[key] = response.Value;
            if (broadcast) {
                _this._dispatch.post(new ValueChangedMessage(key, response.Value, oldValue));
            }
            return response.Value;
        }).catch(function (e) {
            console.error("Store.get(".concat(key, ") failed:"), e);
            return undefined;
        });
    };
    Store.prototype.getAll = function (broadcast) {
        var _this = this;
        if (broadcast === void 0) { broadcast = true; }
        return this.connection.FetchAll({
            StoreName: this.Name,
            UserSpecific: this.UserSpecific,
            Namespace: this.Namespace
        }).then(function (response) {
            var retVal = {};
            var deletedValues = _this._knownValues;
            _this._knownValues = {};
            response.Pairs.Pair.forEach(function (pair) {
                var oldValue = _this._knownValues[pair.Key];
                _this._knownValues[pair.Key] = pair.Value;
                delete deletedValues[pair.Key];
                retVal[pair.Key] = pair.Value;
                if (broadcast) {
                    _this._dispatch.post(new ValueChangedMessage(pair.Key, pair.Value, oldValue));
                }
            });
            if (broadcast) {
                for (var key in deletedValues) {
                    _this._dispatch.post(new ValueChangedMessage(key, undefined, deletedValues[key]));
                }
            }
            return retVal;
        }).catch(function (e) {
            console.error("Store.getAll failed:", e);
            return {};
        });
    };
    Store.prototype.delete = function (key, broadcast) {
        var _this = this;
        if (broadcast === void 0) { broadcast = true; }
        return this.connection.Delete({
            StoreName: this.Name,
            UserSpecific: this.UserSpecific,
            Namespace: this.Namespace,
            Key: key
        }).then(function (response) {
            var oldValue = _this._knownValues[key];
            delete _this._knownValues[key];
            if (broadcast) {
                _this._dispatch.post(new ValueChangedMessage(key, undefined, oldValue));
            }
        }).catch(function (e) {
            console.error("Store.delete(".concat(key, ") failed:"), e);
        });
    };
    Store.prototype.monitor = function (callback) {
        return this._dispatch.attach(callback);
    };
    return Store;
}());

var logger$1 = scopedLogger("@hpcc-js/comms/dfuWorkunit.ts");
var States;
(function (States) {
    States[States["Unknown"] = 0] = "Unknown";
    States[States["Scheduled"] = 1] = "Scheduled";
    States[States["Queued"] = 2] = "Queued";
    States[States["Started"] = 3] = "Started";
    States[States["Aborted"] = 4] = "Aborted";
    States[States["Failed"] = 5] = "Failed";
    States[States["Finished"] = 6] = "Finished";
    States[States["Monitoring"] = 7] = "Monitoring";
    States[States["Aborting"] = 8] = "Aborting";
    States[States["NotFound"] = 999] = "NotFound";
})(States || (States = {}));
var DFUWorkunitCache = /** @class */ (function (_super) {
    __extends(DFUWorkunitCache, _super);
    function DFUWorkunitCache() {
        return _super.call(this, function (obj) {
            return "".concat(obj.BaseUrl, "-").concat(obj.ID);
        }) || this;
    }
    return DFUWorkunitCache;
}(Cache));
var _workunits = new DFUWorkunitCache();
var DFUWorkunit = /** @class */ (function (_super) {
    __extends(DFUWorkunit, _super);
    //  ---  ---  ---
    function DFUWorkunit(optsConnection, wuid) {
        var _this = _super.call(this) || this;
        _this.connection = new FileSprayService(optsConnection);
        _this.topologyConnection = new TopologyService(optsConnection);
        _this.clearState(wuid);
        return _this;
    }
    Object.defineProperty(DFUWorkunit.prototype, "BaseUrl", {
        get: function () { return this.connection.baseUrl; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DFUWorkunit.prototype, "properties", {
        //  Accessors  ---
        get: function () { return this.get(); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DFUWorkunit.prototype, "ID", {
        get: function () { return this.get("ID"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DFUWorkunit.prototype, "DFUServerName", {
        get: function () { return this.get("DFUServerName"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DFUWorkunit.prototype, "ClusterName", {
        get: function () { return this.get("ClusterName"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DFUWorkunit.prototype, "JobName", {
        get: function () { return this.get("JobName"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DFUWorkunit.prototype, "Queue", {
        get: function () { return this.get("Queue"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DFUWorkunit.prototype, "User", {
        get: function () { return this.get("User"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DFUWorkunit.prototype, "isProtected", {
        get: function () { return this.get("isProtected"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DFUWorkunit.prototype, "Command", {
        get: function () { return this.get("Command"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DFUWorkunit.prototype, "CommandMessage", {
        get: function () { return this.get("CommandMessage"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DFUWorkunit.prototype, "PercentDone", {
        get: function () { return this.get("PercentDone"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DFUWorkunit.prototype, "SecsLeft", {
        get: function () { return this.get("SecsLeft"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DFUWorkunit.prototype, "ProgressMessage", {
        get: function () { return this.get("ProgressMessage"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DFUWorkunit.prototype, "SummaryMessage", {
        get: function () { return this.get("SummaryMessage"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DFUWorkunit.prototype, "State", {
        get: function () { return this.get("State", States.Unknown); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DFUWorkunit.prototype, "SourceLogicalName", {
        get: function () { return this.get("SourceLogicalName"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DFUWorkunit.prototype, "SourceIP", {
        get: function () { return this.get("SourceIP"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DFUWorkunit.prototype, "SourceFilePath", {
        get: function () { return this.get("SourceFilePath"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DFUWorkunit.prototype, "SourceDali", {
        get: function () { return this.get("SourceDali"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DFUWorkunit.prototype, "SourceRecordSize", {
        get: function () { return this.get("SourceRecordSize"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DFUWorkunit.prototype, "SourceFormat", {
        get: function () { return this.get("SourceFormat"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DFUWorkunit.prototype, "RowTag", {
        get: function () { return this.get("RowTag"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DFUWorkunit.prototype, "SourceNumParts", {
        get: function () { return this.get("SourceNumParts"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DFUWorkunit.prototype, "SourceDirectory", {
        get: function () { return this.get("SourceDirectory"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DFUWorkunit.prototype, "DestLogicalName", {
        get: function () { return this.get("DestLogicalName"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DFUWorkunit.prototype, "DestGroupName", {
        get: function () { return this.get("DestGroupName"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DFUWorkunit.prototype, "DestDirectory", {
        get: function () { return this.get("DestDirectory"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DFUWorkunit.prototype, "DestIP", {
        get: function () { return this.get("DestIP"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DFUWorkunit.prototype, "DestFilePath", {
        get: function () { return this.get("DestFilePath"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DFUWorkunit.prototype, "DestFormat", {
        get: function () { return this.get("DestFormat"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DFUWorkunit.prototype, "DestNumParts", {
        get: function () { return this.get("DestNumParts"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DFUWorkunit.prototype, "DestRecordSize", {
        get: function () { return this.get("DestRecordSize"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DFUWorkunit.prototype, "Replicate", {
        get: function () { return this.get("Replicate"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DFUWorkunit.prototype, "Overwrite", {
        get: function () { return this.get("Overwrite"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DFUWorkunit.prototype, "Compress", {
        get: function () { return this.get("Compress"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DFUWorkunit.prototype, "SourceCsvSeparate", {
        get: function () { return this.get("SourceCsvSeparate"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DFUWorkunit.prototype, "SourceCsvQuote", {
        get: function () { return this.get("SourceCsvQuote"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DFUWorkunit.prototype, "SourceCsvTerminate", {
        get: function () { return this.get("SourceCsvTerminate"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DFUWorkunit.prototype, "SourceCsvEscape", {
        get: function () { return this.get("SourceCsvEscape"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DFUWorkunit.prototype, "TimeStarted", {
        get: function () { return this.get("TimeStarted"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DFUWorkunit.prototype, "TimeStopped", {
        get: function () { return this.get("TimeStopped"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DFUWorkunit.prototype, "StateMessage", {
        get: function () { return this.get("StateMessage"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DFUWorkunit.prototype, "MonitorEventName", {
        get: function () { return this.get("MonitorEventName"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DFUWorkunit.prototype, "MonitorSub", {
        get: function () { return this.get("MonitorSub"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DFUWorkunit.prototype, "MonitorShotLimit", {
        get: function () { return this.get("MonitorShotLimit"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DFUWorkunit.prototype, "SourceDiffKeyName", {
        get: function () { return this.get("SourceDiffKeyName"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DFUWorkunit.prototype, "DestDiffKeyName", {
        get: function () { return this.get("DestDiffKeyName"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DFUWorkunit.prototype, "Archived", {
        get: function () { return this.get("Archived"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DFUWorkunit.prototype, "encrypt", {
        get: function () { return this.get("encrypt"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DFUWorkunit.prototype, "decrypt", {
        get: function () { return this.get("decrypt"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DFUWorkunit.prototype, "failIfNoSourceFile", {
        get: function () { return this.get("failIfNoSourceFile"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DFUWorkunit.prototype, "recordStructurePresent", {
        get: function () { return this.get("recordStructurePresent"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DFUWorkunit.prototype, "quotedTerminator", {
        get: function () { return this.get("quotedTerminator"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DFUWorkunit.prototype, "preserveCompression", {
        get: function () { return this.get("preserveCompression"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DFUWorkunit.prototype, "expireDays", {
        get: function () { return this.get("expireDays"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DFUWorkunit.prototype, "PreserveFileParts", {
        get: function () { return this.get("PreserveFileParts"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DFUWorkunit.prototype, "FileAccessCost", {
        get: function () { return this.get("FileAccessCost"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DFUWorkunit.prototype, "KbPerSecAve", {
        get: function () { return this.get("KbPerSecAve"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DFUWorkunit.prototype, "KbPerSec", {
        get: function () { return this.get("KbPerSec"); },
        enumerable: false,
        configurable: true
    });
    //  Factories  ---
    DFUWorkunit.create = function (optsConnection, dfuServerQueue) {
        var retVal = new DFUWorkunit(optsConnection);
        return retVal.connection.CreateDFUWorkunit({ DFUServerQueue: dfuServerQueue }).then(function (response) {
            _workunits.set(retVal);
            retVal.set(response.result);
            return retVal;
        });
    };
    DFUWorkunit.attach = function (optsConnection, wuid, state) {
        var retVal = _workunits.get({ BaseUrl: optsConnection.baseUrl, ID: wuid }, function () {
            return new DFUWorkunit(optsConnection, wuid);
        });
        if (state) {
            retVal.set(state);
        }
        return retVal;
    };
    DFUWorkunit.sprayFixed = function (server, request) {
        var service = new FileSprayService(server);
        return service.SprayFixedEx(__assign({}, request)).then(function (response) {
            var wuid = response.wuid;
            return service.GetDFUWorkunit({ wuid: wuid }).then(function (response) {
                return DFUWorkunit.attach(server, wuid, response.result);
            });
        });
    };
    DFUWorkunit.sprayVariable = function (server, request) {
        var service = new FileSprayService(server);
        return service.SprayVariableEx(__assign({}, request)).then(function (response) {
            var wuid = response.wuid;
            return service.GetDFUWorkunit({ wuid: wuid }).then(function (response) {
                return DFUWorkunit.attach(server, wuid, response.result);
            });
        });
    };
    DFUWorkunit.despray = function (server, request) {
        var service = new FileSprayService(server);
        return service.DesprayEx(__assign({}, request)).then(function (response) {
            var wuid = response.wuid;
            return service.GetDFUWorkunit({ wuid: wuid }).then(function (response) {
                return DFUWorkunit.attach(server, wuid, response.result);
            });
        });
    };
    DFUWorkunit.prototype.update = function (request) {
        var _a, _b, _c, _d;
        return this.connection.UpdateDFUWorkunitEx({
            wu: {
                JobName: (_b = (_a = request === null || request === void 0 ? void 0 : request.wu) === null || _a === void 0 ? void 0 : _a.JobName) !== null && _b !== void 0 ? _b : this.JobName,
                isProtected: (_d = (_c = request === null || request === void 0 ? void 0 : request.wu) === null || _c === void 0 ? void 0 : _c.isProtected) !== null && _d !== void 0 ? _d : this.isProtected,
                ID: this.ID,
                State: this.State
            },
            ClusterOrig: this.ClusterName,
            JobNameOrig: this.JobName,
            isProtectedOrig: this.isProtected,
            StateOrig: this.State
        });
    };
    DFUWorkunit.prototype.isComplete = function () {
        switch (this.State) {
            case States.Finished:
            case States.Failed:
            case States.Aborted:
            case States.NotFound:
                return true;
        }
        return false;
    };
    DFUWorkunit.prototype.isFailed = function () {
        if (this.isComplete() && this.State !== States.Finished) {
            return true;
        }
        return false;
    };
    DFUWorkunit.prototype.isDeleted = function () {
        switch (this.State) {
            case States.NotFound:
                return true;
        }
        return false;
    };
    DFUWorkunit.prototype.isRunning = function () {
        return !this.isComplete();
    };
    DFUWorkunit.prototype.abort = function () {
        return this.connection.AbortDFUWorkunit({ wuid: this.ID });
    };
    DFUWorkunit.prototype.delete = function () {
        var _this = this;
        return this.DFUWUAction(FileSpray.DFUWUActions.Delete).then(function (response) {
            return _this.refresh().then(function () {
                _this._monitor();
                return response;
            });
        });
    };
    DFUWorkunit.prototype.refresh = function () {
        return __awaiter(this, arguments, void 0, function (full) {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.GetDFUWorkunit()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, this];
                }
            });
        });
    };
    DFUWorkunit.prototype.fetchXML = function (callback) {
        return this.DFUWUFile();
    };
    //  Monitoring  ---
    DFUWorkunit.prototype._monitor = function () {
        if (this.isComplete()) {
            this._monitorTickCount = 0;
            return;
        }
        _super.prototype._monitor.call(this);
    };
    DFUWorkunit.prototype._monitorTimeoutDuration = function () {
        var retVal = _super.prototype._monitorTimeoutDuration.call(this);
        if (this._monitorTickCount <= 1) { //  Once
            return 3000;
        }
        else if (this._monitorTickCount <= 5) { //  Twice
            return 6000;
        }
        else if (this._monitorTickCount <= 7) { //  Twice
            return 12000;
        }
        return retVal;
    };
    DFUWorkunit.prototype.DFUWUFile = function (_request) {
        if (_request === void 0) { _request = {}; }
        return this.connection.DFUWUFileEx(__assign(__assign({}, _request), { Wuid: this.ID })).then(function (response) {
            //TODO: additional processing?
            return response;
        }).catch(function (e) {
            return "";
        });
    };
    DFUWorkunit.prototype.DFUWUAction = function (actionType) {
        var _this = this;
        return this.connection.DFUWorkunitsAction({
            wuids: { Item: [this.ID] },
            Type: actionType
        }).then(function (response) {
            if (actionType === FileSpray.DFUWUActions.Delete)
                return response;
            return _this.refresh().then(function () {
                _this._monitor();
                return response;
            });
        });
    };
    //  Events  ---
    DFUWorkunit.prototype.on = function (eventID, propIDorCallback, callback) {
        var _this = this;
        if (this.isCallback(propIDorCallback)) {
            switch (eventID) {
                case "finished":
                    _super.prototype.on.call(this, "propChanged", "State", function (changeInfo) {
                        if (_this.isComplete()) {
                            propIDorCallback([changeInfo]);
                        }
                    });
                    break;
                case "changed":
                    _super.prototype.on.call(this, eventID, propIDorCallback);
                    break;
            }
        }
        else {
            switch (eventID) {
                case "changed":
                    _super.prototype.on.call(this, eventID, propIDorCallback, callback);
                    break;
            }
        }
        this._monitor();
        return this;
    };
    DFUWorkunit.prototype.watchUntilComplete = function (callback) {
        var _this = this;
        return new Promise(function (resolve, _) {
            var watchHandle = _this.watch(function (changes) {
                if (callback) {
                    callback(changes);
                }
                if (_this.isComplete()) {
                    watchHandle.release();
                    resolve(_this);
                }
            });
        });
    };
    DFUWorkunit.prototype.watchUntilRunning = function (callback) {
        var _this = this;
        return new Promise(function (resolve, _) {
            var watchHandle = _this.watch(function (changes) {
                if (callback) {
                    callback(changes);
                }
                if (_this.isComplete() || _this.isRunning()) {
                    watchHandle.release();
                    resolve(_this);
                }
            });
        });
    };
    DFUWorkunit.prototype.clearState = function (wuid) {
        this.clear({
            ID: wuid,
            State: States.Unknown
        });
    };
    //  FileSpray passthroughs  ---
    DFUWorkunit.prototype.GetDFUWorkunit = function (_request) {
        var _this = this;
        if (_request === void 0) { _request = {}; }
        return this.connection.GetDFUWorkunit(__assign(__assign({}, _request), { wuid: this.ID })).then(function (response) {
            _this.set(response.result);
            return response;
        }).catch(function (e) {
            //  deleted  ---
            var wuMissing = e.Exception.some(function (exception) {
                if (exception.Code === 20080 || exception.Code === 20081) {
                    _this.clearState(_this.ID);
                    _this.set("State", States.NotFound);
                    return true;
                }
                return false;
            });
            if (!wuMissing) {
                logger$1.warning("Unexpected exception:  ");
                throw e;
            }
            return {};
        });
    };
    return DFUWorkunit;
}(StateObject));

scopedLogger("clienttools/eclmeta");
var Attr = /** @class */ (function () {
    function Attr(xmlAttr) {
        this.__attrs = xmlAttr.$;
        this.name = xmlAttr.$.name;
    }
    return Attr;
}());
var Field = /** @class */ (function () {
    function Field(definition, xmlField) {
        this.__attrs = xmlField.$;
        this.definition = definition;
        this.name = xmlField.$.name;
        this.type = xmlField.$.type;
    }
    Object.defineProperty(Field.prototype, "scope", {
        get: function () {
            return this.definition;
        },
        enumerable: false,
        configurable: true
    });
    return Field;
}());
var ECLScope = /** @class */ (function () {
    function ECLScope(name, type, sourcePath, xmlDefinitions, line, start, body, end) {
        if (line === void 0) { line = 1; }
        if (start === void 0) { start = 0; }
        if (body === void 0) { body = 0; }
        if (end === void 0) { end = Number.MAX_VALUE; }
        this.name = name;
        this.type = type;
        this.sourcePath = path.normalize(sourcePath);
        this.line = +line - 1;
        this.start = +start;
        this.body = +body;
        this.end = +end;
        this.definitions = this.parseDefinitions(xmlDefinitions);
    }
    Object.defineProperty(ECLScope.prototype, "scope", {
        get: function () {
            return this;
        },
        enumerable: false,
        configurable: true
    });
    ECLScope.prototype.parseDefinitions = function (definitions) {
        var _this = this;
        if (definitions === void 0) { definitions = []; }
        return definitions.map(function (definition) {
            var retVal = new Definition(_this.sourcePath, definition);
            return retVal;
        });
    };
    ECLScope.prototype.contains = function (charOffset) {
        return charOffset >= this.start && charOffset <= this.end;
    };
    ECLScope.prototype.scopeStackAt = function (charOffset) {
        var retVal = [];
        if (this.contains(charOffset)) {
            retVal.push(this);
            this.definitions.forEach(function (def) {
                retVal = def.scopeStackAt(charOffset).concat(retVal);
            });
        }
        return retVal;
    };
    ECLScope.prototype._resolve = function (defs, qualifiedID) {
        if (defs === void 0) { defs = []; }
        var qualifiedIDParts = qualifiedID.split(".");
        var base = qualifiedIDParts.shift();
        var retVal = find(defs, function (def) {
            if (typeof def.name === "string" && typeof base === "string" && def.name.toLowerCase() === base.toLowerCase()) {
                return true;
            }
            return false;
        });
        if (retVal && retVal.definitions.length && qualifiedIDParts.length) {
            return this._resolve(retVal.definitions, qualifiedIDParts.join("."));
        }
        return retVal;
    };
    ECLScope.prototype.resolve = function (qualifiedID) {
        return this._resolve(this.definitions, qualifiedID);
    };
    ECLScope.prototype.suggestions = function () {
        var _this = this;
        return this.definitions.map(function (def) {
            return {
                name: def.name,
                type: _this.type
            };
        });
    };
    return ECLScope;
}());
var Definition = /** @class */ (function (_super) {
    __extends(Definition, _super);
    function Definition(sourcePath, xmlDefinition) {
        var _this = _super.call(this, xmlDefinition.$.name, xmlDefinition.$.type, sourcePath, xmlDefinition.children("Definition"), xmlDefinition.$.line, xmlDefinition.$.start, xmlDefinition.$.body, xmlDefinition.$.end) || this;
        _this.__attrs = xmlDefinition.$;
        _this.exported = !!xmlDefinition.$.exported;
        _this.shared = !!xmlDefinition.$.shared;
        _this.fullname = xmlDefinition.$.fullname;
        _this.inherittype = xmlDefinition.$.inherittype;
        _this.attrs = _this.parseAttrs(xmlDefinition.children("Attr"));
        _this.fields = _this.parseFields(xmlDefinition.children("Field"));
        return _this;
    }
    Definition.prototype.parseAttrs = function (attrs) {
        if (attrs === void 0) { attrs = []; }
        return attrs.map(function (attr) {
            var retVal = new Attr(attr);
            return retVal;
        });
    };
    Definition.prototype.parseFields = function (fields) {
        var _this = this;
        if (fields === void 0) { fields = []; }
        return fields.map(function (field) {
            var retVal = new Field(_this, field);
            return retVal;
        });
    };
    Definition.prototype.suggestions = function () {
        return _super.prototype.suggestions.call(this).concat(this.fields.map(function (field) {
            return {
                name: field.name,
                type: field.type
            };
        }));
    };
    return Definition;
}(ECLScope));
var Import = /** @class */ (function () {
    function Import(xmlImport) {
        this.__attrs = xmlImport.$;
        this.name = xmlImport.$.name;
        this.ref = xmlImport.$.ref;
        this.start = xmlImport.$.start;
        this.end = xmlImport.$.end;
        this.line = xmlImport.$.line;
    }
    return Import;
}());
var Source = /** @class */ (function (_super) {
    __extends(Source, _super);
    function Source(xmlSource) {
        var _this = _super.call(this, xmlSource.$.name, "source", xmlSource.$.sourcePath, xmlSource.children("Definition")) || this;
        _this.__attrs = xmlSource.$;
        var nameParts = xmlSource.$.name.split(".");
        nameParts.pop();
        var fakeNode = new XMLNode("");
        fakeNode.appendAttribute("name", "$");
        fakeNode.appendAttribute("ref", nameParts.join("."));
        _this.imports = __spreadArray([
            new Import(fakeNode)
        ], _this.parseImports(xmlSource.children("Import")), true);
        return _this;
    }
    Source.prototype.parseImports = function (imports) {
        if (imports === void 0) { imports = []; }
        return imports.map(function (imp) {
            var retVal = new Import(imp);
            return retVal;
        });
    };
    Source.prototype.resolve = function (qualifiedID, charOffset) {
        var retVal;
        //  Check Inner Scopes  ---
        if (!retVal && charOffset !== undefined) {
            var scopes = this.scopeStackAt(charOffset);
            scopes.some(function (scope) {
                retVal = scope.resolve(qualifiedID);
                return !!retVal;
            });
        }
        //  Check Definitions  ---
        if (!retVal) {
            retVal = _super.prototype.resolve.call(this, qualifiedID);
        }
        return retVal;
    };
    return Source;
}(ECLScope));
var isHiddenDirectory = function (source) { return path.basename(source).indexOf(".") === 0; };
var isDirectory = function (source) { return fs.lstatSync(source).isDirectory() && !isHiddenDirectory(source); };
var isEcl = function (source) { return [".ecl", ".ecllib"].indexOf(path.extname(source).toLowerCase()) >= 0; };
var modAttrs = function (source) { return fs.readdirSync(source).map(function (name) { return path.join(source, name); }).filter(function (path) { return isDirectory(path) || isEcl(path); }); };
var File = /** @class */ (function (_super) {
    __extends(File, _super);
    function File(name, sourcePath) {
        return _super.call(this, name, "file", sourcePath, []) || this;
    }
    File.prototype.suggestions = function () {
        return [];
    };
    return File;
}(ECLScope));
var Folder = /** @class */ (function (_super) {
    __extends(Folder, _super);
    function Folder(name, sourcePath) {
        return _super.call(this, name, "folder", sourcePath, []) || this;
    }
    Folder.prototype.suggestions = function () {
        return modAttrs(this.sourcePath).map(function (folder) {
            return {
                name: path.basename(folder, ".ecl"),
                type: "folder"
            };
        });
    };
    return Folder;
}(ECLScope));
var Workspace = /** @class */ (function () {
    function Workspace(workspacePath, eclccPath) {
        this._sourceByID = new DictionaryNoCase();
        this._sourceByPath = new Dictionary();
        this._test = new DictionaryNoCase();
        this._workspacePath = workspacePath;
        this._eclccPath = eclccPath;
    }
    Workspace.prototype.refresh = function () {
        this.primeWorkspace();
        this.primeClientTools();
    };
    Workspace.prototype.primeClientTools = function () {
        var _this = this;
        return locateClientTools(this._eclccPath, "", this._workspacePath).then(function (clientTools) {
            _this._clientTools = clientTools;
            return clientTools.paths();
        }).then(function (paths) {
            for (var _i = 0, _a = ["ECLCC_ECLLIBRARY_PATH", "ECLCC_PLUGIN_PATH"]; _i < _a.length; _i++) {
                var knownFolder = _a[_i];
                if (paths[knownFolder] && fs.existsSync(paths[knownFolder])) {
                    _this.walkChildFolders(paths[knownFolder], paths[knownFolder]);
                }
            }
            return _this;
        });
    };
    Workspace.prototype.primeWorkspace = function () {
        if (fs.existsSync(this._workspacePath)) {
            this.visitFolder(this._workspacePath, this._workspacePath);
        }
    };
    Workspace.prototype.walkChildFolders = function (folderPath, refPath, force) {
        if (force === void 0) { force = false; }
        for (var _i = 0, _a = modAttrs(folderPath); _i < _a.length; _i++) {
            var child = _a[_i];
            if (!isDirectory(child)) {
                this.visitFile(child, refPath, force);
            }
            else {
                this.visitFolder(child, refPath, force);
            }
        }
    };
    Workspace.prototype.visitFile = function (filePath, refPath, force) {
        if (force === void 0) { force = false; }
        var filePathInfo = path.parse(filePath);
        var pathNoExt = path.join(filePathInfo.dir, filePathInfo.name);
        var name = path.relative(refPath, pathNoExt).split(path.sep).join(".");
        if (force || !this._test.has(name)) {
            this._test.set(name, new File("", filePath));
        }
    };
    Workspace.prototype.visitFolder = function (folderPath, refPath, force) {
        if (force === void 0) { force = false; }
        var name = path.relative(refPath, folderPath).split(path.sep).join(".");
        if (force || !this._test.has(name)) {
            this._test.set(name, new Folder(name, folderPath));
            this.walkChildFolders(folderPath, refPath, force);
        }
    };
    Workspace.prototype.buildStack = function (parentStack, name, removeDupID) {
        var nameStack = name.split(".");
        if (removeDupID && parentStack[parentStack.length - 1] === nameStack[0]) {
            nameStack.shift();
        }
        var stack = __spreadArray(__spreadArray([], parentStack, true), nameStack, true);
        var qid = stack.join(".");
        return {
            stack: stack,
            qid: qid
        };
    };
    Workspace.prototype.walkECLScope = function (parentStack, scope) {
        var info = this.buildStack(parentStack, scope.name, true);
        this._test.set(info.qid, scope);
        for (var _i = 0, _a = scope.definitions; _i < _a.length; _i++) {
            var def = _a[_i];
            this.walkDefinition(info.stack, def);
        }
    };
    Workspace.prototype.walkField = function (parentStack, field) {
        var info = this.buildStack(parentStack, field.name, false);
        this._test.set(info.qid, field);
    };
    Workspace.prototype.walkDefinition = function (parentStack, definition) {
        var info = this.buildStack(parentStack, definition.name, true);
        this.walkECLScope(parentStack, definition);
        for (var _i = 0, _a = definition.fields; _i < _a.length; _i++) {
            var field = _a[_i];
            this.walkField(info.stack, field);
        }
    };
    Workspace.prototype.walkSource = function (source) {
        // const dirName = path.dirname(source.sourcePath);
        // const relName = path.relative(this._workspacePath, dirName).split(path.sep).join(".");
        // const folder = new Folder(relName, dirName);
        // this._test.set(folder.name, folder);
        this.walkECLScope([], source);
    };
    Workspace.prototype.parseSources = function (sources) {
        if (sources === void 0) { sources = []; }
        for (var _i = 0, sources_1 = sources; _i < sources_1.length; _i++) {
            var _source = sources_1[_i];
            if (_source.$.name) { //  Plugins have no name...
                var source = new Source(_source);
                this._sourceByID.set(source.name, source);
                this._sourceByPath.set(source.sourcePath, source);
                //  If external source like "std.system.ThorLib" then need to backup to "std" and add its folder
                if (source.name) {
                    var sourceNameParts = source.name.split(".");
                    var depth = sourceNameParts.length;
                    if (depth > 1) {
                        var sourcePath = source.sourcePath;
                        while (depth > 1) {
                            sourcePath = path.dirname(sourcePath);
                            --depth;
                        }
                        this.visitFolder(sourcePath, path.dirname(sourcePath));
                    }
                }
                this.walkSource(source);
            }
        }
    };
    Workspace.prototype.parseMetaXML = function (metaXML) {
        var metaParser = new MetaParser();
        metaParser.parse(metaXML);
        this.parseSources(metaParser.sources);
        return metaParser.sources.map(function (source) { return path.normalize(source.$.sourcePath); });
    };
    Workspace.prototype.resolveQualifiedID = function (filePath, qualifiedID, charOffset) {
        var retVal;
        if (!retVal && this._test.has(qualifiedID)) {
            retVal = this._test.get(qualifiedID).scope;
        }
        if (!retVal && this._sourceByPath.has(filePath)) {
            var eclSource = this._sourceByPath.get(filePath);
            //  Resolve Imports  ---
            var qualifiedIDParts = qualifiedID.split(".");
            for (var _i = 0, _a = eclSource.imports; _i < _a.length; _i++) {
                var imp = _a[_i];
                if (imp.name.toLowerCase() === qualifiedIDParts[0].toLowerCase()) {
                    if (imp.ref) {
                        qualifiedIDParts[0] = imp.ref;
                    }
                    else {
                        qualifiedIDParts.shift();
                    }
                    break;
                }
            }
            var realQID = qualifiedIDParts.join(".");
            if (!retVal && this._test.has(realQID)) {
                retVal = this._test.get(realQID).scope;
            }
            if (!retVal) {
                realQID = __spreadArray(__spreadArray([], eclSource.name.split("."), true), qualifiedIDParts, true).join(".");
                if (this._test.has(realQID)) {
                    retVal = this._test.get(realQID).scope;
                }
            }
        }
        return retVal;
    };
    Workspace.prototype.resolvePartialID = function (filePath, partialID, charOffset) {
        partialID = partialID.toLowerCase();
        var partialIDParts = partialID.split(".");
        partialIDParts.pop();
        var partialIDQualifier = partialIDParts.length === 1 ? partialIDParts[0] : partialIDParts.join(".");
        return this.resolveQualifiedID(filePath, partialIDQualifier, charOffset);
    };
    return Workspace;
}());
var workspaceCache = new Dictionary();
function attachWorkspace(_workspacePath, eclccPath) {
    var workspacePath = path.normalize(_workspacePath);
    if (!workspaceCache.has(workspacePath)) {
        var workspace = new Workspace(workspacePath, eclccPath);
        workspaceCache.set(workspacePath, workspace);
        workspace.refresh();
    }
    return workspaceCache.get(workspacePath);
}
function isQualifiedIDChar(lineText, charPos, reverse) {
    if (charPos < 0)
        return false;
    var testChar = lineText.charAt(charPos);
    return (reverse ? /[a-zA-Z\d_\.$]/ : /[a-zA-Z\d_]/).test(testChar);
}
function qualifiedIDBoundary(lineText, charPos, reverse) {
    while (isQualifiedIDChar(lineText, charPos, reverse)) {
        charPos += reverse ? -1 : 1;
    }
    return charPos + (reverse ? 1 : -1);
}
var MetaParser = /** @class */ (function (_super) {
    __extends(MetaParser, _super);
    function MetaParser() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.sources = [];
        return _this;
    }
    MetaParser.prototype.endXMLNode = function (e) {
        switch (e.name) {
            case "Source":
                this.sources.push(e);
                break;
        }
        _super.prototype.endXMLNode.call(this, e);
    };
    return MetaParser;
}(SAXStackParser));

var logger = scopedLogger("clienttools/eclcc");
var exeExt = os.type() === "Windows_NT" ? ".exe" : "";
function tidyCRLF(inStr) {
    return inStr.split("\r\n").join("\n").split("\r").join("\n");
}
var Version = /** @class */ (function () {
    function Version(build) {
        this.prefix = "";
        this.major = 0;
        this.minor = 0;
        this.patch = 0;
        this.postfix = "";
        var parts = build.split(" ");
        if (parts.length) {
            var match = /(?:(\w+)_)?(\d+)\.(\d+)\.(\d+)(?:-(.*))?/.exec(parts[parts.length - 1]);
            if (match) {
                this.prefix = match[1] || "";
                this.major = +match[2] || 0;
                this.minor = +match[3] || 0;
                this.patch = +match[4] || 0;
                this.postfix = match[5] || "";
            }
        }
    }
    Version.prototype.parse = function (build) {
    };
    Version.prototype.exists = function () {
        return this.major !== 0 || this.minor !== 0 || this.patch !== 0 || this.postfix !== "";
    };
    Version.prototype.compare = function (other) {
        if (this.major > other.major)
            return 1;
        if (this.major < other.major)
            return -1;
        if (this.minor > other.minor)
            return 1;
        if (this.minor < other.minor)
            return -1;
        if (this.patch > other.patch)
            return 1;
        if (this.patch < other.patch)
            return -1;
        if (this.postfix === "" && other.postfix !== "")
            return 1;
        return this.postfix.localeCompare(other.postfix);
    };
    Version.prototype.toString = function () {
        return "".concat(this.prefix, "_").concat(this.major, ".").concat(this.minor, ".").concat(this.patch, "-").concat(this.postfix);
    };
    return Version;
}());
var ERROR = "error";
var WARN = "warning";
var Errors = /** @class */ (function () {
    function Errors(checked) {
        this.errWarn = [];
        this.errOther = [];
        this._checked = checked;
    }
    Errors.prototype.checked = function () {
        return this._checked;
    };
    Errors.prototype.all = function () {
        return this.errWarn;
    };
    Errors.prototype.errors = function () {
        return this.errWarn.filter(function (e) { return e.severity === ERROR; });
    };
    Errors.prototype.hasError = function () {
        return this.errors().length > 0;
    };
    Errors.prototype.warnings = function () {
        return this.errWarn.filter(function (e) { return e.severity === WARN; });
    };
    Errors.prototype.hasWarning = function () {
        return this.warnings().length > 0;
    };
    Errors.prototype.info = function () {
        return this.errWarn.filter(function (e) { return [ERROR, WARN].indexOf(e.severity) < 0; });
    };
    Errors.prototype.hasOther = function () {
        return this.info().length > 0;
    };
    Errors.prototype.unknown = function () {
        return this.errOther;
    };
    Errors.prototype.hasUnknown = function () {
        return this.unknown().length > 0;
    };
    return Errors;
}());
var EclccErrors = /** @class */ (function (_super) {
    __extends(EclccErrors, _super);
    function EclccErrors(stdErr, checked) {
        var _this = _super.call(this, checked) || this;
        if (stdErr && stdErr.length) {
            for (var _i = 0, _a = stdErr.split(os.EOL); _i < _a.length; _i++) {
                var errLine = _a[_i];
                var match = /([a-zA-Z]:\\(?:[- \w\.\d]+\\)*(?:[- \w\.\d]+)?|(?:\/[\w\.\-]+)+)\((\d*),(\d*)\) ?: ?(error|warning|info) C(\d*) ?: ?(.*)/.exec(errLine);
                if (match) {
                    var filePath = match[1], row = match[2], _col = match[3], severity = match[4], code = match[5], _msg = match[6];
                    var line = +row;
                    var col = +_col;
                    var msg = code + ":  " + _msg;
                    _this.errWarn.push({ filePath: filePath, line: line, col: col, msg: msg, severity: severity });
                    continue;
                }
                match = /(error|warning|info): (.*)/i.exec(errLine);
                if (match) {
                    var severity = match[1], msg = match[2];
                    _this.errWarn.push({ filePath: "", line: 0, col: 0, msg: msg, severity: severity });
                    continue;
                }
                match = /\d error(s?), \d warning(s?)/.exec(errLine);
                if (match) {
                    continue;
                }
                logger.warning("parseECLErrors:  Unable to parse \"".concat(errLine, "\""));
                _this.errOther.push(errLine);
            }
        }
        _this._checked = checked;
        return _this;
    }
    return EclccErrors;
}(Errors));
var EnvchkErrors = /** @class */ (function (_super) {
    __extends(EnvchkErrors, _super);
    function EnvchkErrors(filePath, stdErr, checked) {
        var _this = _super.call(this, checked) || this;
        var content = fs.readFileSync(filePath, "utf8");
        content = content.replace(/\r\n/g, "\n");
        _this._lines = content.split("\n");
        if (stdErr && stdErr.length) {
            for (var _i = 0, _a = stdErr.split(os.EOL); _i < _a.length; _i++) {
                var errLine = _a[_i];
                var match = /(Warning|Error) : Path\=(\S*?)(\[\S*\])? Message\=(.*)/.exec(errLine);
                if (match) {
                    var severity = match[1], _path = match[2], _attr = match[3], _msg = match[4];
                    var msg = "".concat(_path, " ").concat(_attr ? _attr : "", ":  ").concat(_msg);
                    var _b = _this.locate(_path), line = _b[0], col = _b[1];
                    _this.errWarn.push({ filePath: filePath, line: line, col: col, msg: msg, severity: severity });
                    continue;
                }
                if (match) {
                    continue;
                }
                logger.warning("parseECLErrors:  Unable to parse \"".concat(errLine, "\""));
                _this.errOther.push(errLine);
            }
        }
        _this._checked = checked;
        return _this;
    }
    EnvchkErrors.prototype.locate = function (path) {
        var pathParts = path.split("/");
        if (pathParts.length && pathParts[0] === "") {
            pathParts.shift();
        }
        if (pathParts.length > 0) {
            var lineIdx = 0;
            for (var _i = 0, _a = this._lines; _i < _a.length; _i++) {
                var line = _a[_i];
                var testStr = "<" + pathParts[0];
                if (line.indexOf(testStr + " ") >= 0 || line.indexOf(testStr + ">") >= 0) {
                    pathParts.shift();
                    if (pathParts.length === 0) {
                        return [lineIdx + 1, line.indexOf(testStr) + 1];
                    }
                }
                ++lineIdx;
            }
        }
        return [0, 0];
    };
    return EnvchkErrors;
}(Errors));
function walkXmlJson(node, callback, stack) {
    stack = stack || [];
    stack.push(node);
    for (var key in node) {
        if (node.hasOwnProperty(key)) {
            var childNode = node[key];
            callback(key, childNode, stack);
            if (childNode instanceof Array) {
                childNode.forEach(function (child) {
                    walkXmlJson(child, callback, stack);
                });
            }
            else if (typeof childNode === "object") {
                walkXmlJson(childNode, callback, stack);
            }
        }
    }
    stack.pop();
}
var LocalWorkunit = /** @class */ (function () {
    function LocalWorkunit(jsonWU) {
        this.jsonWU = jsonWU;
    }
    LocalWorkunit.prototype.bpGetValidLocations = function (filePath) {
        var retVal = [];
        if (exists("W_LOCAL.Graphs", this.jsonWU)) {
            var id_1 = "";
            walkXmlJson(this.jsonWU.W_LOCAL.Graphs, function (key, item, _stack) {
                if (key === "$" && item.id) {
                    id_1 = item.id;
                }
                if (key === "$" && item.name === "definition") {
                    var match = /([a-z,A-Z]:\\(?:[-\w\.\d]+\\)*(?:[-\w\.\d]+)?|(?:\/[\w\.\-]+)+)\((\d*),(\d*)\)/.exec(item.value);
                    if (match) {
                        var file = match[1], row = match[2], _col = match[3];
                        var line = +row;
                        var col = +_col;
                        if (filePath === file) {
                            retVal.push({ file: file, line: line, col: col, id: id_1 });
                        }
                    }
                }
                // console.log(`${key}:  ` + JSON.stringify(item));
            });
        }
        return retVal;
    };
    return LocalWorkunit;
}());
var ClientTools = /** @class */ (function () {
    function ClientTools(eclccPath, cwd, includeFolders, legacyMode, args, version) {
        if (includeFolders === void 0) { includeFolders = []; }
        if (legacyMode === void 0) { legacyMode = false; }
        if (args === void 0) { args = []; }
        this._paths = {};
        this.eclccPath = eclccPath;
        this.binPath = path.dirname(this.eclccPath);
        this.envchkPath = path.join(this.binPath, "envchk" + exeExt);
        this.eclBundlePath = path.join(this.binPath, "ecl-bundle" + exeExt);
        this.cwd = path.normalize(cwd || this.binPath);
        this.includeFolders = includeFolders;
        this._legacyMode = legacyMode;
        this._args = args;
        this._version = version;
    }
    ClientTools.prototype.clone = function (cwd, includeFolders, legacyMode, args) {
        if (legacyMode === void 0) { legacyMode = false; }
        if (args === void 0) { args = []; }
        return new ClientTools(this.eclccPath, cwd, includeFolders, legacyMode, args, this._version);
    };
    ClientTools.prototype.exists = function (filePath) {
        try {
            fs.accessSync(filePath);
            return true;
        }
        catch (e) { }
        return false;
    };
    ClientTools.prototype.args = function (additionalItems) {
        if (additionalItems === void 0) { additionalItems = []; }
        var retVal = __spreadArray([], this._args, true);
        if (this._legacyMode) {
            retVal.push("-legacy");
        }
        return retVal.concat(this.includeFolders.map(function (includePath) {
            return "-I" + path.normalize(includePath);
        })).concat(additionalItems);
    };
    ClientTools.prototype.version = function () {
        var _this = this;
        if (this._version) {
            return Promise.resolve(this._version);
        }
        return this.execFile(this.eclccPath, this.binPath, this.args(["--version"]), "eclcc", "Cannot find ".concat(this.eclccPath)).then(function (response) {
            _this._version = new Version(response.stdout);
            return _this._version;
        });
    };
    ClientTools.prototype.versionSync = function () {
        return this._version;
    };
    ClientTools.prototype.paths = function () {
        var _this = this;
        return this.execFile(this.eclccPath, this.cwd, this.args(["-showpaths"]), "eclcc", "Cannot find ".concat(this.eclccPath)).then(function (response) {
            if (response && response.stdout && response.stdout.length) {
                var paths = response.stdout.split(/\r?\n/);
                for (var _i = 0, paths_1 = paths; _i < paths_1.length; _i++) {
                    var path_1 = paths_1[_i];
                    var parts = path_1.split("=");
                    if (parts.length === 2) {
                        _this._paths[parts[0]] = parts[1];
                    }
                }
            }
            return _this._paths;
        });
    };
    ClientTools.prototype.loadXMLDoc = function (filePath, removeOnRead) {
        return new Promise(function (resolve, _reject) {
            var fileData = fs.readFileSync(filePath, "ascii");
            var retVal = xml2json(fileData);
            if (removeOnRead) {
                fs.unlink(filePath, function (err) { });
            }
            resolve(retVal);
        });
    };
    ClientTools.prototype.createWU = function (filename) {
        var _this = this;
        var tmpName = tmp.tmpNameSync({ prefix: "eclcc-wu-tmp", postfix: "" });
        var args = ["-o" + tmpName, "-wu"].concat([filename]);
        return this.execFile(this.eclccPath, this.cwd, this.args(args), "eclcc", "Cannot find ".concat(this.eclccPath)).then(function (_response) {
            var xmlPath = path.normalize(tmpName + ".xml");
            var contentPromise = _this.exists(xmlPath) ? _this.loadXMLDoc(xmlPath, true) : Promise.resolve({});
            return contentPromise.then(function (content) {
                return new LocalWorkunit(content);
            });
        });
    };
    ClientTools.prototype.createArchive = function (filename) {
        var args = ["-E"].concat([filename]);
        return this.execFile(this.eclccPath, this.cwd, this.args(args), "eclcc", "Cannot find ".concat(this.eclccPath)).then(function (response) {
            return {
                content: response.stdout,
                err: new EclccErrors(response.stderr, [])
            };
        });
    };
    ClientTools.prototype.attachWorkspace = function () {
        return attachWorkspace(this.cwd);
    };
    ClientTools.prototype.fetchMeta = function (filePath) {
        return Promise.all([
            attachWorkspace(this.cwd),
            this.execFile(this.eclccPath, this.cwd, this.args(["-M", filePath]), "eclcc", "Cannot find ".concat(this.eclccPath))
        ]).then(function (_a) {
            var metaWorkspace = _a[0], execFileResponse = _a[1];
            if (execFileResponse && execFileResponse.stdout && execFileResponse.stdout.length) {
                metaWorkspace.parseMetaXML(execFileResponse.stdout);
            }
            return metaWorkspace;
        });
    };
    ClientTools.prototype.syntaxCheck = function (filePath, args) {
        if (args === void 0) { args = ["-syntax"]; }
        return Promise.all([
            attachWorkspace(this.cwd),
            this.execFile(this.eclccPath, this.cwd, this.args(__spreadArray(__spreadArray([], args, true), ["-M", filePath], false)), "eclcc", "Cannot find ".concat(this.eclccPath))
        ]).then(function (_a) {
            var metaWorkspace = _a[0], execFileResponse = _a[1];
            var checked = [];
            if (execFileResponse && execFileResponse.stdout && execFileResponse.stdout.length) {
                checked = metaWorkspace.parseMetaXML(execFileResponse.stdout);
            }
            return new EclccErrors(execFileResponse ? execFileResponse.stderr : "", checked);
        });
    };
    ClientTools.prototype.envCheck = function (filePath, args) {
        if (args === void 0) { args = []; }
        return Promise.all([
            attachWorkspace(this.cwd),
            this.execFile(this.envchkPath, this.cwd, this.args(__spreadArray(__spreadArray([], args, true), [filePath], false)), "envchk", "Cannot find ".concat(this.envchkPath))
        ]).then(function (_a) {
            _a[0]; var execFileResponse = _a[1];
            return new EnvchkErrors(filePath, execFileResponse ? execFileResponse.stderr : "", []);
        });
    };
    ClientTools.prototype.bundleList = function () {
        var _this = this;
        var bundlesRegEx = /\|(.*)\|(.*)\|(.*)\|/g;
        return Promise.all([
            fetch("https://raw.githubusercontent.com/hpcc-systems/ecl-bundles/master/README.rst")
                .then(function (response) { return response.text(); })
                .then(function (readme) {
                var retVal = [];
                var m = bundlesRegEx.exec(readme);
                while (m) {
                    retVal.push({
                        name: m[1].trim(),
                        description: m[2].trim(),
                        url: m[3].trim()
                    });
                    m = bundlesRegEx.exec(readme);
                }
                return retVal;
            }),
            this.execFile(this.eclBundlePath, this.cwd, this.args(["list"]), "ecl-bundle", "Cannot find ".concat(this.eclBundlePath))
                .then(function (installedText) {
                return tidyCRLF(installedText.stdout).split("\n");
            }).then(function (installedItems) {
                var allProps = {};
                return Promise.all(installedItems.filter(function (ii) { return !!ii; }).map(function (ii) {
                    return _this.execFile(_this.eclBundlePath, _this.cwd, _this.args(["info", ii]), "ecl-bundle", "Cannot find ".concat(_this.eclBundlePath))
                        .then(function (infoText) {
                        return tidyCRLF(infoText.stdout).split("\n");
                    }).then(function (info) {
                        var props = {};
                        info.forEach(function (line) {
                            var parts = line.split(":");
                            props[parts.shift().trim()] = parts.join(":").trim();
                        });
                        allProps[ii] = {
                            name: ii,
                            props: props
                        };
                    });
                })).then(function () { return allProps; });
            })
        ]).then(function (_a) {
            var bundles = _a[0], installed = _a[1];
            bundles.forEach(function (b) {
                if (installed[b.name]) {
                    b.props = installed[b.name].props;
                    delete installed[b.name];
                }
            });
            for (var key in installed) {
                bundles.push({
                    name: key,
                    url: "",
                    description: "",
                    props: installed[key].props
                });
            }
            return bundles;
        }).catch(function (e) {
            return [];
        });
    };
    ClientTools.prototype.bundleInstall = function (bundleUrl) {
        return Promise.all([
            attachWorkspace(this.cwd),
            this.execFile(this.eclBundlePath, this.cwd, this.args(["install", bundleUrl]), "ecl-bundle", "Cannot find ".concat(this.eclBundlePath))
        ]).then(function (_a) {
            _a[0]; var execFileResponse = _a[1];
            return execFileResponse;
        });
    };
    ClientTools.prototype.bundleUninstall = function (name) {
        return Promise.all([
            attachWorkspace(this.cwd),
            this.execFile(this.eclBundlePath, this.cwd, this.args(["uninstall", name]), "ecl-bundle", "Cannot find ".concat(this.eclBundlePath))
        ]).then(function (_a) {
            _a[0]; var execFileResponse = _a[1];
            return execFileResponse;
        });
    };
    ClientTools.prototype.execFile = function (cmd, cwd, args, _toolName, _notFoundError) {
        return new Promise(function (resolve, _reject) {
            logger.debug("".concat(cmd, " ").concat(args.join(" ")));
            var child = cp.spawn(cmd, args, { cwd: cwd });
            var stdOut = "";
            var stdErr = "";
            child.stdout.on("data", function (data) {
                stdOut += data.toString();
            });
            child.stderr.on("data", function (data) {
                stdErr += data.toString();
            });
            child.on("close", function (_code, _signal) {
                resolve({
                    code: _code,
                    stdout: stdOut.trim(),
                    stderr: stdErr.trim()
                });
            });
        });
    };
    return ClientTools;
}());
function locateClientToolsInFolder(rootFolder, clientTools) {
    if (rootFolder) {
        var hpccSystemsFolder_1 = path.join(rootFolder, "HPCCSystems");
        if (fs.existsSync(hpccSystemsFolder_1) && fs.statSync(hpccSystemsFolder_1).isDirectory()) {
            if (os.type() !== "Windows_NT") {
                var eclccPath = path.join(hpccSystemsFolder_1, "bin", "eclcc");
                if (fs.existsSync(eclccPath)) {
                    clientTools.push(new ClientTools(eclccPath));
                }
            }
            fs.readdirSync(hpccSystemsFolder_1).forEach(function (versionFolder) {
                var eclccPath = path.join(hpccSystemsFolder_1, versionFolder, "clienttools", "bin", "eclcc" + exeExt);
                if (fs.existsSync(eclccPath)) {
                    var name_1 = path.basename(versionFolder);
                    var version = new Version(name_1);
                    if (version.exists()) {
                        clientTools.push(new ClientTools(eclccPath));
                    }
                }
            });
        }
    }
}
var allClientToolsCache;
function clearAllClientToolsCache() {
    allClientToolsCache = undefined;
}
function locateAllClientTools() {
    if (allClientToolsCache)
        return allClientToolsCache;
    var clientTools = [];
    switch (os.type()) {
        case "Windows_NT":
            var rootFolder86 = process.env["ProgramFiles(x86)"] || "";
            if (rootFolder86) {
                locateClientToolsInFolder(rootFolder86, clientTools);
            }
            var rootFolder = process.env["ProgramFiles"] || "";
            if (rootFolder) {
                locateClientToolsInFolder(rootFolder, clientTools);
            }
            if (!rootFolder86 && !rootFolder) {
                locateClientToolsInFolder("c:\\Program Files (x86)", clientTools);
            }
            break;
        case "Linux":
        case "Darwin":
            locateClientToolsInFolder("/opt", clientTools);
            break;
    }
    allClientToolsCache = Promise.all(clientTools.map(function (ct) { return ct.version(); })).then(function () {
        clientTools.sort(function (l, r) {
            return r.versionSync().compare(l.versionSync());
        });
        return clientTools;
    });
    return allClientToolsCache;
}
var eclccPathMsg = "";
function logEclccPath(eclccPath) {
    var msg = "Using eclccPath setting:  ".concat(eclccPath);
    if (eclccPathMsg !== msg) {
        logger.info(msg);
        eclccPathMsg = msg;
    }
}
function locateClientTools(overridePath, build, cwd, includeFolders, legacyMode, args) {
    if (overridePath === void 0) { overridePath = ""; }
    if (build === void 0) { build = ""; }
    if (cwd === void 0) { cwd = "."; }
    if (includeFolders === void 0) { includeFolders = []; }
    if (legacyMode === void 0) { legacyMode = false; }
    if (args === void 0) { args = []; }
    if (overridePath && fs.existsSync(overridePath)) {
        logEclccPath(overridePath);
        return Promise.resolve(new ClientTools(overridePath, cwd, includeFolders, legacyMode, args));
    }
    return locateAllClientTools().then(function (allClientToolsCache2) {
        if (!allClientToolsCache2.length) {
            throw new Error("Unable to locate ECL Client Tools.");
        }
        var buildVersion = new Version(build);
        var latest;
        var bestMajor;
        for (var _i = 0, allClientToolsCache2_1 = allClientToolsCache2; _i < allClientToolsCache2_1.length; _i++) {
            var ct = allClientToolsCache2_1[_i];
            var ctVersion = ct.versionSync();
            if (ctVersion.exists()) {
                if (!latest)
                    latest = ct;
                if (!bestMajor && buildVersion.major === ctVersion.major)
                    bestMajor = ct;
                if (buildVersion.major === ctVersion.major && buildVersion.minor === ctVersion.minor)
                    return ct.clone(cwd, includeFolders, legacyMode, args);
            }
        }
        var best = bestMajor || latest;
        logEclccPath(best.eclccPath);
        return best.clone(cwd, includeFolders, legacyMode, args);
    });
}

// DOM Parser polyfill  ---
root.DOMParser = DOMParser$1;
if (typeof root.fetch === "undefined") {
    //  NodeJS < v18  ---
    root.fetch = fetch$1;
    root.fetch.__rejectUnauthorizedAgent = new https.Agent({
        rejectUnauthorized: false
    });
}
else {
    //  NodeJS >= v18  ---
    root.fetch.__defaultAgent = new Agent();
    root.fetch.__rejectUnauthorizedAgent = new Agent({
        connect: {
            rejectUnauthorized: false
        }
    });
    root.fetch.__setGlobalDispatcher = setGlobalDispatcher;
}
if (typeof root.AbortController === "undefined") {
    root.AbortController = AbortController;
}
var globalCA = "";
if (https.globalAgent.options.ca !== undefined) {
    if (Array.isArray(https.globalAgent.options.ca) && https.globalAgent.options.ca.length) {
        if (typeof https.globalAgent.options.ca[0] === "string") {
            globalCA = https.globalAgent.options.ca.join("\n");
        }
        else if (https.globalAgent.options.ca[0] instanceof Buffer) {
            globalCA = https.globalAgent.options.ca.map(function (row) { return row.toString(); }).join("\n");
        }
    }
    else if (typeof https.globalAgent.options.ca === "string") {
        globalCA = https.globalAgent.options.ca;
    }
    else if (https.globalAgent.options.ca instanceof Buffer) {
        globalCA = https.globalAgent.options.ca.toString();
    }
    globalCA += "\n";
}
root.fetch.__trustwaveAgent = new https.Agent({
    ca: globalCA + trustwave
});
if (typeof root.btoa === "undefined") {
    root.btoa = function (str) {
        return Buffer.from(str || "", "utf8").toString("base64");
    };
}

export { AccessService, AccountService, Activity, Attr, Attribute, BUILD_VERSION, BaseScope, ClientTools, CloudService, CodesignService, Connection, DFUArrayActions, DFUChangeProtection, DFUChangeRestriction, DFUDefFileFormat, DFUService, DFUWorkunit, DFUWorkunitCache, DFUXRefService, DaliService, Definition, ECLGraph, ECLScope, ESPConnection, ESPExceptions, EclService, EclccErrors, ElkService, EnvchkErrors, Errors, Field, File, FileSpray, FileSprayService, FileSprayStates, Folder, GlobalResultCache, GraphCache, Import, LocalWorkunit, LogaccessService, LogicalFile, LogicalFileCache, Machine, MachineCache, MachineService, PKG_NAME, PKG_VERSION, PackageProcessService, PropertyType, Query, QueryGraph, RelatedProperty, Resource, ResourcesService, Result, ResultCache, SMCService, SashaService, Scope, ScopeEdge, ScopeGraph, ScopeSubgraph, ScopeVertex, Service, Source, SourceFile, Store, StoreCache, StoreService, TargetCluster, TargetClusterCache, Timer, Topology, TopologyCache, TopologyService, ValueChangedMessage, Version, WUStateID, WUUpdate, Workspace, Workunit, WorkunitCache, WorkunitsService, WorkunitsServiceEx, WsAccess, WsDfu, WsLogaccess, WsSMC, WsSasha, WsTopology, WsWorkunits, XGMMLEdge, XGMMLGraph, XGMMLSubgraph, XGMMLVertex, XSDNode, XSDSchema, XSDSimpleType, XSDXMLNode, attachWorkspace, clearAllClientToolsCache, createConnection, createGraph, createXGMMLGraph, defaultTargetCluster, deserializeResponse, get, hookSend, instanceOfIConnection, instanceOfIOptions, isArray, isECLResult, isExceptions, isWUInfoWorkunit, isWUQueryECLWorkunit, jsonp, locateAllClientTools, locateClientTools, parseXSD, parseXSD2, post, qualifiedIDBoundary, send, serializeRequest, setTransportFactory, splitMetric, targetClusters, walkXmlJson };
//# sourceMappingURL=undefined.js.map
